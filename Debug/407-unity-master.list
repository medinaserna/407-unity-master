
407-unity-master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000684c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  080069dc  080069dc  000169dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006aa8  08006aa8  00020254  2**0
                  CONTENTS
  4 .ARM          00000008  08006aa8  08006aa8  00016aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ab0  08006ab0  00020254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ab0  08006ab0  00016ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ab4  08006ab4  00016ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000254  20000000  08006ab8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b60  20000254  08006d0c  00020254  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001db4  08006d0c  00021db4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f804  00000000  00000000  00020284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a38  00000000  00000000  0003fa88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00012836  00000000  00000000  000444c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014d0  00000000  00000000  00056cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013e8  00000000  00000000  000581c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000264cd  00000000  00000000  000595b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000229cf  00000000  00000000  0007fa7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d24ea  00000000  00000000  000a244c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00174936  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003e00  00000000  00000000  00174988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000254 	.word	0x20000254
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080069c4 	.word	0x080069c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000258 	.word	0x20000258
 80001cc:	080069c4 	.word	0x080069c4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000588:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058a:	2400      	movs	r4, #0
 800058c:	9407      	str	r4, [sp, #28]
 800058e:	9408      	str	r4, [sp, #32]
 8000590:	9409      	str	r4, [sp, #36]	; 0x24
 8000592:	940a      	str	r4, [sp, #40]	; 0x28
 8000594:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000596:	9401      	str	r4, [sp, #4]
 8000598:	4b68      	ldr	r3, [pc, #416]	; (800073c <MX_GPIO_Init+0x1b8>)
 800059a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800059c:	f042 0210 	orr.w	r2, r2, #16
 80005a0:	631a      	str	r2, [r3, #48]	; 0x30
 80005a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005a4:	f002 0210 	and.w	r2, r2, #16
 80005a8:	9201      	str	r2, [sp, #4]
 80005aa:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ac:	9402      	str	r4, [sp, #8]
 80005ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005b0:	f042 0204 	orr.w	r2, r2, #4
 80005b4:	631a      	str	r2, [r3, #48]	; 0x30
 80005b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005b8:	f002 0204 	and.w	r2, r2, #4
 80005bc:	9202      	str	r2, [sp, #8]
 80005be:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c0:	9403      	str	r4, [sp, #12]
 80005c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80005c8:	631a      	str	r2, [r3, #48]	; 0x30
 80005ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005cc:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80005d0:	9203      	str	r2, [sp, #12]
 80005d2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d4:	9404      	str	r4, [sp, #16]
 80005d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005d8:	f042 0201 	orr.w	r2, r2, #1
 80005dc:	631a      	str	r2, [r3, #48]	; 0x30
 80005de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005e0:	f002 0201 	and.w	r2, r2, #1
 80005e4:	9204      	str	r2, [sp, #16]
 80005e6:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e8:	9405      	str	r4, [sp, #20]
 80005ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005ec:	f042 0202 	orr.w	r2, r2, #2
 80005f0:	631a      	str	r2, [r3, #48]	; 0x30
 80005f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005f4:	f002 0202 	and.w	r2, r2, #2
 80005f8:	9205      	str	r2, [sp, #20]
 80005fa:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005fc:	9406      	str	r4, [sp, #24]
 80005fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000600:	f042 0208 	orr.w	r2, r2, #8
 8000604:	631a      	str	r2, [r3, #48]	; 0x30
 8000606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000608:	f003 0308 	and.w	r3, r3, #8
 800060c:	9306      	str	r3, [sp, #24]
 800060e:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000610:	4e4b      	ldr	r6, [pc, #300]	; (8000740 <MX_GPIO_Init+0x1bc>)
 8000612:	4622      	mov	r2, r4
 8000614:	2108      	movs	r1, #8
 8000616:	4630      	mov	r0, r6
 8000618:	f001 fedd 	bl	80023d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800061c:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8000750 <MX_GPIO_Init+0x1cc>
 8000620:	2201      	movs	r2, #1
 8000622:	4611      	mov	r1, r2
 8000624:	4640      	mov	r0, r8
 8000626:	f001 fed6 	bl	80023d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT0_Pin|OUT1_Pin|OUT2_Pin|OUT3_Pin, GPIO_PIN_RESET);
 800062a:	4f46      	ldr	r7, [pc, #280]	; (8000744 <MX_GPIO_Init+0x1c0>)
 800062c:	4622      	mov	r2, r4
 800062e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000632:	4638      	mov	r0, r7
 8000634:	f001 fecf 	bl	80023d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, OUT4_Pin|OUT5_Pin|OUT6_Pin|OUT7_Pin
 8000638:	f8df a118 	ldr.w	sl, [pc, #280]	; 8000754 <MX_GPIO_Init+0x1d0>
 800063c:	4622      	mov	r2, r4
 800063e:	f64f 7110 	movw	r1, #65296	; 0xff10
 8000642:	4650      	mov	r0, sl
 8000644:	f001 fec7 	bl	80023d6 <HAL_GPIO_WritePin>
                          |greenLED_Pin|orangeLED_Pin|redLED_Pin|blueLED_Pin
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : IN3_Pin IN1_Pin IN2_Pin */
  GPIO_InitStruct.Pin = IN3_Pin|IN1_Pin|IN2_Pin;
 8000648:	2334      	movs	r3, #52	; 0x34
 800064a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800064c:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000650:	a907      	add	r1, sp, #28
 8000652:	4630      	mov	r0, r6
 8000654:	f001 fd36 	bl	80020c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000658:	f04f 0908 	mov.w	r9, #8
 800065c:	f8cd 901c 	str.w	r9, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000660:	2501      	movs	r5, #1
 8000662:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000666:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000668:	a907      	add	r1, sp, #28
 800066a:	4630      	mov	r0, r6
 800066c:	f001 fd2a 	bl	80020c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN0_Pin */
  GPIO_InitStruct.Pin = IN0_Pin;
 8000670:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000674:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000676:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(IN0_GPIO_Port, &GPIO_InitStruct);
 800067a:	a907      	add	r1, sp, #28
 800067c:	4640      	mov	r0, r8
 800067e:	f001 fd21 	bl	80020c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000682:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000684:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000688:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800068a:	a907      	add	r1, sp, #28
 800068c:	4640      	mov	r0, r8
 800068e:	f001 fd19 	bl	80020c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000692:	f8cd 901c 	str.w	r9, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000696:	f04f 0902 	mov.w	r9, #2
 800069a:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a0:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006a2:	f04f 0b05 	mov.w	fp, #5
 80006a6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80006aa:	a907      	add	r1, sp, #28
 80006ac:	4640      	mov	r0, r8
 80006ae:	f001 fd09 	bl	80020c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006b2:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b4:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006b8:	a907      	add	r1, sp, #28
 80006ba:	4823      	ldr	r0, [pc, #140]	; (8000748 <MX_GPIO_Init+0x1c4>)
 80006bc:	f001 fd02 	bl	80020c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOOT1_Pin IN5_Pin IN6_Pin IN4_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin|IN5_Pin|IN6_Pin|IN4_Pin;
 80006c0:	f44f 739a 	mov.w	r3, #308	; 0x134
 80006c4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c6:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ca:	a907      	add	r1, sp, #28
 80006cc:	4638      	mov	r0, r7
 80006ce:	f001 fcf9 	bl	80020c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80006d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006d6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d8:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006de:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006e0:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80006e4:	a907      	add	r1, sp, #28
 80006e6:	4638      	mov	r0, r7
 80006e8:	f001 fcec 	bl	80020c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT0_Pin OUT1_Pin OUT2_Pin OUT3_Pin */
  GPIO_InitStruct.Pin = OUT0_Pin|OUT1_Pin|OUT2_Pin|OUT3_Pin;
 80006ec:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80006f0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f2:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f6:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f8:	a907      	add	r1, sp, #28
 80006fa:	4638      	mov	r0, r7
 80006fc:	f001 fce2 	bl	80020c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT4_Pin OUT5_Pin OUT6_Pin OUT7_Pin
                           greenLED_Pin orangeLED_Pin redLED_Pin blueLED_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = OUT4_Pin|OUT5_Pin|OUT6_Pin|OUT7_Pin
 8000700:	f64f 7310 	movw	r3, #65296	; 0xff10
 8000704:	9307      	str	r3, [sp, #28]
                          |greenLED_Pin|orangeLED_Pin|redLED_Pin|blueLED_Pin
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000706:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800070c:	a907      	add	r1, sp, #28
 800070e:	4650      	mov	r0, sl
 8000710:	f001 fcd8 	bl	80020c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_OverCurrent_Pin IN7_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin|IN7_Pin;
 8000714:	23a0      	movs	r3, #160	; 0xa0
 8000716:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000718:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800071c:	a907      	add	r1, sp, #28
 800071e:	4650      	mov	r0, sl
 8000720:	f001 fcd0 	bl	80020c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000724:	f8cd 901c 	str.w	r9, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000728:	4b08      	ldr	r3, [pc, #32]	; (800074c <MX_GPIO_Init+0x1c8>)
 800072a:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800072e:	a907      	add	r1, sp, #28
 8000730:	4630      	mov	r0, r6
 8000732:	f001 fcc7 	bl	80020c4 <HAL_GPIO_Init>

}
 8000736:	b00d      	add	sp, #52	; 0x34
 8000738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800073c:	40023800 	.word	0x40023800
 8000740:	40021000 	.word	0x40021000
 8000744:	40020400 	.word	0x40020400
 8000748:	40020000 	.word	0x40020000
 800074c:	10120000 	.word	0x10120000
 8000750:	40020800 	.word	0x40020800
 8000754:	40020c00 	.word	0x40020c00

08000758 <MX_DMA_Init>:
{
 8000758:	b500      	push	{lr}
 800075a:	b083      	sub	sp, #12
  __HAL_RCC_DMA2_CLK_ENABLE();
 800075c:	2100      	movs	r1, #0
 800075e:	9101      	str	r1, [sp, #4]
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_DMA_Init+0x30>)
 8000762:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000764:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000768:	631a      	str	r2, [r3, #48]	; 0x30
 800076a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000770:	9301      	str	r3, [sp, #4]
 8000772:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000774:	460a      	mov	r2, r1
 8000776:	2038      	movs	r0, #56	; 0x38
 8000778:	f001 fa8c 	bl	8001c94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800077c:	2038      	movs	r0, #56	; 0x38
 800077e:	f001 fac1 	bl	8001d04 <HAL_NVIC_EnableIRQ>
}
 8000782:	b003      	add	sp, #12
 8000784:	f85d fb04 	ldr.w	pc, [sp], #4
 8000788:	40023800 	.word	0x40023800

0800078c <MX_I2C1_Init>:
{
 800078c:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 800078e:	4809      	ldr	r0, [pc, #36]	; (80007b4 <MX_I2C1_Init+0x28>)
 8000790:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_I2C1_Init+0x2c>)
 8000792:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000794:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_I2C1_Init+0x30>)
 8000796:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000798:	2300      	movs	r3, #0
 800079a:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800079c:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800079e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007a2:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a4:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007a6:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007a8:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007aa:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007ac:	f001 fe1a 	bl	80023e4 <HAL_I2C_Init>
}
 80007b0:	bd08      	pop	{r3, pc}
 80007b2:	bf00      	nop
 80007b4:	20000324 	.word	0x20000324
 80007b8:	40005400 	.word	0x40005400
 80007bc:	000186a0 	.word	0x000186a0

080007c0 <MX_I2S3_Init>:
{
 80007c0:	b508      	push	{r3, lr}
  hi2s3.Instance = SPI3;
 80007c2:	4809      	ldr	r0, [pc, #36]	; (80007e8 <MX_I2S3_Init+0x28>)
 80007c4:	4b09      	ldr	r3, [pc, #36]	; (80007ec <MX_I2S3_Init+0x2c>)
 80007c6:	6003      	str	r3, [r0, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007cc:	6042      	str	r2, [r0, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007ce:	2300      	movs	r3, #0
 80007d0:	6083      	str	r3, [r0, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007d2:	60c3      	str	r3, [r0, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007d4:	6102      	str	r2, [r0, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007d6:	4a06      	ldr	r2, [pc, #24]	; (80007f0 <MX_I2S3_Init+0x30>)
 80007d8:	6142      	str	r2, [r0, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007da:	6183      	str	r3, [r0, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007dc:	61c3      	str	r3, [r0, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007de:	6203      	str	r3, [r0, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007e0:	f001 fede 	bl	80025a0 <HAL_I2S_Init>
}
 80007e4:	bd08      	pop	{r3, pc}
 80007e6:	bf00      	nop
 80007e8:	20000378 	.word	0x20000378
 80007ec:	40003c00 	.word	0x40003c00
 80007f0:	00017700 	.word	0x00017700

080007f4 <MX_SPI1_Init>:
{
 80007f4:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 80007f6:	480b      	ldr	r0, [pc, #44]	; (8000824 <MX_SPI1_Init+0x30>)
 80007f8:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_SPI1_Init+0x34>)
 80007fa:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007fc:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000800:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000802:	2300      	movs	r3, #0
 8000804:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000806:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000808:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800080a:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800080c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000810:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000812:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000814:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000816:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000818:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800081a:	230a      	movs	r3, #10
 800081c:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800081e:	f003 fbe9 	bl	8003ff4 <HAL_SPI_Init>
}
 8000822:	bd08      	pop	{r3, pc}
 8000824:	200003c0 	.word	0x200003c0
 8000828:	40013000 	.word	0x40013000

0800082c <MX_ADC1_Init>:
{
 800082c:	b570      	push	{r4, r5, r6, lr}
 800082e:	b084      	sub	sp, #16
  ADC_ChannelConfTypeDef sConfig = {0};
 8000830:	2300      	movs	r3, #0
 8000832:	9300      	str	r3, [sp, #0]
 8000834:	9301      	str	r3, [sp, #4]
 8000836:	9302      	str	r3, [sp, #8]
 8000838:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 800083a:	4c18      	ldr	r4, [pc, #96]	; (800089c <MX_ADC1_Init+0x70>)
 800083c:	4a18      	ldr	r2, [pc, #96]	; (80008a0 <MX_ADC1_Init+0x74>)
 800083e:	6022      	str	r2, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000840:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000844:	6062      	str	r2, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	60a3      	str	r3, [r4, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000848:	2501      	movs	r5, #1
 800084a:	6125      	str	r5, [r4, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800084c:	7625      	strb	r5, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800084e:	f884 3020 	strb.w	r3, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000852:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000854:	4a13      	ldr	r2, [pc, #76]	; (80008a4 <MX_ADC1_Init+0x78>)
 8000856:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000858:	60e3      	str	r3, [r4, #12]
  hadc1.Init.NbrOfConversion = 3;
 800085a:	2603      	movs	r6, #3
 800085c:	61e6      	str	r6, [r4, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800085e:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000862:	6165      	str	r5, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000864:	4620      	mov	r0, r4
 8000866:	f001 f90b 	bl	8001a80 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_1;
 800086a:	9500      	str	r5, [sp, #0]
  sConfig.Rank = 1;
 800086c:	9501      	str	r5, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 800086e:	2304      	movs	r3, #4
 8000870:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000872:	4669      	mov	r1, sp
 8000874:	4620      	mov	r0, r4
 8000876:	f001 f92f 	bl	8001ad8 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_11;
 800087a:	230b      	movs	r3, #11
 800087c:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 2;
 800087e:	2302      	movs	r3, #2
 8000880:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000882:	4669      	mov	r1, sp
 8000884:	4620      	mov	r0, r4
 8000886:	f001 f927 	bl	8001ad8 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_12;
 800088a:	230c      	movs	r3, #12
 800088c:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 3;
 800088e:	9601      	str	r6, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000890:	4669      	mov	r1, sp
 8000892:	4620      	mov	r0, r4
 8000894:	f001 f920 	bl	8001ad8 <HAL_ADC_ConfigChannel>
}
 8000898:	b004      	add	sp, #16
 800089a:	bd70      	pop	{r4, r5, r6, pc}
 800089c:	2000027c 	.word	0x2000027c
 80008a0:	40012000 	.word	0x40012000
 80008a4:	0f000001 	.word	0x0f000001

080008a8 <SystemClock_Config>:
{
 80008a8:	b570      	push	{r4, r5, r6, lr}
 80008aa:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ac:	2230      	movs	r2, #48	; 0x30
 80008ae:	2100      	movs	r1, #0
 80008b0:	eb0d 0002 	add.w	r0, sp, r2
 80008b4:	f005 fbfc 	bl	80060b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b8:	2400      	movs	r4, #0
 80008ba:	9407      	str	r4, [sp, #28]
 80008bc:	9408      	str	r4, [sp, #32]
 80008be:	9409      	str	r4, [sp, #36]	; 0x24
 80008c0:	940a      	str	r4, [sp, #40]	; 0x28
 80008c2:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008c4:	9403      	str	r4, [sp, #12]
 80008c6:	9404      	str	r4, [sp, #16]
 80008c8:	9405      	str	r4, [sp, #20]
 80008ca:	9406      	str	r4, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008cc:	9401      	str	r4, [sp, #4]
 80008ce:	4b20      	ldr	r3, [pc, #128]	; (8000950 <SystemClock_Config+0xa8>)
 80008d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008d2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80008d6:	641a      	str	r2, [r3, #64]	; 0x40
 80008d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008de:	9301      	str	r3, [sp, #4]
 80008e0:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008e2:	9402      	str	r4, [sp, #8]
 80008e4:	4b1b      	ldr	r3, [pc, #108]	; (8000954 <SystemClock_Config+0xac>)
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f4:	9302      	str	r3, [sp, #8]
 80008f6:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008f8:	2601      	movs	r6, #1
 80008fa:	960c      	str	r6, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000900:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000902:	2502      	movs	r5, #2
 8000904:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000906:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800090a:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800090c:	2308      	movs	r3, #8
 800090e:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000910:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000914:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000916:	9516      	str	r5, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000918:	2307      	movs	r3, #7
 800091a:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091c:	a80c      	add	r0, sp, #48	; 0x30
 800091e:	f002 fedf 	bl	80036e0 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000922:	230f      	movs	r3, #15
 8000924:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000926:	9508      	str	r5, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000928:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800092a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800092e:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000930:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000934:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000936:	2105      	movs	r1, #5
 8000938:	a807      	add	r0, sp, #28
 800093a:	f003 f931 	bl	8003ba0 <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800093e:	9603      	str	r6, [sp, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000940:	23c0      	movs	r3, #192	; 0xc0
 8000942:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000944:	9505      	str	r5, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000946:	a803      	add	r0, sp, #12
 8000948:	f003 f9f0 	bl	8003d2c <HAL_RCCEx_PeriphCLKConfig>
}
 800094c:	b018      	add	sp, #96	; 0x60
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	40023800 	.word	0x40023800
 8000954:	40007000 	.word	0x40007000

08000958 <parseRx>:
/* USER CODE BEGIN 4 */
void parseRx(void)
{

	  //HAL_UART_Receive(&huart2, receive_serial, 50, 500 );
	  if(rxBuf[0]!=0)
 8000958:	4b72      	ldr	r3, [pc, #456]	; (8000b24 <parseRx+0x1cc>)
 800095a:	f993 3000 	ldrsb.w	r3, [r3]
 800095e:	2b00      	cmp	r3, #0
 8000960:	f000 80de 	beq.w	8000b20 <parseRx+0x1c8>
{
 8000964:	b570      	push	{r4, r5, r6, lr}
 8000966:	b082      	sub	sp, #8
	  {
		  int state=0; //state machine
		  volatile int rxChecksum=0;
 8000968:	2400      	movs	r4, #0
 800096a:	9401      	str	r4, [sp, #4]
		  int calcChecksum=0;

//		  CDC_Transmit_FS(receive_serial, strlen((const char*)receive_serial));  //micro usb 		-- strlen((const char*)myData)
		  //HAL_UART_Transmit(&huart2, receive_serial, strlen((const char*)receive_serial), 500);
		  for(int loop=0; loop<rxSerialBytes; loop++)
 800096c:	4625      	mov	r5, r4
		  int calcChecksum=0;
 800096e:	4626      	mov	r6, r4
		  for(int loop=0; loop<rxSerialBytes; loop++)
 8000970:	e040      	b.n	80009f4 <parseRx+0x9c>
			  switch(state)
			  {
			  case 0:
			  case 1:
			  case 2:
				  if(rxBuf[loop]=='#')
 8000972:	4b6c      	ldr	r3, [pc, #432]	; (8000b24 <parseRx+0x1cc>)
 8000974:	575b      	ldrsb	r3, [r3, r5]
 8000976:	2b23      	cmp	r3, #35	; 0x23
 8000978:	d001      	beq.n	800097e <parseRx+0x26>
				  {
					  state++;
				  }
				  else
				  {
					  state=0;
 800097a:	2400      	movs	r4, #0
 800097c:	e039      	b.n	80009f2 <parseRx+0x9a>
					  state++;
 800097e:	3401      	adds	r4, #1
 8000980:	e037      	b.n	80009f2 <parseRx+0x9a>
				  //digital outputs
			  case 3:
				  //checksum 576-588 with onboard LEDs, 00000000xxxx = 576-580
				  for(int count=3; count<15; count++)
				  {
					  calcChecksum+=rxBuf[count];
 8000982:	4a68      	ldr	r2, [pc, #416]	; (8000b24 <parseRx+0x1cc>)
 8000984:	56d2      	ldrsb	r2, [r2, r3]
 8000986:	4416      	add	r6, r2
				  for(int count=3; count<15; count++)
 8000988:	3301      	adds	r3, #1
 800098a:	2b0e      	cmp	r3, #14
 800098c:	ddf9      	ble.n	8000982 <parseRx+0x2a>
				  }
				  rxChecksum = (rxBuf[15]-'0') * 100;
 800098e:	4965      	ldr	r1, [pc, #404]	; (8000b24 <parseRx+0x1cc>)
 8000990:	f991 300f 	ldrsb.w	r3, [r1, #15]
 8000994:	3b30      	subs	r3, #48	; 0x30
 8000996:	2264      	movs	r2, #100	; 0x64
 8000998:	fb02 f303 	mul.w	r3, r2, r3
 800099c:	9301      	str	r3, [sp, #4]
				  rxChecksum += (rxBuf[16]-'0') * 10;
 800099e:	f991 3010 	ldrsb.w	r3, [r1, #16]
 80009a2:	3b30      	subs	r3, #48	; 0x30
 80009a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80009a8:	005a      	lsls	r2, r3, #1
 80009aa:	9b01      	ldr	r3, [sp, #4]
 80009ac:	441a      	add	r2, r3
 80009ae:	9201      	str	r2, [sp, #4]
				  rxChecksum += (rxBuf[17]-'0');
 80009b0:	f991 3011 	ldrsb.w	r3, [r1, #17]
 80009b4:	3b30      	subs	r3, #48	; 0x30
 80009b6:	9a01      	ldr	r2, [sp, #4]
 80009b8:	4413      	add	r3, r2
 80009ba:	9301      	str	r3, [sp, #4]

				  if(calcChecksum==rxChecksum) //valid checksum?
 80009bc:	9b01      	ldr	r3, [sp, #4]
 80009be:	42b3      	cmp	r3, r6
 80009c0:	d003      	beq.n	80009ca <parseRx+0x72>
				  HAL_GPIO_WritePin(OUT7_GPIO_Port, OUT7_Pin,rxBuf[loop]-'0'); 	//yes
				  state++;
				  }
				  else
				  {
					  state=0;	//no
 80009c2:	2400      	movs	r4, #0
 80009c4:	e015      	b.n	80009f2 <parseRx+0x9a>
			  switch(state)
 80009c6:	4623      	mov	r3, r4
 80009c8:	e7df      	b.n	800098a <parseRx+0x32>
				  HAL_GPIO_WritePin(OUT7_GPIO_Port, OUT7_Pin,rxBuf[loop]-'0'); 	//yes
 80009ca:	5d4a      	ldrb	r2, [r1, r5]
 80009cc:	3a30      	subs	r2, #48	; 0x30
 80009ce:	b2d2      	uxtb	r2, r2
 80009d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009d4:	4854      	ldr	r0, [pc, #336]	; (8000b28 <parseRx+0x1d0>)
 80009d6:	f001 fcfe 	bl	80023d6 <HAL_GPIO_WritePin>
				  state++;
 80009da:	3401      	adds	r4, #1
 80009dc:	e009      	b.n	80009f2 <parseRx+0x9a>
				  }
				  break;
			  case 4:
				  HAL_GPIO_WritePin(OUT6_GPIO_Port, OUT6_Pin,rxBuf[loop]-'0');
 80009de:	4b51      	ldr	r3, [pc, #324]	; (8000b24 <parseRx+0x1cc>)
 80009e0:	5d5a      	ldrb	r2, [r3, r5]
 80009e2:	3a30      	subs	r2, #48	; 0x30
 80009e4:	b2d2      	uxtb	r2, r2
 80009e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009ea:	484f      	ldr	r0, [pc, #316]	; (8000b28 <parseRx+0x1d0>)
 80009ec:	f001 fcf3 	bl	80023d6 <HAL_GPIO_WritePin>
				  state++;
 80009f0:	3401      	adds	r4, #1
		  for(int loop=0; loop<rxSerialBytes; loop++)
 80009f2:	3501      	adds	r5, #1
 80009f4:	2d11      	cmp	r5, #17
 80009f6:	f300 8091 	bgt.w	8000b1c <parseRx+0x1c4>
			  switch(state)
 80009fa:	2c0e      	cmp	r4, #14
 80009fc:	d8f9      	bhi.n	80009f2 <parseRx+0x9a>
 80009fe:	a301      	add	r3, pc, #4	; (adr r3, 8000a04 <parseRx+0xac>)
 8000a00:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 8000a04:	08000973 	.word	0x08000973
 8000a08:	08000973 	.word	0x08000973
 8000a0c:	08000973 	.word	0x08000973
 8000a10:	080009c7 	.word	0x080009c7
 8000a14:	080009df 	.word	0x080009df
 8000a18:	08000a41 	.word	0x08000a41
 8000a1c:	08000a57 	.word	0x08000a57
 8000a20:	08000a6d 	.word	0x08000a6d
 8000a24:	08000a83 	.word	0x08000a83
 8000a28:	08000a99 	.word	0x08000a99
 8000a2c:	08000aaf 	.word	0x08000aaf
 8000a30:	08000ac5 	.word	0x08000ac5
 8000a34:	08000adb 	.word	0x08000adb
 8000a38:	08000af1 	.word	0x08000af1
 8000a3c:	08000b07 	.word	0x08000b07
				  break;
			  case 5:
				  HAL_GPIO_WritePin(OUT5_GPIO_Port, OUT5_Pin,rxBuf[loop]-'0');
 8000a40:	4b38      	ldr	r3, [pc, #224]	; (8000b24 <parseRx+0x1cc>)
 8000a42:	5d5a      	ldrb	r2, [r3, r5]
 8000a44:	3a30      	subs	r2, #48	; 0x30
 8000a46:	b2d2      	uxtb	r2, r2
 8000a48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a4c:	4836      	ldr	r0, [pc, #216]	; (8000b28 <parseRx+0x1d0>)
 8000a4e:	f001 fcc2 	bl	80023d6 <HAL_GPIO_WritePin>
				  state++;
 8000a52:	3401      	adds	r4, #1
				  break;
 8000a54:	e7cd      	b.n	80009f2 <parseRx+0x9a>
			  case 6:
				  HAL_GPIO_WritePin(OUT4_GPIO_Port, OUT4_Pin,rxBuf[loop]-'0');
 8000a56:	4b33      	ldr	r3, [pc, #204]	; (8000b24 <parseRx+0x1cc>)
 8000a58:	5d5a      	ldrb	r2, [r3, r5]
 8000a5a:	3a30      	subs	r2, #48	; 0x30
 8000a5c:	b2d2      	uxtb	r2, r2
 8000a5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a62:	4831      	ldr	r0, [pc, #196]	; (8000b28 <parseRx+0x1d0>)
 8000a64:	f001 fcb7 	bl	80023d6 <HAL_GPIO_WritePin>
				  state++;
 8000a68:	3401      	adds	r4, #1
				  break;
 8000a6a:	e7c2      	b.n	80009f2 <parseRx+0x9a>
			  case 7:
				  HAL_GPIO_WritePin(OUT3_GPIO_Port, OUT3_Pin,rxBuf[loop]-'0');
 8000a6c:	4b2d      	ldr	r3, [pc, #180]	; (8000b24 <parseRx+0x1cc>)
 8000a6e:	5d5a      	ldrb	r2, [r3, r5]
 8000a70:	3a30      	subs	r2, #48	; 0x30
 8000a72:	b2d2      	uxtb	r2, r2
 8000a74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a78:	482c      	ldr	r0, [pc, #176]	; (8000b2c <parseRx+0x1d4>)
 8000a7a:	f001 fcac 	bl	80023d6 <HAL_GPIO_WritePin>
				  state++;
 8000a7e:	3401      	adds	r4, #1
				  break;
 8000a80:	e7b7      	b.n	80009f2 <parseRx+0x9a>
			  case 8:
				  HAL_GPIO_WritePin(OUT2_GPIO_Port, OUT2_Pin,rxBuf[loop]-'0');
 8000a82:	4b28      	ldr	r3, [pc, #160]	; (8000b24 <parseRx+0x1cc>)
 8000a84:	5d5a      	ldrb	r2, [r3, r5]
 8000a86:	3a30      	subs	r2, #48	; 0x30
 8000a88:	b2d2      	uxtb	r2, r2
 8000a8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a8e:	4827      	ldr	r0, [pc, #156]	; (8000b2c <parseRx+0x1d4>)
 8000a90:	f001 fca1 	bl	80023d6 <HAL_GPIO_WritePin>
				  state++;
 8000a94:	3401      	adds	r4, #1
				  break;
 8000a96:	e7ac      	b.n	80009f2 <parseRx+0x9a>
			  case 9:
				  HAL_GPIO_WritePin(OUT1_GPIO_Port, OUT1_Pin,rxBuf[loop]-'0');
 8000a98:	4b22      	ldr	r3, [pc, #136]	; (8000b24 <parseRx+0x1cc>)
 8000a9a:	5d5a      	ldrb	r2, [r3, r5]
 8000a9c:	3a30      	subs	r2, #48	; 0x30
 8000a9e:	b2d2      	uxtb	r2, r2
 8000aa0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aa4:	4821      	ldr	r0, [pc, #132]	; (8000b2c <parseRx+0x1d4>)
 8000aa6:	f001 fc96 	bl	80023d6 <HAL_GPIO_WritePin>
				  state++;
 8000aaa:	3401      	adds	r4, #1
				  break;
 8000aac:	e7a1      	b.n	80009f2 <parseRx+0x9a>
			  case 10:
				  HAL_GPIO_WritePin(OUT0_GPIO_Port, OUT0_Pin,rxBuf[loop]-'0');
 8000aae:	4b1d      	ldr	r3, [pc, #116]	; (8000b24 <parseRx+0x1cc>)
 8000ab0:	5d5a      	ldrb	r2, [r3, r5]
 8000ab2:	3a30      	subs	r2, #48	; 0x30
 8000ab4:	b2d2      	uxtb	r2, r2
 8000ab6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aba:	481c      	ldr	r0, [pc, #112]	; (8000b2c <parseRx+0x1d4>)
 8000abc:	f001 fc8b 	bl	80023d6 <HAL_GPIO_WritePin>
				  state++;
 8000ac0:	3401      	adds	r4, #1
				  break;
 8000ac2:	e796      	b.n	80009f2 <parseRx+0x9a>
			  case 11:
				  HAL_GPIO_WritePin(blueLED_GPIO_Port, blueLED_Pin, rxBuf[loop]-'0');
 8000ac4:	4b17      	ldr	r3, [pc, #92]	; (8000b24 <parseRx+0x1cc>)
 8000ac6:	5d5a      	ldrb	r2, [r3, r5]
 8000ac8:	3a30      	subs	r2, #48	; 0x30
 8000aca:	b2d2      	uxtb	r2, r2
 8000acc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ad0:	4815      	ldr	r0, [pc, #84]	; (8000b28 <parseRx+0x1d0>)
 8000ad2:	f001 fc80 	bl	80023d6 <HAL_GPIO_WritePin>
				  state++;
 8000ad6:	3401      	adds	r4, #1
				  break;
 8000ad8:	e78b      	b.n	80009f2 <parseRx+0x9a>
			  case 12:
				  HAL_GPIO_WritePin(redLED_GPIO_Port, redLED_Pin,rxBuf[loop]-'0');
 8000ada:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <parseRx+0x1cc>)
 8000adc:	5d5a      	ldrb	r2, [r3, r5]
 8000ade:	3a30      	subs	r2, #48	; 0x30
 8000ae0:	b2d2      	uxtb	r2, r2
 8000ae2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ae6:	4810      	ldr	r0, [pc, #64]	; (8000b28 <parseRx+0x1d0>)
 8000ae8:	f001 fc75 	bl	80023d6 <HAL_GPIO_WritePin>
				  state++;
 8000aec:	3401      	adds	r4, #1
				  break;
 8000aee:	e780      	b.n	80009f2 <parseRx+0x9a>
			  case 13:
				  HAL_GPIO_WritePin(orangeLED_GPIO_Port, orangeLED_Pin,rxBuf[loop]-'0');
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <parseRx+0x1cc>)
 8000af2:	5d5a      	ldrb	r2, [r3, r5]
 8000af4:	3a30      	subs	r2, #48	; 0x30
 8000af6:	b2d2      	uxtb	r2, r2
 8000af8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000afc:	480a      	ldr	r0, [pc, #40]	; (8000b28 <parseRx+0x1d0>)
 8000afe:	f001 fc6a 	bl	80023d6 <HAL_GPIO_WritePin>
				  state++;
 8000b02:	3401      	adds	r4, #1
				  break;
 8000b04:	e775      	b.n	80009f2 <parseRx+0x9a>
			  case 14:
				  HAL_GPIO_WritePin(greenLED_GPIO_Port, greenLED_Pin,rxBuf[loop]-'0');
 8000b06:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <parseRx+0x1cc>)
 8000b08:	5d5a      	ldrb	r2, [r3, r5]
 8000b0a:	3a30      	subs	r2, #48	; 0x30
 8000b0c:	b2d2      	uxtb	r2, r2
 8000b0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b12:	4805      	ldr	r0, [pc, #20]	; (8000b28 <parseRx+0x1d0>)
 8000b14:	f001 fc5f 	bl	80023d6 <HAL_GPIO_WritePin>
				  state++;
 8000b18:	3401      	adds	r4, #1
				  break;
 8000b1a:	e76a      	b.n	80009f2 <parseRx+0x9a>
		  }

//	  rxBuf[0]=0;


}
 8000b1c:	b002      	add	sp, #8
 8000b1e:	bd70      	pop	{r4, r5, r6, pc}
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	20000448 	.word	0x20000448
 8000b28:	40020c00 	.word	0x40020c00
 8000b2c:	40020400 	.word	0x40020400

08000b30 <main>:
{
 8000b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b32:	b083      	sub	sp, #12
  HAL_Init();
 8000b34:	f000 feca 	bl	80018cc <HAL_Init>
  SystemClock_Config();
 8000b38:	f7ff feb6 	bl	80008a8 <SystemClock_Config>
  MX_GPIO_Init();
 8000b3c:	f7ff fd22 	bl	8000584 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b40:	f7ff fe0a 	bl	8000758 <MX_DMA_Init>
  MX_I2C1_Init();
 8000b44:	f7ff fe22 	bl	800078c <MX_I2C1_Init>
  MX_I2S3_Init();
 8000b48:	f7ff fe3a 	bl	80007c0 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000b4c:	f7ff fe52 	bl	80007f4 <MX_SPI1_Init>
  MX_ADC1_Init();
 8000b50:	f7ff fe6c 	bl	800082c <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8000b54:	f004 fff6 	bl	8005b44 <MX_USB_DEVICE_Init>
  BSP_ACCELERO_Init();
 8000b58:	f000 fe22 	bl	80017a0 <BSP_ACCELERO_Init>
 	uint16_t count=0;
 8000b5c:	2600      	movs	r6, #0
 8000b5e:	e026      	b.n	8000bae <main+0x7e>
		  checksum += packet[loop];
 8000b60:	4b50      	ldr	r3, [pc, #320]	; (8000ca4 <main+0x174>)
 8000b62:	5d1a      	ldrb	r2, [r3, r4]
 8000b64:	442a      	add	r2, r5
 8000b66:	b295      	uxth	r5, r2
	  for(int loop=3; loop<=strlen(packet); loop++)
 8000b68:	3401      	adds	r4, #1
 8000b6a:	484e      	ldr	r0, [pc, #312]	; (8000ca4 <main+0x174>)
 8000b6c:	f7ff fb30 	bl	80001d0 <strlen>
 8000b70:	42a0      	cmp	r0, r4
 8000b72:	d2f5      	bcs.n	8000b60 <main+0x30>
	  checksum %=1000;	//3 digits
 8000b74:	4c4c      	ldr	r4, [pc, #304]	; (8000ca8 <main+0x178>)
 8000b76:	fba4 3205 	umull	r3, r2, r4, r5
 8000b7a:	0992      	lsrs	r2, r2, #6
 8000b7c:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 8000b80:	fb07 5212 	mls	r2, r7, r2, r5
	  sprintf(packet + 34, "%03d\r\n", checksum);
 8000b84:	4d47      	ldr	r5, [pc, #284]	; (8000ca4 <main+0x174>)
 8000b86:	b292      	uxth	r2, r2
 8000b88:	4948      	ldr	r1, [pc, #288]	; (8000cac <main+0x17c>)
 8000b8a:	f105 0022 	add.w	r0, r5, #34	; 0x22
 8000b8e:	f005 fb87 	bl	80062a0 <siprintf>
	  CDC_Transmit_FS(packet, packetLength);  //micro usb 		-- strlen((const char*)myData)
 8000b92:	2127      	movs	r1, #39	; 0x27
 8000b94:	4628      	mov	r0, r5
 8000b96:	f005 f847 	bl	8005c28 <CDC_Transmit_FS>
	  count++;
 8000b9a:	3601      	adds	r6, #1
 8000b9c:	b2b6      	uxth	r6, r6
	  count%=1000;	//000-999
 8000b9e:	fba4 3406 	umull	r3, r4, r4, r6
 8000ba2:	09a4      	lsrs	r4, r4, #6
 8000ba4:	fb07 6614 	mls	r6, r7, r4, r6
 8000ba8:	b2b6      	uxth	r6, r6
	  parseRx();
 8000baa:	f7ff fed5 	bl	8000958 <parseRx>
	if(uwTick - currentTicks >= packetTxTime)
 8000bae:	4b40      	ldr	r3, [pc, #256]	; (8000cb0 <main+0x180>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a40      	ldr	r2, [pc, #256]	; (8000cb4 <main+0x184>)
 8000bb4:	6812      	ldr	r2, [r2, #0]
 8000bb6:	1a9b      	subs	r3, r3, r2
 8000bb8:	4a3f      	ldr	r2, [pc, #252]	; (8000cb8 <main+0x188>)
 8000bba:	7812      	ldrb	r2, [r2, #0]
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d3f4      	bcc.n	8000baa <main+0x7a>
	currentTicks = uwTick; //update time
 8000bc0:	4b3b      	ldr	r3, [pc, #236]	; (8000cb0 <main+0x180>)
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	4b3b      	ldr	r3, [pc, #236]	; (8000cb4 <main+0x184>)
 8000bc6:	601a      	str	r2, [r3, #0]
	BSP_ACCELERO_GetXYZ(XYZ);
 8000bc8:	4c3c      	ldr	r4, [pc, #240]	; (8000cbc <main+0x18c>)
 8000bca:	4620      	mov	r0, r4
 8000bcc:	f000 fe3e 	bl	800184c <BSP_ACCELERO_GetXYZ>
	  sprintf(packet, "###%03d%04X%04X%04X", (uint16_t)count,(uint16_t)XYZ[0], (uint16_t)XYZ[1], (uint16_t)XYZ[2]);
 8000bd0:	f9b4 3000 	ldrsh.w	r3, [r4]
 8000bd4:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8000bd8:	b292      	uxth	r2, r2
 8000bda:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8000bde:	b289      	uxth	r1, r1
 8000be0:	4d30      	ldr	r5, [pc, #192]	; (8000ca4 <main+0x174>)
 8000be2:	9101      	str	r1, [sp, #4]
 8000be4:	9200      	str	r2, [sp, #0]
 8000be6:	b29b      	uxth	r3, r3
 8000be8:	4632      	mov	r2, r6
 8000bea:	4935      	ldr	r1, [pc, #212]	; (8000cc0 <main+0x190>)
 8000bec:	4628      	mov	r0, r5
 8000bee:	f005 fb57 	bl	80062a0 <siprintf>
	  sprintf(packet + 18, "123412341234");
 8000bf2:	4b34      	ldr	r3, [pc, #208]	; (8000cc4 <main+0x194>)
 8000bf4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000bf6:	f8c5 0012 	str.w	r0, [r5, #18]
 8000bfa:	f8c5 1016 	str.w	r1, [r5, #22]
 8000bfe:	f8c5 201a 	str.w	r2, [r5, #26]
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	77ab      	strb	r3, [r5, #30]
	  inputPort[7] = (uint8_t)HAL_GPIO_ReadPin(IN7_GPIO_Port,IN7_Pin);
 8000c06:	2180      	movs	r1, #128	; 0x80
 8000c08:	482f      	ldr	r0, [pc, #188]	; (8000cc8 <main+0x198>)
 8000c0a:	f001 fbdd 	bl	80023c8 <HAL_GPIO_ReadPin>
 8000c0e:	4c2f      	ldr	r4, [pc, #188]	; (8000ccc <main+0x19c>)
 8000c10:	71e0      	strb	r0, [r4, #7]
	  inputPort[6] = (uint8_t)HAL_GPIO_ReadPin(IN6_GPIO_Port,IN6_Pin);
 8000c12:	4f2f      	ldr	r7, [pc, #188]	; (8000cd0 <main+0x1a0>)
 8000c14:	2120      	movs	r1, #32
 8000c16:	4638      	mov	r0, r7
 8000c18:	f001 fbd6 	bl	80023c8 <HAL_GPIO_ReadPin>
 8000c1c:	71a0      	strb	r0, [r4, #6]
	  inputPort[5] = (uint8_t)HAL_GPIO_ReadPin(IN5_GPIO_Port,IN5_Pin);
 8000c1e:	2110      	movs	r1, #16
 8000c20:	4638      	mov	r0, r7
 8000c22:	f001 fbd1 	bl	80023c8 <HAL_GPIO_ReadPin>
 8000c26:	7160      	strb	r0, [r4, #5]
	  inputPort[4] = (uint8_t)HAL_GPIO_ReadPin(IN4_GPIO_Port,IN4_Pin);
 8000c28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c2c:	4638      	mov	r0, r7
 8000c2e:	f001 fbcb 	bl	80023c8 <HAL_GPIO_ReadPin>
 8000c32:	7120      	strb	r0, [r4, #4]
	  inputPort[3] = (uint8_t)HAL_GPIO_ReadPin(IN3_GPIO_Port,IN3_Pin);
 8000c34:	f507 6740 	add.w	r7, r7, #3072	; 0xc00
 8000c38:	2104      	movs	r1, #4
 8000c3a:	4638      	mov	r0, r7
 8000c3c:	f001 fbc4 	bl	80023c8 <HAL_GPIO_ReadPin>
 8000c40:	70e0      	strb	r0, [r4, #3]
	  inputPort[2] = (uint8_t)HAL_GPIO_ReadPin(IN2_GPIO_Port,IN2_Pin);
 8000c42:	2120      	movs	r1, #32
 8000c44:	4638      	mov	r0, r7
 8000c46:	f001 fbbf 	bl	80023c8 <HAL_GPIO_ReadPin>
 8000c4a:	70a0      	strb	r0, [r4, #2]
	  inputPort[1] = (uint8_t)HAL_GPIO_ReadPin(IN1_GPIO_Port,IN1_Pin);
 8000c4c:	2110      	movs	r1, #16
 8000c4e:	4638      	mov	r0, r7
 8000c50:	f001 fbba 	bl	80023c8 <HAL_GPIO_ReadPin>
 8000c54:	7060      	strb	r0, [r4, #1]
	  inputPort[0] = (uint8_t)HAL_GPIO_ReadPin(IN0_GPIO_Port,IN0_Pin);
 8000c56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c5a:	481e      	ldr	r0, [pc, #120]	; (8000cd4 <main+0x1a4>)
 8000c5c:	f001 fbb4 	bl	80023c8 <HAL_GPIO_ReadPin>
 8000c60:	7020      	strb	r0, [r4, #0]
	  sprintf(packet + 30, "%0d", inputPort[7]); //strlen(myData)
 8000c62:	4f1d      	ldr	r7, [pc, #116]	; (8000cd8 <main+0x1a8>)
 8000c64:	f994 2007 	ldrsb.w	r2, [r4, #7]
 8000c68:	4639      	mov	r1, r7
 8000c6a:	f105 001e 	add.w	r0, r5, #30
 8000c6e:	f005 fb17 	bl	80062a0 <siprintf>
	  sprintf(packet + 31, "%0d", inputPort[6]);
 8000c72:	f994 2006 	ldrsb.w	r2, [r4, #6]
 8000c76:	4639      	mov	r1, r7
 8000c78:	f105 001f 	add.w	r0, r5, #31
 8000c7c:	f005 fb10 	bl	80062a0 <siprintf>
	  sprintf(packet + 32, "%0d", inputPort[5]);
 8000c80:	f994 2005 	ldrsb.w	r2, [r4, #5]
 8000c84:	4639      	mov	r1, r7
 8000c86:	f105 0020 	add.w	r0, r5, #32
 8000c8a:	f005 fb09 	bl	80062a0 <siprintf>
	  sprintf(packet + 33, "%0d", inputPort[4]);
 8000c8e:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8000c92:	4639      	mov	r1, r7
 8000c94:	f105 0021 	add.w	r0, r5, #33	; 0x21
 8000c98:	f005 fb02 	bl	80062a0 <siprintf>
	  for(int loop=3; loop<=strlen(packet); loop++)
 8000c9c:	2403      	movs	r4, #3
	checksum=0;
 8000c9e:	2500      	movs	r5, #0
	  for(int loop=3; loop<=strlen(packet); loop++)
 8000ca0:	e763      	b.n	8000b6a <main+0x3a>
 8000ca2:	bf00      	nop
 8000ca4:	20000420 	.word	0x20000420
 8000ca8:	10624dd3 	.word	0x10624dd3
 8000cac:	08006a04 	.word	0x08006a04
 8000cb0:	200004bc 	.word	0x200004bc
 8000cb4:	20000278 	.word	0x20000278
 8000cb8:	20000000 	.word	0x20000000
 8000cbc:	20000270 	.word	0x20000270
 8000cc0:	080069dc 	.word	0x080069dc
 8000cc4:	080069f0 	.word	0x080069f0
 8000cc8:	40020c00 	.word	0x40020c00
 8000ccc:	20000418 	.word	0x20000418
 8000cd0:	40020400 	.word	0x40020400
 8000cd4:	40020800 	.word	0x40020800
 8000cd8:	08006a00 	.word	0x08006a00

08000cdc <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000cdc:	4770      	bx	lr
	...

08000ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce0:	b500      	push	{lr}
 8000ce2:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	9100      	str	r1, [sp, #0]
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <HAL_MspInit+0x3c>)
 8000cea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000cec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000cf0:	645a      	str	r2, [r3, #68]	; 0x44
 8000cf2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000cf4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000cf8:	9200      	str	r2, [sp, #0]
 8000cfa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfc:	9101      	str	r1, [sp, #4]
 8000cfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d00:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d04:	641a      	str	r2, [r3, #64]	; 0x40
 8000d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0c:	9301      	str	r3, [sp, #4]
 8000d0e:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d10:	2007      	movs	r0, #7
 8000d12:	f000 ffad 	bl	8001c70 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d16:	b003      	add	sp, #12
 8000d18:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d1c:	40023800 	.word	0x40023800

08000d20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d20:	b570      	push	{r4, r5, r6, lr}
 8000d22:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	2300      	movs	r3, #0
 8000d26:	9303      	str	r3, [sp, #12]
 8000d28:	9304      	str	r3, [sp, #16]
 8000d2a:	9305      	str	r3, [sp, #20]
 8000d2c:	9306      	str	r3, [sp, #24]
 8000d2e:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 8000d30:	6802      	ldr	r2, [r0, #0]
 8000d32:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d36:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	d001      	beq.n	8000d42 <HAL_ADC_MspInit+0x22>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d3e:	b008      	add	sp, #32
 8000d40:	bd70      	pop	{r4, r5, r6, pc}
 8000d42:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d44:	2500      	movs	r5, #0
 8000d46:	9500      	str	r5, [sp, #0]
 8000d48:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8000d4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d52:	645a      	str	r2, [r3, #68]	; 0x44
 8000d54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d56:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000d5a:	9200      	str	r2, [sp, #0]
 8000d5c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5e:	9501      	str	r5, [sp, #4]
 8000d60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d62:	f042 0204 	orr.w	r2, r2, #4
 8000d66:	631a      	str	r2, [r3, #48]	; 0x30
 8000d68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d6a:	f002 0204 	and.w	r2, r2, #4
 8000d6e:	9201      	str	r2, [sp, #4]
 8000d70:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d72:	9502      	str	r5, [sp, #8]
 8000d74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d76:	f042 0201 	orr.w	r2, r2, #1
 8000d7a:	631a      	str	r2, [r3, #48]	; 0x30
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	9302      	str	r3, [sp, #8]
 8000d84:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000d86:	2306      	movs	r3, #6
 8000d88:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d8a:	2603      	movs	r6, #3
 8000d8c:	9604      	str	r6, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d8e:	a903      	add	r1, sp, #12
 8000d90:	4816      	ldr	r0, [pc, #88]	; (8000dec <HAL_ADC_MspInit+0xcc>)
 8000d92:	f001 f997 	bl	80020c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d96:	2302      	movs	r3, #2
 8000d98:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d9a:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9e:	a903      	add	r1, sp, #12
 8000da0:	4813      	ldr	r0, [pc, #76]	; (8000df0 <HAL_ADC_MspInit+0xd0>)
 8000da2:	f001 f98f 	bl	80020c4 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8000da6:	4813      	ldr	r0, [pc, #76]	; (8000df4 <HAL_ADC_MspInit+0xd4>)
 8000da8:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <HAL_ADC_MspInit+0xd8>)
 8000daa:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000dac:	6045      	str	r5, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dae:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000db0:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000db2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000db6:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000db8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000dbc:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000dbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dc2:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000dc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dc8:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000dca:	6205      	str	r5, [r0, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000dcc:	2304      	movs	r3, #4
 8000dce:	6243      	str	r3, [r0, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000dd0:	6286      	str	r6, [r0, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8000dd2:	62c5      	str	r5, [r0, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000dd4:	6305      	str	r5, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000dd6:	f001 f821 	bl	8001e1c <HAL_DMA_Init>
 8000dda:	b918      	cbnz	r0, 8000de4 <HAL_ADC_MspInit+0xc4>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ddc:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <HAL_ADC_MspInit+0xd4>)
 8000dde:	63a3      	str	r3, [r4, #56]	; 0x38
 8000de0:	639c      	str	r4, [r3, #56]	; 0x38
}
 8000de2:	e7ac      	b.n	8000d3e <HAL_ADC_MspInit+0x1e>
      Error_Handler();
 8000de4:	f7ff ff7a 	bl	8000cdc <Error_Handler>
 8000de8:	e7f8      	b.n	8000ddc <HAL_ADC_MspInit+0xbc>
 8000dea:	bf00      	nop
 8000dec:	40020800 	.word	0x40020800
 8000df0:	40020000 	.word	0x40020000
 8000df4:	200002c4 	.word	0x200002c4
 8000df8:	40026410 	.word	0x40026410

08000dfc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dfc:	b530      	push	{r4, r5, lr}
 8000dfe:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	2300      	movs	r3, #0
 8000e02:	9303      	str	r3, [sp, #12]
 8000e04:	9304      	str	r3, [sp, #16]
 8000e06:	9305      	str	r3, [sp, #20]
 8000e08:	9306      	str	r3, [sp, #24]
 8000e0a:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 8000e0c:	6802      	ldr	r2, [r0, #0]
 8000e0e:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <HAL_I2C_MspInit+0x64>)
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d001      	beq.n	8000e18 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e14:	b009      	add	sp, #36	; 0x24
 8000e16:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e18:	2500      	movs	r5, #0
 8000e1a:	9501      	str	r5, [sp, #4]
 8000e1c:	4c11      	ldr	r4, [pc, #68]	; (8000e64 <HAL_I2C_MspInit+0x68>)
 8000e1e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e20:	f043 0302 	orr.w	r3, r3, #2
 8000e24:	6323      	str	r3, [r4, #48]	; 0x30
 8000e26:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e28:	f003 0302 	and.w	r3, r3, #2
 8000e2c:	9301      	str	r3, [sp, #4]
 8000e2e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000e30:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000e34:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e36:	2312      	movs	r3, #18
 8000e38:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e3e:	2304      	movs	r3, #4
 8000e40:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e42:	a903      	add	r1, sp, #12
 8000e44:	4808      	ldr	r0, [pc, #32]	; (8000e68 <HAL_I2C_MspInit+0x6c>)
 8000e46:	f001 f93d 	bl	80020c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e4a:	9502      	str	r5, [sp, #8]
 8000e4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e52:	6423      	str	r3, [r4, #64]	; 0x40
 8000e54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e5a:	9302      	str	r3, [sp, #8]
 8000e5c:	9b02      	ldr	r3, [sp, #8]
}
 8000e5e:	e7d9      	b.n	8000e14 <HAL_I2C_MspInit+0x18>
 8000e60:	40005400 	.word	0x40005400
 8000e64:	40023800 	.word	0x40023800
 8000e68:	40020400 	.word	0x40020400

08000e6c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000e6c:	b570      	push	{r4, r5, r6, lr}
 8000e6e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	2300      	movs	r3, #0
 8000e72:	9303      	str	r3, [sp, #12]
 8000e74:	9304      	str	r3, [sp, #16]
 8000e76:	9305      	str	r3, [sp, #20]
 8000e78:	9306      	str	r3, [sp, #24]
 8000e7a:	9307      	str	r3, [sp, #28]
  if(hi2s->Instance==SPI3)
 8000e7c:	6802      	ldr	r2, [r0, #0]
 8000e7e:	4b1e      	ldr	r3, [pc, #120]	; (8000ef8 <HAL_I2S_MspInit+0x8c>)
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d001      	beq.n	8000e88 <HAL_I2S_MspInit+0x1c>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e84:	b008      	add	sp, #32
 8000e86:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e88:	2400      	movs	r4, #0
 8000e8a:	9400      	str	r4, [sp, #0]
 8000e8c:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 8000e90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e96:	641a      	str	r2, [r3, #64]	; 0x40
 8000e98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e9a:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8000e9e:	9200      	str	r2, [sp, #0]
 8000ea0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea2:	9401      	str	r4, [sp, #4]
 8000ea4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ea6:	f042 0201 	orr.w	r2, r2, #1
 8000eaa:	631a      	str	r2, [r3, #48]	; 0x30
 8000eac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000eae:	f002 0201 	and.w	r2, r2, #1
 8000eb2:	9201      	str	r2, [sp, #4]
 8000eb4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb6:	9402      	str	r4, [sp, #8]
 8000eb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000eba:	f042 0204 	orr.w	r2, r2, #4
 8000ebe:	631a      	str	r2, [r3, #48]	; 0x30
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	f003 0304 	and.w	r3, r3, #4
 8000ec6:	9302      	str	r3, [sp, #8]
 8000ec8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000eca:	2310      	movs	r3, #16
 8000ecc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2602      	movs	r6, #2
 8000ed0:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ed2:	2506      	movs	r5, #6
 8000ed4:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ed6:	a903      	add	r1, sp, #12
 8000ed8:	4808      	ldr	r0, [pc, #32]	; (8000efc <HAL_I2S_MspInit+0x90>)
 8000eda:	f001 f8f3 	bl	80020c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ede:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000ee2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee4:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee8:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000eea:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eec:	a903      	add	r1, sp, #12
 8000eee:	4804      	ldr	r0, [pc, #16]	; (8000f00 <HAL_I2S_MspInit+0x94>)
 8000ef0:	f001 f8e8 	bl	80020c4 <HAL_GPIO_Init>
}
 8000ef4:	e7c6      	b.n	8000e84 <HAL_I2S_MspInit+0x18>
 8000ef6:	bf00      	nop
 8000ef8:	40003c00 	.word	0x40003c00
 8000efc:	40020000 	.word	0x40020000
 8000f00:	40020800 	.word	0x40020800

08000f04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f04:	b500      	push	{lr}
 8000f06:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	2300      	movs	r3, #0
 8000f0a:	9303      	str	r3, [sp, #12]
 8000f0c:	9304      	str	r3, [sp, #16]
 8000f0e:	9305      	str	r3, [sp, #20]
 8000f10:	9306      	str	r3, [sp, #24]
 8000f12:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 8000f14:	6802      	ldr	r2, [r0, #0]
 8000f16:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <HAL_SPI_MspInit+0x64>)
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d002      	beq.n	8000f22 <HAL_SPI_MspInit+0x1e>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f1c:	b009      	add	sp, #36	; 0x24
 8000f1e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f22:	2100      	movs	r1, #0
 8000f24:	9101      	str	r1, [sp, #4]
 8000f26:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8000f2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000f30:	645a      	str	r2, [r3, #68]	; 0x44
 8000f32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f34:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000f38:	9201      	str	r2, [sp, #4]
 8000f3a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3c:	9102      	str	r1, [sp, #8]
 8000f3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f40:	f042 0201 	orr.w	r2, r2, #1
 8000f44:	631a      	str	r2, [r3, #48]	; 0x30
 8000f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	9302      	str	r3, [sp, #8]
 8000f4e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000f50:	23e0      	movs	r3, #224	; 0xe0
 8000f52:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f54:	2302      	movs	r3, #2
 8000f56:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f58:	2305      	movs	r3, #5
 8000f5a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5c:	a903      	add	r1, sp, #12
 8000f5e:	4803      	ldr	r0, [pc, #12]	; (8000f6c <HAL_SPI_MspInit+0x68>)
 8000f60:	f001 f8b0 	bl	80020c4 <HAL_GPIO_Init>
}
 8000f64:	e7da      	b.n	8000f1c <HAL_SPI_MspInit+0x18>
 8000f66:	bf00      	nop
 8000f68:	40013000 	.word	0x40013000
 8000f6c:	40020000 	.word	0x40020000

08000f70 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8000f70:	b508      	push	{r3, lr}
  if(hspi->Instance==SPI1)
 8000f72:	6802      	ldr	r2, [r0, #0]
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_SPI_MspDeInit+0x20>)
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d000      	beq.n	8000f7c <HAL_SPI_MspDeInit+0xc>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8000f7a:	bd08      	pop	{r3, pc}
    __HAL_RCC_SPI1_CLK_DISABLE();
 8000f7c:	4a05      	ldr	r2, [pc, #20]	; (8000f94 <HAL_SPI_MspDeInit+0x24>)
 8000f7e:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8000f80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f84:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin);
 8000f86:	21e0      	movs	r1, #224	; 0xe0
 8000f88:	4803      	ldr	r0, [pc, #12]	; (8000f98 <HAL_SPI_MspDeInit+0x28>)
 8000f8a:	f001 f983 	bl	8002294 <HAL_GPIO_DeInit>
}
 8000f8e:	e7f4      	b.n	8000f7a <HAL_SPI_MspDeInit+0xa>
 8000f90:	40013000 	.word	0x40013000
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40020000 	.word	0x40020000

08000f9c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f9c:	4770      	bx	lr

08000f9e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f9e:	e7fe      	b.n	8000f9e <HardFault_Handler>

08000fa0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <MemManage_Handler>

08000fa2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa2:	e7fe      	b.n	8000fa2 <BusFault_Handler>

08000fa4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <UsageFault_Handler>

08000fa6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fa6:	4770      	bx	lr

08000fa8 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa8:	4770      	bx	lr

08000faa <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000faa:	4770      	bx	lr

08000fac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fae:	f000 fca7 	bl	8001900 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb2:	bd08      	pop	{r3, pc}

08000fb4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000fb4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000fb6:	4802      	ldr	r0, [pc, #8]	; (8000fc0 <DMA2_Stream0_IRQHandler+0xc>)
 8000fb8:	f000 ff96 	bl	8001ee8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000fbc:	bd08      	pop	{r3, pc}
 8000fbe:	bf00      	nop
 8000fc0:	200002c4 	.word	0x200002c4

08000fc4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fc4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000fc6:	4802      	ldr	r0, [pc, #8]	; (8000fd0 <OTG_FS_IRQHandler+0xc>)
 8000fc8:	f001 ffac 	bl	8002f24 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fcc:	bd08      	pop	{r3, pc}
 8000fce:	bf00      	nop
 8000fd0:	2000199c 	.word	0x2000199c

08000fd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd4:	b510      	push	{r4, lr}
 8000fd6:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fd8:	4a0c      	ldr	r2, [pc, #48]	; (800100c <_sbrk+0x38>)
 8000fda:	490d      	ldr	r1, [pc, #52]	; (8001010 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fdc:	480d      	ldr	r0, [pc, #52]	; (8001014 <_sbrk+0x40>)
 8000fde:	6800      	ldr	r0, [r0, #0]
 8000fe0:	b140      	cbz	r0, 8000ff4 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fe2:	480c      	ldr	r0, [pc, #48]	; (8001014 <_sbrk+0x40>)
 8000fe4:	6800      	ldr	r0, [r0, #0]
 8000fe6:	4403      	add	r3, r0
 8000fe8:	1a52      	subs	r2, r2, r1
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d806      	bhi.n	8000ffc <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000fee:	4a09      	ldr	r2, [pc, #36]	; (8001014 <_sbrk+0x40>)
 8000ff0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000ff2:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000ff4:	4807      	ldr	r0, [pc, #28]	; (8001014 <_sbrk+0x40>)
 8000ff6:	4c08      	ldr	r4, [pc, #32]	; (8001018 <_sbrk+0x44>)
 8000ff8:	6004      	str	r4, [r0, #0]
 8000ffa:	e7f2      	b.n	8000fe2 <_sbrk+0xe>
    errno = ENOMEM;
 8000ffc:	f005 f81e 	bl	800603c <__errno>
 8001000:	230c      	movs	r3, #12
 8001002:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001004:	f04f 30ff 	mov.w	r0, #4294967295
 8001008:	e7f3      	b.n	8000ff2 <_sbrk+0x1e>
 800100a:	bf00      	nop
 800100c:	20020000 	.word	0x20020000
 8001010:	00000400 	.word	0x00000400
 8001014:	2000045c 	.word	0x2000045c
 8001018:	20001db8 	.word	0x20001db8

0800101c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <SystemInit+0x18>)
 800101e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001022:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001026:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800102a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800102e:	609a      	str	r2, [r3, #8]
#endif
}
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001038:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001070 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800103c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800103e:	e003      	b.n	8001048 <LoopCopyDataInit>

08001040 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001042:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001044:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001046:	3104      	adds	r1, #4

08001048 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001048:	480b      	ldr	r0, [pc, #44]	; (8001078 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800104a:	4b0c      	ldr	r3, [pc, #48]	; (800107c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800104c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800104e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001050:	d3f6      	bcc.n	8001040 <CopyDataInit>
  ldr  r2, =_sbss
 8001052:	4a0b      	ldr	r2, [pc, #44]	; (8001080 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001054:	e002      	b.n	800105c <LoopFillZerobss>

08001056 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001056:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001058:	f842 3b04 	str.w	r3, [r2], #4

0800105c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800105c:	4b09      	ldr	r3, [pc, #36]	; (8001084 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800105e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001060:	d3f9      	bcc.n	8001056 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001062:	f7ff ffdb 	bl	800101c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001066:	f004 ffef 	bl	8006048 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800106a:	f7ff fd61 	bl	8000b30 <main>
  bx  lr    
 800106e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001070:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001074:	08006ab8 	.word	0x08006ab8
  ldr  r0, =_sdata
 8001078:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800107c:	20000254 	.word	0x20000254
  ldr  r2, =_sbss
 8001080:	20000254 	.word	0x20000254
  ldr  r3, = _ebss
 8001084:	20001db4 	.word	0x20001db4

08001088 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001088:	e7fe      	b.n	8001088 <ADC_IRQHandler>

0800108a <LIS302DL_DeInit>:
  * @retval None.
  */
void LIS302DL_DeInit(void)
{
  
}
 800108a:	4770      	bx	lr

0800108c <LIS302DL_Init>:
{
 800108c:	b510      	push	{r4, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
 8001092:	2300      	movs	r3, #0
 8001094:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Init();
 8001098:	f000 faee 	bl	8001678 <ACCELERO_IO_Init>
  ctrl = (uint8_t) InitStruct;
 800109c:	f88d 4007 	strb.w	r4, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG1_ADDR, 1);
 80010a0:	2201      	movs	r2, #1
 80010a2:	2120      	movs	r1, #32
 80010a4:	f10d 0007 	add.w	r0, sp, #7
 80010a8:	f000 fb34 	bl	8001714 <ACCELERO_IO_Write>
}
 80010ac:	b002      	add	sp, #8
 80010ae:	bd10      	pop	{r4, pc}

080010b0 <LIS302DL_ReadID>:
  * @brief  Read LIS302DL device ID.
  * @param  None
  * @retval The Device ID (two bytes).
  */
uint8_t LIS302DL_ReadID(void)
{
 80010b0:	b500      	push	{lr}
 80010b2:	b083      	sub	sp, #12
  uint8_t tmp = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	f88d 3007 	strb.w	r3, [sp, #7]

  /* Configure the low level interface */
  ACCELERO_IO_Init();
 80010ba:	f000 fadd 	bl	8001678 <ACCELERO_IO_Init>

  /* Read WHO_AM_I register */
  ACCELERO_IO_Read(&tmp, LIS302DL_WHO_AM_I_ADDR, 1);
 80010be:	2201      	movs	r2, #1
 80010c0:	210f      	movs	r1, #15
 80010c2:	f10d 0007 	add.w	r0, sp, #7
 80010c6:	f000 fb47 	bl	8001758 <ACCELERO_IO_Read>
  
  /* Return the ID */
  return (uint16_t)tmp;
}
 80010ca:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80010ce:	b003      	add	sp, #12
 80010d0:	f85d fb04 	ldr.w	pc, [sp], #4

080010d4 <LIS302DL_FilterConfig>:
  * @brief  Set LIS302DL Internal High Pass Filter configuration.
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LIS302DL_FilterConfig(uint8_t FilterStruct)
{
 80010d4:	b510      	push	{r4, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
 80010da:	2300      	movs	r3, #0
 80010dc:	f88d 3007 	strb.w	r3, [sp, #7]
  
  /* Read CTRL_REG2 register */
  ACCELERO_IO_Read(&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 80010e0:	2201      	movs	r2, #1
 80010e2:	2121      	movs	r1, #33	; 0x21
 80010e4:	f10d 0007 	add.w	r0, sp, #7
 80010e8:	f000 fb36 	bl	8001758 <ACCELERO_IO_Read>

  /* Clear high pass filter cut-off level, interrupt and data selection bits */
  ctrl &= (uint8_t)~(LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER | \
 80010ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80010f0:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
 80010f4:	f88d 3007 	strb.w	r3, [sp, #7]
                     LIS302DL_HIGHPASSFILTER_LEVEL_3 | \
                     LIS302DL_HIGHPASSFILTERINTERRUPT_1_2);

  ctrl |= FilterStruct;
 80010f8:	4323      	orrs	r3, r4
 80010fa:	f88d 3007 	strb.w	r3, [sp, #7]
  
  /* Write value to MEMS CTRL_REG2 register */
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 80010fe:	2201      	movs	r2, #1
 8001100:	2121      	movs	r1, #33	; 0x21
 8001102:	f10d 0007 	add.w	r0, sp, #7
 8001106:	f000 fb05 	bl	8001714 <ACCELERO_IO_Write>
}
 800110a:	b002      	add	sp, #8
 800110c:	bd10      	pop	{r4, pc}

0800110e <LIS302DL_Click_IntClear>:
  * @brief  Clear LIS302DL click Interrupt 
  * @param  None
  * @retval None
  */
void LIS302DL_Click_IntClear(void)
{
 800110e:	b500      	push	{lr}
 8001110:	b085      	sub	sp, #20
  uint8_t buffer[6], clickreg = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	f88d 3007 	strb.w	r3, [sp, #7]

  /* Read click and status registers if the available MEMS Accelerometer is LIS302DL */
  ACCELERO_IO_Read(&clickreg, LIS302DL_CLICK_SRC_REG_ADDR, 1); 
 8001118:	2201      	movs	r2, #1
 800111a:	2139      	movs	r1, #57	; 0x39
 800111c:	f10d 0007 	add.w	r0, sp, #7
 8001120:	f000 fb1a 	bl	8001758 <ACCELERO_IO_Read>
  ACCELERO_IO_Read(buffer, LIS302DL_STATUS_REG_ADDR, 6);
 8001124:	2206      	movs	r2, #6
 8001126:	2127      	movs	r1, #39	; 0x27
 8001128:	a802      	add	r0, sp, #8
 800112a:	f000 fb15 	bl	8001758 <ACCELERO_IO_Read>
}
 800112e:	b005      	add	sp, #20
 8001130:	f85d fb04 	ldr.w	pc, [sp], #4

08001134 <LIS302DL_RebootCmd>:
  * @brief  Reboot memory content of LIS302DL.
  * @param  None
  * @retval None
  */
void LIS302DL_RebootCmd(void)
{
 8001134:	b500      	push	{lr}
 8001136:	b083      	sub	sp, #12
  uint8_t tmpreg;
  /* Read CTRL_REG2 register */
  ACCELERO_IO_Read(&tmpreg, LIS302DL_CTRL_REG2_ADDR, 1);
 8001138:	2201      	movs	r2, #1
 800113a:	2121      	movs	r1, #33	; 0x21
 800113c:	f10d 0007 	add.w	r0, sp, #7
 8001140:	f000 fb0a 	bl	8001758 <ACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LIS302DL_BOOT_REBOOTMEMORY;
 8001144:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001148:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800114c:	f88d 3007 	strb.w	r3, [sp, #7]
  
  /* Write value to MEMS CTRL_REG2 register */
  ACCELERO_IO_Write(&tmpreg, LIS302DL_CTRL_REG2_ADDR, 1);
 8001150:	2201      	movs	r2, #1
 8001152:	2121      	movs	r1, #33	; 0x21
 8001154:	f10d 0007 	add.w	r0, sp, #7
 8001158:	f000 fadc 	bl	8001714 <ACCELERO_IO_Write>
}
 800115c:	b003      	add	sp, #12
 800115e:	f85d fb04 	ldr.w	pc, [sp], #4

08001162 <LIS302DL_ReadACC>:
  *         ACC[mg]=SENSITIVITY* (out_h*256+out_l)/16 (12 bit rappresentation)
  * @param  pfData: Data out pointer
  * @retval None
  */
void LIS302DL_ReadACC(int16_t *pData)
{
 8001162:	b510      	push	{r4, lr}
 8001164:	b086      	sub	sp, #24
 8001166:	4604      	mov	r4, r0
  int8_t buffer[6];
  int16_t pnRawData[3];
  uint8_t sensitivity = LIS302DL_SENSITIVITY_2_3G;
  uint8_t crtl, i = 0x00;
  
  ACCELERO_IO_Read(&crtl, LIS302DL_CTRL_REG1_ADDR, 1);
 8001168:	2201      	movs	r2, #1
 800116a:	2120      	movs	r1, #32
 800116c:	f10d 0007 	add.w	r0, sp, #7
 8001170:	f000 faf2 	bl	8001758 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)buffer, LIS302DL_OUT_X_ADDR, 6);
 8001174:	2206      	movs	r2, #6
 8001176:	2129      	movs	r1, #41	; 0x29
 8001178:	a804      	add	r0, sp, #16
 800117a:	f000 faed 	bl	8001758 <ACCELERO_IO_Read>
  
  for(i=0; i<3; i++)
 800117e:	2300      	movs	r3, #0
 8001180:	e008      	b.n	8001194 <LIS302DL_ReadACC+0x32>
  {
    pnRawData[i] = buffer[2*i];
 8001182:	aa06      	add	r2, sp, #24
 8001184:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8001188:	f912 1c08 	ldrsb.w	r1, [r2, #-8]
 800118c:	f822 1c10 	strh.w	r1, [r2, #-16]
  for(i=0; i<3; i++)
 8001190:	3301      	adds	r3, #1
 8001192:	b2db      	uxtb	r3, r3
 8001194:	2b02      	cmp	r3, #2
 8001196:	d9f4      	bls.n	8001182 <LIS302DL_ReadACC+0x20>
  }
  
  switch(crtl & LIS302DL_FULLSCALE_9_2) 
 8001198:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800119c:	f003 0320 	and.w	r3, r3, #32
 80011a0:	b913      	cbnz	r3, 80011a8 <LIS302DL_ReadACC+0x46>
  uint8_t sensitivity = LIS302DL_SENSITIVITY_2_3G;
 80011a2:	2112      	movs	r1, #18
  default:
    break;
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80011a4:	2300      	movs	r3, #0
 80011a6:	e00c      	b.n	80011c2 <LIS302DL_ReadACC+0x60>
    sensitivity = LIS302DL_SENSITIVITY_9_2G;
 80011a8:	2148      	movs	r1, #72	; 0x48
 80011aa:	e7fb      	b.n	80011a4 <LIS302DL_ReadACC+0x42>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 80011ac:	aa06      	add	r2, sp, #24
 80011ae:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80011b2:	f932 2c10 	ldrsh.w	r2, [r2, #-16]
 80011b6:	fb12 f201 	smulbb	r2, r2, r1
 80011ba:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
  for(i=0; i<3; i++)
 80011be:	3301      	adds	r3, #1
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d9f2      	bls.n	80011ac <LIS302DL_ReadACC+0x4a>
  }
}
 80011c6:	b006      	add	sp, #24
 80011c8:	bd10      	pop	{r4, pc}

080011ca <LIS302DL_InterruptConfig>:
{
 80011ca:	b510      	push	{r4, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Read(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 80011d6:	2201      	movs	r2, #1
 80011d8:	2138      	movs	r1, #56	; 0x38
 80011da:	f10d 0007 	add.w	r0, sp, #7
 80011de:	f000 fabb 	bl	8001758 <ACCELERO_IO_Read>
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 80011e2:	7822      	ldrb	r2, [r4, #0]
                   LIS302DL_IntConfigStruct->SingleClick_Axes | \
 80011e4:	7861      	ldrb	r1, [r4, #1]
                   LIS302DL_IntConfigStruct->DoubleClick_Axes);
 80011e6:	78a3      	ldrb	r3, [r4, #2]
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 80011e8:	430a      	orrs	r2, r1
 80011ea:	4313      	orrs	r3, r2
 80011ec:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 80011f0:	2201      	movs	r2, #1
 80011f2:	2138      	movs	r1, #56	; 0x38
 80011f4:	f10d 0007 	add.w	r0, sp, #7
 80011f8:	f000 fa8c 	bl	8001714 <ACCELERO_IO_Write>
}
 80011fc:	b002      	add	sp, #8
 80011fe:	bd10      	pop	{r4, pc}

08001200 <LIS302DL_Click_IntConfig>:
{
 8001200:	b530      	push	{r4, r5, lr}
 8001202:	b083      	sub	sp, #12
  uint8_t ctrl = 0x00;
 8001204:	2300      	movs	r3, #0
 8001206:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_ITConfig();
 800120a:	f000 fa5b 	bl	80016c4 <ACCELERO_IO_ITConfig>
  LIS302DL_InterruptStruct.Latch_Request = LIS302DL_INTERRUPTREQUEST_LATCHED;
 800120e:	2340      	movs	r3, #64	; 0x40
 8001210:	f88d 3004 	strb.w	r3, [sp, #4]
  LIS302DL_InterruptStruct.SingleClick_Axes = LIS302DL_CLICKINTERRUPT_Z_ENABLE;
 8001214:	2310      	movs	r3, #16
 8001216:	f88d 3005 	strb.w	r3, [sp, #5]
  LIS302DL_InterruptStruct.DoubleClick_Axes = LIS302DL_DOUBLECLICKINTERRUPT_Z_ENABLE;
 800121a:	2320      	movs	r3, #32
 800121c:	f88d 3006 	strb.w	r3, [sp, #6]
  LIS302DL_InterruptConfig(&LIS302DL_InterruptStruct);
 8001220:	a801      	add	r0, sp, #4
 8001222:	f7ff ffd2 	bl	80011ca <LIS302DL_InterruptConfig>
  ctrl = 0x3F;
 8001226:	243f      	movs	r4, #63	; 0x3f
 8001228:	f88d 4007 	strb.w	r4, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG3_ADDR, 1);
 800122c:	2201      	movs	r2, #1
 800122e:	2122      	movs	r1, #34	; 0x22
 8001230:	f10d 0007 	add.w	r0, sp, #7
 8001234:	f000 fa6e 	bl	8001714 <ACCELERO_IO_Write>
  ctrl = 0x50;
 8001238:	2350      	movs	r3, #80	; 0x50
 800123a:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 800123e:	2201      	movs	r2, #1
 8001240:	2138      	movs	r1, #56	; 0x38
 8001242:	f10d 0007 	add.w	r0, sp, #7
 8001246:	f000 fa65 	bl	8001714 <ACCELERO_IO_Write>
  ctrl = 0xAA;
 800124a:	23aa      	movs	r3, #170	; 0xaa
 800124c:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_THSY_X_REG_ADDR, 1);
 8001250:	2201      	movs	r2, #1
 8001252:	213b      	movs	r1, #59	; 0x3b
 8001254:	f10d 0007 	add.w	r0, sp, #7
 8001258:	f000 fa5c 	bl	8001714 <ACCELERO_IO_Write>
  ctrl = 0x0A;
 800125c:	230a      	movs	r3, #10
 800125e:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_THSZ_REG_ADDR, 1);
 8001262:	2201      	movs	r2, #1
 8001264:	213c      	movs	r1, #60	; 0x3c
 8001266:	f10d 0007 	add.w	r0, sp, #7
 800126a:	f000 fa53 	bl	8001714 <ACCELERO_IO_Write>
  ctrl = 0x4C;
 800126e:	234c      	movs	r3, #76	; 0x4c
 8001270:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_FF_WU_CFG1_REG_ADDR, 1);
 8001274:	2201      	movs	r2, #1
 8001276:	2130      	movs	r1, #48	; 0x30
 8001278:	f10d 0007 	add.w	r0, sp, #7
 800127c:	f000 fa4a 	bl	8001714 <ACCELERO_IO_Write>
  ctrl = 0x03;
 8001280:	2303      	movs	r3, #3
 8001282:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_TIMELIMIT_REG_ADDR, 1);
 8001286:	2201      	movs	r2, #1
 8001288:	213d      	movs	r1, #61	; 0x3d
 800128a:	f10d 0007 	add.w	r0, sp, #7
 800128e:	f000 fa41 	bl	8001714 <ACCELERO_IO_Write>
  ctrl = 0x7F;
 8001292:	257f      	movs	r5, #127	; 0x7f
 8001294:	f88d 5007 	strb.w	r5, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_LATENCY_REG_ADDR, 1);
 8001298:	2201      	movs	r2, #1
 800129a:	213e      	movs	r1, #62	; 0x3e
 800129c:	f10d 0007 	add.w	r0, sp, #7
 80012a0:	f000 fa38 	bl	8001714 <ACCELERO_IO_Write>
  ctrl = 0x7F;
 80012a4:	f88d 5007 	strb.w	r5, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_WINDOW_REG_ADDR, 1);
 80012a8:	2201      	movs	r2, #1
 80012aa:	4621      	mov	r1, r4
 80012ac:	f10d 0007 	add.w	r0, sp, #7
 80012b0:	f000 fa30 	bl	8001714 <ACCELERO_IO_Write>
}
 80012b4:	b003      	add	sp, #12
 80012b6:	bd30      	pop	{r4, r5, pc}

080012b8 <LIS3DSH_DeInit>:
  * @retval None.
  */
void LIS3DSH_DeInit(void)
{
  
}
 80012b8:	4770      	bx	lr

080012ba <LIS3DSH_Init>:
{
 80012ba:	b510      	push	{r4, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
 80012c0:	2300      	movs	r3, #0
 80012c2:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Init();
 80012c6:	f000 f9d7 	bl	8001678 <ACCELERO_IO_Init>
  ctrl = (uint8_t) (InitStruct);
 80012ca:	f88d 4007 	strb.w	r4, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG4_ADDR, 1);
 80012ce:	2201      	movs	r2, #1
 80012d0:	2120      	movs	r1, #32
 80012d2:	f10d 0007 	add.w	r0, sp, #7
 80012d6:	f000 fa1d 	bl	8001714 <ACCELERO_IO_Write>
  ctrl = (uint8_t) (InitStruct >> 8);
 80012da:	0a24      	lsrs	r4, r4, #8
 80012dc:	f88d 4007 	strb.w	r4, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG5_ADDR, 1);
 80012e0:	2201      	movs	r2, #1
 80012e2:	2124      	movs	r1, #36	; 0x24
 80012e4:	f10d 0007 	add.w	r0, sp, #7
 80012e8:	f000 fa14 	bl	8001714 <ACCELERO_IO_Write>
}
 80012ec:	b002      	add	sp, #8
 80012ee:	bd10      	pop	{r4, pc}

080012f0 <LIS3DSH_ReadID>:
  * @brief  Read LIS3DSH device ID.
  * @param  None
  * @retval The Device ID (two bytes).
  */
uint8_t LIS3DSH_ReadID(void)
{
 80012f0:	b500      	push	{lr}
 80012f2:	b083      	sub	sp, #12
  uint8_t tmp = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	f88d 3007 	strb.w	r3, [sp, #7]

  /* Configure the low level interface */
  ACCELERO_IO_Init();
 80012fa:	f000 f9bd 	bl	8001678 <ACCELERO_IO_Init>

  /* Read WHO_AM_I register */
  ACCELERO_IO_Read(&tmp, LIS3DSH_WHO_AM_I_ADDR, 1);
 80012fe:	2201      	movs	r2, #1
 8001300:	210f      	movs	r1, #15
 8001302:	f10d 0007 	add.w	r0, sp, #7
 8001306:	f000 fa27 	bl	8001758 <ACCELERO_IO_Read>
  
  /* Return the ID */
  return (uint16_t)tmp;
}
 800130a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800130e:	b003      	add	sp, #12
 8001310:	f85d fb04 	ldr.w	pc, [sp], #4

08001314 <LIS3DSH_RebootCmd>:
  * @brief  Reboot memory content of LIS3DSH.
  * @param  None
  * @retval None
  */
void LIS3DSH_RebootCmd(void)
{
 8001314:	b500      	push	{lr}
 8001316:	b083      	sub	sp, #12
  uint8_t tmpreg;
  /* Read CTRL_REG6 register */
  ACCELERO_IO_Read(&tmpreg, LIS3DSH_CTRL_REG6_ADDR, 1);
 8001318:	2201      	movs	r2, #1
 800131a:	2125      	movs	r1, #37	; 0x25
 800131c:	f10d 0007 	add.w	r0, sp, #7
 8001320:	f000 fa1a 	bl	8001758 <ACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LIS3DSH_BOOT_FORCED;
 8001324:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001328:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800132c:	f88d 3007 	strb.w	r3, [sp, #7]
  
  /* Write value to MEMS CTRL_REG6 register */
  ACCELERO_IO_Write(&tmpreg, LIS3DSH_CTRL_REG6_ADDR, 1);
 8001330:	2201      	movs	r2, #1
 8001332:	2125      	movs	r1, #37	; 0x25
 8001334:	f10d 0007 	add.w	r0, sp, #7
 8001338:	f000 f9ec 	bl	8001714 <ACCELERO_IO_Write>
}
 800133c:	b003      	add	sp, #12
 800133e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001344 <LIS3DSH_ReadACC>:
  *         ACC[mg]=SENSITIVITY* (out_h*256+out_l)/16 (12 bit representation).
  * @param  pointer on floating buffer.
  * @retval None
  */
void LIS3DSH_ReadACC(int16_t *pData)
{
 8001344:	b510      	push	{r4, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	4604      	mov	r4, r0
  int8_t buffer[6];
  uint8_t crtl, i = 0x00;
  float sensitivity = LIS3DSH_SENSITIVITY_0_06G;
  float valueinfloat = 0;
  
  ACCELERO_IO_Read(&crtl, LIS3DSH_CTRL_REG5_ADDR, 1);  
 800134a:	2201      	movs	r2, #1
 800134c:	2124      	movs	r1, #36	; 0x24
 800134e:	f10d 0007 	add.w	r0, sp, #7
 8001352:	f000 fa01 	bl	8001758 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[0], LIS3DSH_OUT_X_L_ADDR, 1);
 8001356:	2201      	movs	r2, #1
 8001358:	2128      	movs	r1, #40	; 0x28
 800135a:	a802      	add	r0, sp, #8
 800135c:	f000 f9fc 	bl	8001758 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[1], LIS3DSH_OUT_X_H_ADDR, 1);
 8001360:	2201      	movs	r2, #1
 8001362:	2129      	movs	r1, #41	; 0x29
 8001364:	f10d 0009 	add.w	r0, sp, #9
 8001368:	f000 f9f6 	bl	8001758 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[2], LIS3DSH_OUT_Y_L_ADDR, 1);
 800136c:	2201      	movs	r2, #1
 800136e:	212a      	movs	r1, #42	; 0x2a
 8001370:	f10d 000a 	add.w	r0, sp, #10
 8001374:	f000 f9f0 	bl	8001758 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[3], LIS3DSH_OUT_Y_H_ADDR, 1);
 8001378:	2201      	movs	r2, #1
 800137a:	212b      	movs	r1, #43	; 0x2b
 800137c:	f10d 000b 	add.w	r0, sp, #11
 8001380:	f000 f9ea 	bl	8001758 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[4], LIS3DSH_OUT_Z_L_ADDR, 1);
 8001384:	2201      	movs	r2, #1
 8001386:	212c      	movs	r1, #44	; 0x2c
 8001388:	a803      	add	r0, sp, #12
 800138a:	f000 f9e5 	bl	8001758 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[5], LIS3DSH_OUT_Z_H_ADDR, 1);
 800138e:	2201      	movs	r2, #1
 8001390:	212d      	movs	r1, #45	; 0x2d
 8001392:	f10d 000d 	add.w	r0, sp, #13
 8001396:	f000 f9df 	bl	8001758 <ACCELERO_IO_Read>
  
  switch(crtl & LIS3DSH__FULLSCALE_SELECTION) 
 800139a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800139e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80013a2:	3b08      	subs	r3, #8
 80013a4:	2b18      	cmp	r3, #24
 80013a6:	d80e      	bhi.n	80013c6 <LIS3DSH_ReadACC+0x82>
 80013a8:	e8df f003 	tbb	[pc, r3]
 80013ac:	0d0d0d1a 	.word	0x0d0d0d1a
 80013b0:	0d0d0d0d 	.word	0x0d0d0d0d
 80013b4:	0d0d0d11 	.word	0x0d0d0d11
 80013b8:	0d0d0d0d 	.word	0x0d0d0d0d
 80013bc:	0d0d0d14 	.word	0x0d0d0d14
 80013c0:	0d0d0d0d 	.word	0x0d0d0d0d
 80013c4:	17          	.byte	0x17
 80013c5:	00          	.byte	0x00
 80013c6:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001428 <LIS3DSH_ReadACC+0xe4>
  default:
    break;
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80013ca:	2200      	movs	r2, #0
 80013cc:	e027      	b.n	800141e <LIS3DSH_ReadACC+0xda>
    sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 80013ce:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800142c <LIS3DSH_ReadACC+0xe8>
    break;
 80013d2:	e7fa      	b.n	80013ca <LIS3DSH_ReadACC+0x86>
    sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 80013d4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001430 <LIS3DSH_ReadACC+0xec>
    break;
 80013d8:	e7f7      	b.n	80013ca <LIS3DSH_ReadACC+0x86>
    sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 80013da:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001434 <LIS3DSH_ReadACC+0xf0>
    break;
 80013de:	e7f4      	b.n	80013ca <LIS3DSH_ReadACC+0x86>
    sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 80013e0:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001438 <LIS3DSH_ReadACC+0xf4>
 80013e4:	e7f1      	b.n	80013ca <LIS3DSH_ReadACC+0x86>
  {
    valueinfloat = ((buffer[2*i+1] << 8) + buffer[2*i]) * sensitivity;
 80013e6:	0051      	lsls	r1, r2, #1
 80013e8:	f101 0311 	add.w	r3, r1, #17
 80013ec:	446b      	add	r3, sp
 80013ee:	f913 0c08 	ldrsb.w	r0, [r3, #-8]
 80013f2:	f101 0310 	add.w	r3, r1, #16
 80013f6:	eb0d 0103 	add.w	r1, sp, r3
 80013fa:	f911 3c08 	ldrsb.w	r3, [r1, #-8]
 80013fe:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 8001402:	ee07 3a90 	vmov	s15, r3
 8001406:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800140a:	ee67 7a87 	vmul.f32	s15, s15, s14
    pData[i] = (int16_t)valueinfloat;
 800140e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001412:	ee17 3a90 	vmov	r3, s15
 8001416:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
  for(i=0; i<3; i++)
 800141a:	3201      	adds	r2, #1
 800141c:	b2d2      	uxtb	r2, r2
 800141e:	2a02      	cmp	r2, #2
 8001420:	d9e1      	bls.n	80013e6 <LIS3DSH_ReadACC+0xa2>
  }
}
 8001422:	b004      	add	sp, #16
 8001424:	bd10      	pop	{r4, pc}
 8001426:	bf00      	nop
 8001428:	3d75c28f 	.word	0x3d75c28f
 800142c:	3e3851ec 	.word	0x3e3851ec
 8001430:	3e75c28f 	.word	0x3e75c28f
 8001434:	3f3ae148 	.word	0x3f3ae148
 8001438:	3df5c28f 	.word	0x3df5c28f

0800143c <LIS3DSH_InterruptConfig>:
{
 800143c:	b510      	push	{r4, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
 8001442:	2300      	movs	r3, #0
 8001444:	f88d 3007 	strb.w	r3, [sp, #7]
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable | \
 8001448:	7842      	ldrb	r2, [r0, #1]
                   LIS3DSH_IntConfigStruct->Interrupt_Request | \
 800144a:	7801      	ldrb	r1, [r0, #0]
                   LIS3DSH_IntConfigStruct->Interrupt_Signal);
 800144c:	7883      	ldrb	r3, [r0, #2]
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable | \
 800144e:	430a      	orrs	r2, r1
 8001450:	4313      	orrs	r3, r2
 8001452:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG3_ADDR, 1);
 8001456:	2201      	movs	r2, #1
 8001458:	2123      	movs	r1, #35	; 0x23
 800145a:	f10d 0007 	add.w	r0, sp, #7
 800145e:	f000 f959 	bl	8001714 <ACCELERO_IO_Write>
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine1_Enable | \
 8001462:	78e3      	ldrb	r3, [r4, #3]
                   LIS3DSH_IntConfigStruct->State_Machine1_Interrupt);
 8001464:	7922      	ldrb	r2, [r4, #4]
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine1_Enable | \
 8001466:	4313      	orrs	r3, r2
 8001468:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG1_ADDR, 1);
 800146c:	2201      	movs	r2, #1
 800146e:	2121      	movs	r1, #33	; 0x21
 8001470:	f10d 0007 	add.w	r0, sp, #7
 8001474:	f000 f94e 	bl	8001714 <ACCELERO_IO_Write>
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine2_Enable | \
 8001478:	7963      	ldrb	r3, [r4, #5]
                   LIS3DSH_IntConfigStruct->State_Machine2_Interrupt);
 800147a:	79a2      	ldrb	r2, [r4, #6]
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine2_Enable | \
 800147c:	4313      	orrs	r3, r2
 800147e:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG2_ADDR, 1);
 8001482:	2201      	movs	r2, #1
 8001484:	2122      	movs	r1, #34	; 0x22
 8001486:	f10d 0007 	add.w	r0, sp, #7
 800148a:	f000 f943 	bl	8001714 <ACCELERO_IO_Write>
}
 800148e:	b002      	add	sp, #8
 8001490:	bd10      	pop	{r4, pc}

08001492 <LIS3DSH_Click_IntConfig>:
{
 8001492:	b530      	push	{r4, r5, lr}
 8001494:	b083      	sub	sp, #12
  uint8_t ctrl = 0x00;
 8001496:	2500      	movs	r5, #0
 8001498:	f88d 5007 	strb.w	r5, [sp, #7]
  ACCELERO_IO_ITConfig();
 800149c:	f000 f912 	bl	80016c4 <ACCELERO_IO_ITConfig>
  LIS3DSH_InterruptStruct.Interrupt_Selection_Enable = LIS3DSH_INTERRUPT_2_ENABLE;
 80014a0:	f88d 5001 	strb.w	r5, [sp, #1]
  LIS3DSH_InterruptStruct.Interrupt_Request = LIS3DSH_INTERRUPT_REQUEST_LATCHED;
 80014a4:	f88d 5000 	strb.w	r5, [sp]
  LIS3DSH_InterruptStruct.Interrupt_Signal = LIS3DSH_INTERRUPT_SIGNAL_HIGH;
 80014a8:	2340      	movs	r3, #64	; 0x40
 80014aa:	f88d 3002 	strb.w	r3, [sp, #2]
  LIS3DSH_InterruptStruct.State_Machine1_Enable = LIS3DSH_SM_DISABLE;
 80014ae:	f88d 5003 	strb.w	r5, [sp, #3]
  LIS3DSH_InterruptStruct.State_Machine2_Enable = LIS3DSH_SM_ENABLE;
 80014b2:	2401      	movs	r4, #1
 80014b4:	f88d 4005 	strb.w	r4, [sp, #5]
  LIS3DSH_InterruptStruct.State_Machine2_Interrupt = LIS3DSH_SM_INT1;
 80014b8:	f88d 5006 	strb.w	r5, [sp, #6]
  LIS3DSH_InterruptConfig(&LIS3DSH_InterruptStruct);
 80014bc:	4668      	mov	r0, sp
 80014be:	f7ff ffbd 	bl	800143c <LIS3DSH_InterruptConfig>
  ctrl=0x03; 
 80014c2:	2303      	movs	r3, #3
 80014c4:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_TIM2_1_L_ADDR,1);
 80014c8:	4622      	mov	r2, r4
 80014ca:	2152      	movs	r1, #82	; 0x52
 80014cc:	f10d 0007 	add.w	r0, sp, #7
 80014d0:	f000 f920 	bl	8001714 <ACCELERO_IO_Write>
  ctrl=0xC8; 
 80014d4:	23c8      	movs	r3, #200	; 0xc8
 80014d6:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_TIM1_1_L_ADDR,1);
 80014da:	4622      	mov	r2, r4
 80014dc:	2154      	movs	r1, #84	; 0x54
 80014de:	f10d 0007 	add.w	r0, sp, #7
 80014e2:	f000 f917 	bl	8001714 <ACCELERO_IO_Write>
  ctrl=0x45; 
 80014e6:	2345      	movs	r3, #69	; 0x45
 80014e8:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_THRS2_1_ADDR,1);
 80014ec:	4622      	mov	r2, r4
 80014ee:	2156      	movs	r1, #86	; 0x56
 80014f0:	f10d 0007 	add.w	r0, sp, #7
 80014f4:	f000 f90e 	bl	8001714 <ACCELERO_IO_Write>
  ctrl=0xFC; 
 80014f8:	23fc      	movs	r3, #252	; 0xfc
 80014fa:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_MASK1_A_ADDR,1);
 80014fe:	4622      	mov	r2, r4
 8001500:	215a      	movs	r1, #90	; 0x5a
 8001502:	f10d 0007 	add.w	r0, sp, #7
 8001506:	f000 f905 	bl	8001714 <ACCELERO_IO_Write>
  ctrl=0xA1; 
 800150a:	23a1      	movs	r3, #161	; 0xa1
 800150c:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_SETT1_ADDR,1);
 8001510:	4622      	mov	r2, r4
 8001512:	215b      	movs	r1, #91	; 0x5b
 8001514:	f10d 0007 	add.w	r0, sp, #7
 8001518:	f000 f8fc 	bl	8001714 <ACCELERO_IO_Write>
  ctrl=0x01; 
 800151c:	f88d 4007 	strb.w	r4, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_PR1_ADDR,1);
 8001520:	4622      	mov	r2, r4
 8001522:	215c      	movs	r1, #92	; 0x5c
 8001524:	f10d 0007 	add.w	r0, sp, #7
 8001528:	f000 f8f4 	bl	8001714 <ACCELERO_IO_Write>
  ACCELERO_IO_Write(&ctrl, LIS3DSH_SETT2_ADDR,1);
 800152c:	4622      	mov	r2, r4
 800152e:	217b      	movs	r1, #123	; 0x7b
 8001530:	f10d 0007 	add.w	r0, sp, #7
 8001534:	f000 f8ee 	bl	8001714 <ACCELERO_IO_Write>
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_1_ADDR,1);
 8001538:	4622      	mov	r2, r4
 800153a:	2160      	movs	r1, #96	; 0x60
 800153c:	f10d 0007 	add.w	r0, sp, #7
 8001540:	f000 f8e8 	bl	8001714 <ACCELERO_IO_Write>
  ctrl=0x06; 
 8001544:	2306      	movs	r3, #6
 8001546:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_2_ADDR,1);
 800154a:	4622      	mov	r2, r4
 800154c:	2161      	movs	r1, #97	; 0x61
 800154e:	f10d 0007 	add.w	r0, sp, #7
 8001552:	f000 f8df 	bl	8001714 <ACCELERO_IO_Write>
  ctrl=0x28; 
 8001556:	2328      	movs	r3, #40	; 0x28
 8001558:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_3_ADDR,1);
 800155c:	4622      	mov	r2, r4
 800155e:	2162      	movs	r1, #98	; 0x62
 8001560:	f10d 0007 	add.w	r0, sp, #7
 8001564:	f000 f8d6 	bl	8001714 <ACCELERO_IO_Write>
  ctrl=0x11; 
 8001568:	2311      	movs	r3, #17
 800156a:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_4_ADDR,1);
 800156e:	4622      	mov	r2, r4
 8001570:	2163      	movs	r1, #99	; 0x63
 8001572:	f10d 0007 	add.w	r0, sp, #7
 8001576:	f000 f8cd 	bl	8001714 <ACCELERO_IO_Write>
}
 800157a:	b003      	add	sp, #12
 800157c:	bd30      	pop	{r4, r5, pc}
	...

08001580 <SPIx_MspInit>:

/**
  * @brief  SPI MSP Init.
  */
static void SPIx_MspInit(void)
{
 8001580:	b500      	push	{lr}
 8001582:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable the SPI peripheral */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001584:	2100      	movs	r1, #0
 8001586:	9101      	str	r1, [sp, #4]
 8001588:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <SPIx_MspInit+0x50>)
 800158a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800158c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001590:	645a      	str	r2, [r3, #68]	; 0x44
 8001592:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001594:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001598:	9201      	str	r2, [sp, #4]
 800159a:	9a01      	ldr	r2, [sp, #4]
  
  /* Enable SCK, MOSI and MISO GPIO clocks */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 800159c:	9102      	str	r1, [sp, #8]
 800159e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015a0:	f042 0201 	orr.w	r2, r2, #1
 80015a4:	631a      	str	r2, [r3, #48]	; 0x30
 80015a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	9302      	str	r3, [sp, #8]
 80015ae:	9b02      	ldr	r3, [sp, #8]
  
  /* SPI SCK, MOSI, MISO pin configuration */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MISO_PIN | DISCOVERY_SPIx_MOSI_PIN);
 80015b0:	23e0      	movs	r3, #224	; 0xe0
 80015b2:	9303      	str	r3, [sp, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80015b4:	2302      	movs	r3, #2
 80015b6:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Pull  = GPIO_PULLDOWN;
 80015b8:	9305      	str	r3, [sp, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 80015ba:	2301      	movs	r3, #1
 80015bc:	9306      	str	r3, [sp, #24]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80015be:	2305      	movs	r3, #5
 80015c0:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 80015c2:	a903      	add	r1, sp, #12
 80015c4:	4803      	ldr	r0, [pc, #12]	; (80015d4 <SPIx_MspInit+0x54>)
 80015c6:	f000 fd7d 	bl	80020c4 <HAL_GPIO_Init>
}
 80015ca:	b009      	add	sp, #36	; 0x24
 80015cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40020000 	.word	0x40020000

080015d8 <SPIx_Init>:
{
 80015d8:	b510      	push	{r4, lr}
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80015da:	4810      	ldr	r0, [pc, #64]	; (800161c <SPIx_Init+0x44>)
 80015dc:	f002 fe7c 	bl	80042d8 <HAL_SPI_GetState>
 80015e0:	b100      	cbz	r0, 80015e4 <SPIx_Init+0xc>
}
 80015e2:	bd10      	pop	{r4, pc}
    SpiHandle.Instance = DISCOVERY_SPIx;
 80015e4:	4c0d      	ldr	r4, [pc, #52]	; (800161c <SPIx_Init+0x44>)
 80015e6:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <SPIx_Init+0x48>)
 80015e8:	6023      	str	r3, [r4, #0]
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80015ea:	2318      	movs	r3, #24
 80015ec:	61e3      	str	r3, [r4, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
 80015ee:	2300      	movs	r3, #0
 80015f0:	60a3      	str	r3, [r4, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015f2:	6163      	str	r3, [r4, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015f4:	6123      	str	r3, [r4, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80015f6:	62a3      	str	r3, [r4, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 80015f8:	2207      	movs	r2, #7
 80015fa:	62e2      	str	r2, [r4, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 80015fc:	60e3      	str	r3, [r4, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015fe:	6223      	str	r3, [r4, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 8001600:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001604:	61a2      	str	r2, [r4, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
 8001606:	6263      	str	r3, [r4, #36]	; 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8001608:	f44f 7382 	mov.w	r3, #260	; 0x104
 800160c:	6063      	str	r3, [r4, #4]
    SPIx_MspInit();
 800160e:	f7ff ffb7 	bl	8001580 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001612:	4620      	mov	r0, r4
 8001614:	f002 fcee 	bl	8003ff4 <HAL_SPI_Init>
}
 8001618:	e7e3      	b.n	80015e2 <SPIx_Init+0xa>
 800161a:	bf00      	nop
 800161c:	20000460 	.word	0x20000460
 8001620:	40013000 	.word	0x40013000

08001624 <SPIx_Error>:
{
 8001624:	b508      	push	{r3, lr}
  HAL_SPI_DeInit(&SpiHandle);
 8001626:	4803      	ldr	r0, [pc, #12]	; (8001634 <SPIx_Error+0x10>)
 8001628:	f002 fd24 	bl	8004074 <HAL_SPI_DeInit>
  SPIx_Init();
 800162c:	f7ff ffd4 	bl	80015d8 <SPIx_Init>
}
 8001630:	bd08      	pop	{r3, pc}
 8001632:	bf00      	nop
 8001634:	20000460 	.word	0x20000460

08001638 <SPIx_WriteRead>:
{
 8001638:	b500      	push	{lr}
 800163a:	b087      	sub	sp, #28
 800163c:	f88d 000f 	strb.w	r0, [sp, #15]
  uint8_t receivedbyte = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	f88d 3017 	strb.w	r3, [sp, #23]
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8001646:	4b0a      	ldr	r3, [pc, #40]	; (8001670 <SPIx_WriteRead+0x38>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	9300      	str	r3, [sp, #0]
 800164c:	2301      	movs	r3, #1
 800164e:	f10d 0217 	add.w	r2, sp, #23
 8001652:	f10d 010f 	add.w	r1, sp, #15
 8001656:	4807      	ldr	r0, [pc, #28]	; (8001674 <SPIx_WriteRead+0x3c>)
 8001658:	f002 fd22 	bl	80040a0 <HAL_SPI_TransmitReceive>
 800165c:	b920      	cbnz	r0, 8001668 <SPIx_WriteRead+0x30>
}
 800165e:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001662:	b007      	add	sp, #28
 8001664:	f85d fb04 	ldr.w	pc, [sp], #4
    SPIx_Error();
 8001668:	f7ff ffdc 	bl	8001624 <SPIx_Error>
 800166c:	e7f7      	b.n	800165e <SPIx_WriteRead+0x26>
 800166e:	bf00      	nop
 8001670:	20000070 	.word	0x20000070
 8001674:	20000460 	.word	0x20000460

08001678 <ACCELERO_IO_Init>:

/**
  * @brief  Configures the Accelerometer SPI interface.
  */
void ACCELERO_IO_Init(void)
{
 8001678:	b570      	push	{r4, r5, r6, lr}
 800167a:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Accelerometer Control pins --------------------------------*/
  /* Enable CS GPIO clock and configure GPIO pin for Accelerometer Chip select */  
  ACCELERO_CS_GPIO_CLK_ENABLE();
 800167c:	2100      	movs	r1, #0
 800167e:	9100      	str	r1, [sp, #0]
 8001680:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <ACCELERO_IO_Init+0x44>)
 8001682:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001684:	f042 0210 	orr.w	r2, r2, #16
 8001688:	631a      	str	r2, [r3, #48]	; 0x30
 800168a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168c:	f003 0310 	and.w	r3, r3, #16
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	9b00      	ldr	r3, [sp, #0]
  
  /* Configure GPIO PIN for LIS Chip select */
  GPIO_InitStructure.Pin = ACCELERO_CS_PIN;
 8001694:	2608      	movs	r6, #8
 8001696:	9601      	str	r6, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001698:	2401      	movs	r4, #1
 800169a:	9402      	str	r4, [sp, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800169c:	9103      	str	r1, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 800169e:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(ACCELERO_CS_GPIO_PORT, &GPIO_InitStructure);
 80016a0:	4d07      	ldr	r5, [pc, #28]	; (80016c0 <ACCELERO_IO_Init+0x48>)
 80016a2:	a901      	add	r1, sp, #4
 80016a4:	4628      	mov	r0, r5
 80016a6:	f000 fd0d 	bl	80020c4 <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  ACCELERO_CS_HIGH();
 80016aa:	4622      	mov	r2, r4
 80016ac:	4631      	mov	r1, r6
 80016ae:	4628      	mov	r0, r5
 80016b0:	f000 fe91 	bl	80023d6 <HAL_GPIO_WritePin>
  
  SPIx_Init();
 80016b4:	f7ff ff90 	bl	80015d8 <SPIx_Init>
}
 80016b8:	b006      	add	sp, #24
 80016ba:	bd70      	pop	{r4, r5, r6, pc}
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40021000 	.word	0x40021000

080016c4 <ACCELERO_IO_ITConfig>:
/**
  * @brief  Configures the Accelerometer INT2.
  *         EXTI0 is already used by user button so INT1 is not configured here.
  */
void ACCELERO_IO_ITConfig(void)
{
 80016c4:	b510      	push	{r4, lr}
 80016c6:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT2 GPIO clock and configure GPIO PINs to detect Interrupts */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 80016c8:	2400      	movs	r4, #0
 80016ca:	9400      	str	r4, [sp, #0]
 80016cc:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <ACCELERO_IO_ITConfig+0x44>)
 80016ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016d0:	f042 0210 	orr.w	r2, r2, #16
 80016d4:	631a      	str	r2, [r3, #48]	; 0x30
 80016d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d8:	f003 0310 	and.w	r3, r3, #16
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	9b00      	ldr	r3, [sp, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT2_PIN;
 80016e0:	2302      	movs	r3, #2
 80016e2:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 80016e4:	4a09      	ldr	r2, [pc, #36]	; (800170c <ACCELERO_IO_ITConfig+0x48>)
 80016e6:	9202      	str	r2, [sp, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80016e8:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80016ea:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 80016ec:	a901      	add	r1, sp, #4
 80016ee:	4808      	ldr	r0, [pc, #32]	; (8001710 <ACCELERO_IO_ITConfig+0x4c>)
 80016f0:	f000 fce8 	bl	80020c4 <HAL_GPIO_Init>
  
  /* Enable and set Accelerometer INT2 to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)ACCELERO_INT2_EXTI_IRQn, 0x0F, 0);
 80016f4:	4622      	mov	r2, r4
 80016f6:	210f      	movs	r1, #15
 80016f8:	2007      	movs	r0, #7
 80016fa:	f000 facb 	bl	8001c94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)ACCELERO_INT2_EXTI_IRQn);
 80016fe:	2007      	movs	r0, #7
 8001700:	f000 fb00 	bl	8001d04 <HAL_NVIC_EnableIRQ>
}
 8001704:	b006      	add	sp, #24
 8001706:	bd10      	pop	{r4, pc}
 8001708:	40023800 	.word	0x40023800
 800170c:	10110000 	.word	0x10110000
 8001710:	40021000 	.word	0x40021000

08001714 <ACCELERO_IO_Write>:
  * @param  pBuffer: pointer to the buffer containing the data to be written to the Accelerometer.
  * @param  WriteAddr: Accelerometer's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void ACCELERO_IO_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8001714:	b570      	push	{r4, r5, r6, lr}
 8001716:	4605      	mov	r5, r0
 8001718:	460e      	mov	r6, r1
 800171a:	4614      	mov	r4, r2
  /* Configure the MS bit: 
     - When 0, the address will remain unchanged in multiple read/write commands.
     - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 800171c:	2a01      	cmp	r2, #1
 800171e:	d901      	bls.n	8001724 <ACCELERO_IO_Write+0x10>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8001720:	f041 0640 	orr.w	r6, r1, #64	; 0x40
  }
  /* Set chip select Low at the start of the transmission */
  ACCELERO_CS_LOW();
 8001724:	2200      	movs	r2, #0
 8001726:	2108      	movs	r1, #8
 8001728:	480a      	ldr	r0, [pc, #40]	; (8001754 <ACCELERO_IO_Write+0x40>)
 800172a:	f000 fe54 	bl	80023d6 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 800172e:	4630      	mov	r0, r6
 8001730:	f7ff ff82 	bl	8001638 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8001734:	e005      	b.n	8001742 <ACCELERO_IO_Write+0x2e>
  {
    SPIx_WriteRead(*pBuffer);
 8001736:	f815 0b01 	ldrb.w	r0, [r5], #1
 800173a:	f7ff ff7d 	bl	8001638 <SPIx_WriteRead>
    NumByteToWrite--;
 800173e:	3c01      	subs	r4, #1
 8001740:	b2a4      	uxth	r4, r4
  while(NumByteToWrite >= 0x01)
 8001742:	2c00      	cmp	r4, #0
 8001744:	d1f7      	bne.n	8001736 <ACCELERO_IO_Write+0x22>
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  ACCELERO_CS_HIGH();
 8001746:	2201      	movs	r2, #1
 8001748:	2108      	movs	r1, #8
 800174a:	4802      	ldr	r0, [pc, #8]	; (8001754 <ACCELERO_IO_Write+0x40>)
 800174c:	f000 fe43 	bl	80023d6 <HAL_GPIO_WritePin>
}
 8001750:	bd70      	pop	{r4, r5, r6, pc}
 8001752:	bf00      	nop
 8001754:	40021000 	.word	0x40021000

08001758 <ACCELERO_IO_Read>:
  * @param  pBuffer: pointer to the buffer that receives the data read from the Accelerometer.
  * @param  ReadAddr: Accelerometer's internal address to read from.
  * @param  NumByteToRead: number of bytes to read from the Accelerometer.
  */
void ACCELERO_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8001758:	b570      	push	{r4, r5, r6, lr}
 800175a:	4605      	mov	r5, r0
 800175c:	4614      	mov	r4, r2
  if(NumByteToRead > 0x01)
 800175e:	2a01      	cmp	r2, #1
 8001760:	d90a      	bls.n	8001778 <ACCELERO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8001762:	f041 06c0 	orr.w	r6, r1, #192	; 0xc0
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
  }
  /* Set chip select Low at the start of the transmission */
  ACCELERO_CS_LOW();
 8001766:	2200      	movs	r2, #0
 8001768:	2108      	movs	r1, #8
 800176a:	480c      	ldr	r0, [pc, #48]	; (800179c <ACCELERO_IO_Read+0x44>)
 800176c:	f000 fe33 	bl	80023d6 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8001770:	4630      	mov	r0, r6
 8001772:	f7ff ff61 	bl	8001638 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8001776:	e009      	b.n	800178c <ACCELERO_IO_Read+0x34>
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8001778:	f041 0680 	orr.w	r6, r1, #128	; 0x80
 800177c:	e7f3      	b.n	8001766 <ACCELERO_IO_Read+0xe>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to ACCELEROMETER (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 800177e:	2000      	movs	r0, #0
 8001780:	f7ff ff5a 	bl	8001638 <SPIx_WriteRead>
 8001784:	f805 0b01 	strb.w	r0, [r5], #1
    NumByteToRead--;
 8001788:	3c01      	subs	r4, #1
 800178a:	b2a4      	uxth	r4, r4
  while(NumByteToRead > 0x00)
 800178c:	2c00      	cmp	r4, #0
 800178e:	d1f6      	bne.n	800177e <ACCELERO_IO_Read+0x26>
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  ACCELERO_CS_HIGH();
 8001790:	2201      	movs	r2, #1
 8001792:	2108      	movs	r1, #8
 8001794:	4801      	ldr	r0, [pc, #4]	; (800179c <ACCELERO_IO_Read+0x44>)
 8001796:	f000 fe1e 	bl	80023d6 <HAL_GPIO_WritePin>
}
 800179a:	bd70      	pop	{r4, r5, r6, pc}
 800179c:	40021000 	.word	0x40021000

080017a0 <BSP_ACCELERO_Init>:
/**
  * @brief  Setx Accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{ 
 80017a0:	b530      	push	{r4, r5, lr}
 80017a2:	b087      	sub	sp, #28
  uint8_t ret = ACCELERO_ERROR;
  uint16_t ctrl = 0x0000;
  LIS302DL_InitTypeDef         lis302dl_initstruct;
  LIS302DL_FilterConfigTypeDef lis302dl_filter = {0,0,0};
 80017a4:	2300      	movs	r3, #0
 80017a6:	f88d 300c 	strb.w	r3, [sp, #12]
 80017aa:	f88d 300d 	strb.w	r3, [sp, #13]
 80017ae:	f88d 300e 	strb.w	r3, [sp, #14]
  LIS3DSH_InitTypeDef          l1s3dsh_InitStruct;

  if(Lis302dlDrv.ReadID() == I_AM_LIS302DL)
 80017b2:	4b23      	ldr	r3, [pc, #140]	; (8001840 <BSP_ACCELERO_Init+0xa0>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	4798      	blx	r3
 80017b8:	283b      	cmp	r0, #59	; 0x3b
 80017ba:	d007      	beq.n	80017cc <BSP_ACCELERO_Init+0x2c>
    /* Configure the accelerometer LPF main parameters */
    AcceleroDrv->FilterConfig(ctrl);

    ret = ACCELERO_OK;
  }
  else if(Lis3dshDrv.ReadID() == I_AM_LIS3DSH)
 80017bc:	4b21      	ldr	r3, [pc, #132]	; (8001844 <BSP_ACCELERO_Init+0xa4>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	4798      	blx	r3
 80017c2:	283f      	cmp	r0, #63	; 0x3f
 80017c4:	d024      	beq.n	8001810 <BSP_ACCELERO_Init+0x70>
    ret = ACCELERO_OK;
  }

  else
  {
    ret = ACCELERO_ERROR;
 80017c6:	2001      	movs	r0, #1
  }
  return ret;
}
 80017c8:	b007      	add	sp, #28
 80017ca:	bd30      	pop	{r4, r5, pc}
    AcceleroDrv = &Lis302dlDrv;
 80017cc:	4d1e      	ldr	r5, [pc, #120]	; (8001848 <BSP_ACCELERO_Init+0xa8>)
 80017ce:	4b1c      	ldr	r3, [pc, #112]	; (8001840 <BSP_ACCELERO_Init+0xa0>)
 80017d0:	602b      	str	r3, [r5, #0]
    lis302dl_initstruct.Power_Mode = LIS302DL_LOWPOWERMODE_ACTIVE;
 80017d2:	2240      	movs	r2, #64	; 0x40
 80017d4:	f88d 2010 	strb.w	r2, [sp, #16]
    lis302dl_initstruct.Output_DataRate = LIS302DL_DATARATE_100;
 80017d8:	2400      	movs	r4, #0
 80017da:	f88d 4011 	strb.w	r4, [sp, #17]
    lis302dl_initstruct.Axes_Enable = LIS302DL_XYZ_ENABLE;
 80017de:	2207      	movs	r2, #7
 80017e0:	f88d 2012 	strb.w	r2, [sp, #18]
    lis302dl_initstruct.Full_Scale = LIS302DL_FULLSCALE_2_3;
 80017e4:	f88d 4013 	strb.w	r4, [sp, #19]
    lis302dl_initstruct.Self_Test = LIS302DL_SELFTEST_NORMAL;
 80017e8:	f88d 4014 	strb.w	r4, [sp, #20]
    AcceleroDrv->Init(ctrl);
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2047      	movs	r0, #71	; 0x47
 80017f0:	4798      	blx	r3
    lis302dl_filter.HighPassFilter_Data_Selection = LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER;
 80017f2:	2320      	movs	r3, #32
 80017f4:	f88d 300c 	strb.w	r3, [sp, #12]
    lis302dl_filter.HighPassFilter_CutOff_Frequency = LIS302DL_HIGHPASSFILTER_LEVEL_1;
 80017f8:	2301      	movs	r3, #1
 80017fa:	f88d 300d 	strb.w	r3, [sp, #13]
    lis302dl_filter.HighPassFilter_Interrupt = LIS302DL_HIGHPASSFILTERINTERRUPT_1_2;
 80017fe:	230c      	movs	r3, #12
 8001800:	f88d 300e 	strb.w	r3, [sp, #14]
    AcceleroDrv->FilterConfig(ctrl);
 8001804:	682b      	ldr	r3, [r5, #0]
 8001806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001808:	202d      	movs	r0, #45	; 0x2d
 800180a:	4798      	blx	r3
    ret = ACCELERO_OK;
 800180c:	4620      	mov	r0, r4
 800180e:	e7db      	b.n	80017c8 <BSP_ACCELERO_Init+0x28>
    AcceleroDrv = &Lis3dshDrv;
 8001810:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <BSP_ACCELERO_Init+0xa4>)
 8001812:	4a0d      	ldr	r2, [pc, #52]	; (8001848 <BSP_ACCELERO_Init+0xa8>)
 8001814:	6013      	str	r3, [r2, #0]
    l1s3dsh_InitStruct.Output_DataRate = LIS3DSH_DATARATE_100;
 8001816:	2260      	movs	r2, #96	; 0x60
 8001818:	f88d 2004 	strb.w	r2, [sp, #4]
    l1s3dsh_InitStruct.Axes_Enable = LIS3DSH_XYZ_ENABLE;
 800181c:	2207      	movs	r2, #7
 800181e:	f88d 2005 	strb.w	r2, [sp, #5]
    l1s3dsh_InitStruct.SPI_Wire = LIS3DSH_SERIALINTERFACE_4WIRE;
 8001822:	2400      	movs	r4, #0
 8001824:	f88d 4006 	strb.w	r4, [sp, #6]
    l1s3dsh_InitStruct.Self_Test = LIS3DSH_SELFTEST_NORMAL;
 8001828:	f88d 4007 	strb.w	r4, [sp, #7]
    l1s3dsh_InitStruct.Full_Scale = LIS3DSH_FULLSCALE_2;
 800182c:	f88d 4008 	strb.w	r4, [sp, #8]
    l1s3dsh_InitStruct.Filter_BW = LIS3DSH_FILTER_BW_800;
 8001830:	f88d 4009 	strb.w	r4, [sp, #9]
    AcceleroDrv->Init(ctrl);
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2067      	movs	r0, #103	; 0x67
 8001838:	4798      	blx	r3
    ret = ACCELERO_OK;
 800183a:	4620      	mov	r0, r4
 800183c:	e7c4      	b.n	80017c8 <BSP_ACCELERO_Init+0x28>
 800183e:	bf00      	nop
 8001840:	20000008 	.word	0x20000008
 8001844:	2000003c 	.word	0x2000003c
 8001848:	200004b8 	.word	0x200004b8

0800184c <BSP_ACCELERO_GetXYZ>:
  */
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
  int16_t SwitchXY = 0;
  
  if(AcceleroDrv->GetXYZ != NULL)
 800184c:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <BSP_ACCELERO_GetXYZ+0x2c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	b17b      	cbz	r3, 8001874 <BSP_ACCELERO_GetXYZ+0x28>
{
 8001854:	b510      	push	{r4, lr}
 8001856:	4604      	mov	r4, r0
  {   
    AcceleroDrv->GetXYZ(pDataXYZ);
 8001858:	4798      	blx	r3
    
    /* Switch X and Y Axes in case of LIS302DL MEMS */
    if(AcceleroDrv == &Lis302dlDrv)
 800185a:	4b07      	ldr	r3, [pc, #28]	; (8001878 <BSP_ACCELERO_GetXYZ+0x2c>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	4b07      	ldr	r3, [pc, #28]	; (800187c <BSP_ACCELERO_GetXYZ+0x30>)
 8001860:	429a      	cmp	r2, r3
 8001862:	d000      	beq.n	8001866 <BSP_ACCELERO_GetXYZ+0x1a>
      pDataXYZ[0] = pDataXYZ[1];
      /* Invert Y Axis to be compliant with LIS3DSH MEMS */
      pDataXYZ[1] = -SwitchXY;
    } 
  }
}
 8001864:	bd10      	pop	{r4, pc}
      SwitchXY  = pDataXYZ[0];
 8001866:	f9b4 3000 	ldrsh.w	r3, [r4]
      pDataXYZ[0] = pDataXYZ[1];
 800186a:	8862      	ldrh	r2, [r4, #2]
 800186c:	8022      	strh	r2, [r4, #0]
      pDataXYZ[1] = -SwitchXY;
 800186e:	425b      	negs	r3, r3
 8001870:	8063      	strh	r3, [r4, #2]
}
 8001872:	e7f7      	b.n	8001864 <BSP_ACCELERO_GetXYZ+0x18>
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	200004b8 	.word	0x200004b8
 800187c:	20000008 	.word	0x20000008

08001880 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001880:	b510      	push	{r4, lr}
 8001882:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001884:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <HAL_InitTick+0x40>)
 8001886:	7818      	ldrb	r0, [r3, #0]
 8001888:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800188c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001890:	4a0c      	ldr	r2, [pc, #48]	; (80018c4 <HAL_InitTick+0x44>)
 8001892:	6810      	ldr	r0, [r2, #0]
 8001894:	fbb0 f0f3 	udiv	r0, r0, r3
 8001898:	f000 fa42 	bl	8001d20 <HAL_SYSTICK_Config>
 800189c:	b968      	cbnz	r0, 80018ba <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800189e:	2c0f      	cmp	r4, #15
 80018a0:	d901      	bls.n	80018a6 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80018a2:	2001      	movs	r0, #1
 80018a4:	e00a      	b.n	80018bc <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018a6:	2200      	movs	r2, #0
 80018a8:	4621      	mov	r1, r4
 80018aa:	f04f 30ff 	mov.w	r0, #4294967295
 80018ae:	f000 f9f1 	bl	8001c94 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018b2:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <HAL_InitTick+0x48>)
 80018b4:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80018b6:	2000      	movs	r0, #0
 80018b8:	e000      	b.n	80018bc <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80018ba:	2001      	movs	r0, #1
}
 80018bc:	bd10      	pop	{r4, pc}
 80018be:	bf00      	nop
 80018c0:	20000074 	.word	0x20000074
 80018c4:	20000004 	.word	0x20000004
 80018c8:	20000078 	.word	0x20000078

080018cc <HAL_Init>:
{
 80018cc:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018ce:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <HAL_Init+0x30>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018d6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80018de:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018e6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018e8:	2003      	movs	r0, #3
 80018ea:	f000 f9c1 	bl	8001c70 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ee:	2000      	movs	r0, #0
 80018f0:	f7ff ffc6 	bl	8001880 <HAL_InitTick>
  HAL_MspInit();
 80018f4:	f7ff f9f4 	bl	8000ce0 <HAL_MspInit>
}
 80018f8:	2000      	movs	r0, #0
 80018fa:	bd08      	pop	{r3, pc}
 80018fc:	40023c00 	.word	0x40023c00

08001900 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001900:	4a03      	ldr	r2, [pc, #12]	; (8001910 <HAL_IncTick+0x10>)
 8001902:	6811      	ldr	r1, [r2, #0]
 8001904:	4b03      	ldr	r3, [pc, #12]	; (8001914 <HAL_IncTick+0x14>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	440b      	add	r3, r1
 800190a:	6013      	str	r3, [r2, #0]
}
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	200004bc 	.word	0x200004bc
 8001914:	20000074 	.word	0x20000074

08001918 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001918:	4b01      	ldr	r3, [pc, #4]	; (8001920 <HAL_GetTick+0x8>)
 800191a:	6818      	ldr	r0, [r3, #0]
}
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	200004bc 	.word	0x200004bc

08001924 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001924:	b538      	push	{r3, r4, r5, lr}
 8001926:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001928:	f7ff fff6 	bl	8001918 <HAL_GetTick>
 800192c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800192e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001932:	d002      	beq.n	800193a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001934:	4b04      	ldr	r3, [pc, #16]	; (8001948 <HAL_Delay+0x24>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800193a:	f7ff ffed 	bl	8001918 <HAL_GetTick>
 800193e:	1b40      	subs	r0, r0, r5
 8001940:	42a0      	cmp	r0, r4
 8001942:	d3fa      	bcc.n	800193a <HAL_Delay+0x16>
  {
  }
}
 8001944:	bd38      	pop	{r3, r4, r5, pc}
 8001946:	bf00      	nop
 8001948:	20000074 	.word	0x20000074

0800194c <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800194c:	4b4a      	ldr	r3, [pc, #296]	; (8001a78 <ADC_Init+0x12c>)
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001954:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	6841      	ldr	r1, [r0, #4]
 800195a:	430a      	orrs	r2, r1
 800195c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800195e:	6802      	ldr	r2, [r0, #0]
 8001960:	6853      	ldr	r3, [r2, #4]
 8001962:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001966:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001968:	6802      	ldr	r2, [r0, #0]
 800196a:	6853      	ldr	r3, [r2, #4]
 800196c:	6901      	ldr	r1, [r0, #16]
 800196e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001972:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001974:	6802      	ldr	r2, [r0, #0]
 8001976:	6853      	ldr	r3, [r2, #4]
 8001978:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800197c:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800197e:	6802      	ldr	r2, [r0, #0]
 8001980:	6853      	ldr	r3, [r2, #4]
 8001982:	6881      	ldr	r1, [r0, #8]
 8001984:	430b      	orrs	r3, r1
 8001986:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001988:	6802      	ldr	r2, [r0, #0]
 800198a:	6893      	ldr	r3, [r2, #8]
 800198c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001990:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001992:	6802      	ldr	r2, [r0, #0]
 8001994:	6893      	ldr	r3, [r2, #8]
 8001996:	68c1      	ldr	r1, [r0, #12]
 8001998:	430b      	orrs	r3, r1
 800199a:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800199c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800199e:	4b37      	ldr	r3, [pc, #220]	; (8001a7c <ADC_Init+0x130>)
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d057      	beq.n	8001a54 <ADC_Init+0x108>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019a4:	6802      	ldr	r2, [r0, #0]
 80019a6:	6893      	ldr	r3, [r2, #8]
 80019a8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80019ac:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80019ae:	6802      	ldr	r2, [r0, #0]
 80019b0:	6893      	ldr	r3, [r2, #8]
 80019b2:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80019b4:	430b      	orrs	r3, r1
 80019b6:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019b8:	6802      	ldr	r2, [r0, #0]
 80019ba:	6893      	ldr	r3, [r2, #8]
 80019bc:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80019c0:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80019c2:	6802      	ldr	r2, [r0, #0]
 80019c4:	6893      	ldr	r3, [r2, #8]
 80019c6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80019c8:	430b      	orrs	r3, r1
 80019ca:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80019cc:	6802      	ldr	r2, [r0, #0]
 80019ce:	6893      	ldr	r3, [r2, #8]
 80019d0:	f023 0302 	bic.w	r3, r3, #2
 80019d4:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80019d6:	6802      	ldr	r2, [r0, #0]
 80019d8:	6893      	ldr	r3, [r2, #8]
 80019da:	7e01      	ldrb	r1, [r0, #24]
 80019dc:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80019e0:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80019e2:	f890 3020 	ldrb.w	r3, [r0, #32]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d03f      	beq.n	8001a6a <ADC_Init+0x11e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80019ea:	6802      	ldr	r2, [r0, #0]
 80019ec:	6853      	ldr	r3, [r2, #4]
 80019ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019f2:	6053      	str	r3, [r2, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80019f4:	6802      	ldr	r2, [r0, #0]
 80019f6:	6853      	ldr	r3, [r2, #4]
 80019f8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80019fc:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80019fe:	6801      	ldr	r1, [r0, #0]
 8001a00:	684b      	ldr	r3, [r1, #4]
 8001a02:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001a04:	3a01      	subs	r2, #1
 8001a06:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8001a0a:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a0c:	6802      	ldr	r2, [r0, #0]
 8001a0e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001a10:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001a14:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a16:	6801      	ldr	r1, [r0, #0]
 8001a18:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001a1a:	69c2      	ldr	r2, [r0, #28]
 8001a1c:	3a01      	subs	r2, #1
 8001a1e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8001a22:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a24:	6802      	ldr	r2, [r0, #0]
 8001a26:	6893      	ldr	r3, [r2, #8]
 8001a28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001a2c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a2e:	6802      	ldr	r2, [r0, #0]
 8001a30:	6893      	ldr	r3, [r2, #8]
 8001a32:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 8001a36:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8001a3a:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a3c:	6802      	ldr	r2, [r0, #0]
 8001a3e:	6893      	ldr	r3, [r2, #8]
 8001a40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a44:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a46:	6802      	ldr	r2, [r0, #0]
 8001a48:	6893      	ldr	r3, [r2, #8]
 8001a4a:	6941      	ldr	r1, [r0, #20]
 8001a4c:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8001a50:	6093      	str	r3, [r2, #8]
}
 8001a52:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a54:	6802      	ldr	r2, [r0, #0]
 8001a56:	6893      	ldr	r3, [r2, #8]
 8001a58:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001a5c:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a5e:	6802      	ldr	r2, [r0, #0]
 8001a60:	6893      	ldr	r3, [r2, #8]
 8001a62:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001a66:	6093      	str	r3, [r2, #8]
 8001a68:	e7b0      	b.n	80019cc <ADC_Init+0x80>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a6a:	6802      	ldr	r2, [r0, #0]
 8001a6c:	6853      	ldr	r3, [r2, #4]
 8001a6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a72:	6053      	str	r3, [r2, #4]
 8001a74:	e7ca      	b.n	8001a0c <ADC_Init+0xc0>
 8001a76:	bf00      	nop
 8001a78:	40012300 	.word	0x40012300
 8001a7c:	0f000001 	.word	0x0f000001

08001a80 <HAL_ADC_Init>:
  if(hadc == NULL)
 8001a80:	b338      	cbz	r0, 8001ad2 <HAL_ADC_Init+0x52>
{
 8001a82:	b510      	push	{r4, lr}
 8001a84:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a86:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001a88:	b143      	cbz	r3, 8001a9c <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a8c:	f013 0f10 	tst.w	r3, #16
 8001a90:	d00b      	beq.n	8001aaa <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 8001a92:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001a94:	2300      	movs	r3, #0
 8001a96:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001a9a:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8001a9c:	f7ff f940 	bl	8000d20 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 8001aa4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001aa8:	e7ef      	b.n	8001a8a <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8001aaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001aac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ab0:	f023 0302 	bic.w	r3, r3, #2
 8001ab4:	f043 0302 	orr.w	r3, r3, #2
 8001ab8:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 8001aba:	4620      	mov	r0, r4
 8001abc:	f7ff ff46 	bl	800194c <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001ac4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ac6:	f023 0303 	bic.w	r3, r3, #3
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	6423      	str	r3, [r4, #64]	; 0x40
 8001ad0:	e7e0      	b.n	8001a94 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 8001ad2:	2001      	movs	r0, #1
}
 8001ad4:	4770      	bx	lr
	...

08001ad8 <HAL_ADC_ConfigChannel>:
{
 8001ad8:	b430      	push	{r4, r5}
 8001ada:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8001adc:	2300      	movs	r3, #0
 8001ade:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001ae0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	f000 80bb 	beq.w	8001c60 <HAL_ADC_ConfigChannel+0x188>
 8001aea:	2301      	movs	r3, #1
 8001aec:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001af0:	680b      	ldr	r3, [r1, #0]
 8001af2:	2b09      	cmp	r3, #9
 8001af4:	d941      	bls.n	8001b7a <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001af6:	6804      	ldr	r4, [r0, #0]
 8001af8:	68e2      	ldr	r2, [r4, #12]
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001b00:	3b1e      	subs	r3, #30
 8001b02:	f04f 0c07 	mov.w	ip, #7
 8001b06:	fa0c f303 	lsl.w	r3, ip, r3
 8001b0a:	ea22 0303 	bic.w	r3, r2, r3
 8001b0e:	60e3      	str	r3, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b10:	6804      	ldr	r4, [r0, #0]
 8001b12:	68e2      	ldr	r2, [r4, #12]
 8001b14:	880b      	ldrh	r3, [r1, #0]
 8001b16:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001b1a:	3b1e      	subs	r3, #30
 8001b1c:	688d      	ldr	r5, [r1, #8]
 8001b1e:	fa05 f303 	lsl.w	r3, r5, r3
 8001b22:	4313      	orrs	r3, r2
 8001b24:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 8001b26:	684b      	ldr	r3, [r1, #4]
 8001b28:	2b06      	cmp	r3, #6
 8001b2a:	d83d      	bhi.n	8001ba8 <HAL_ADC_ConfigChannel+0xd0>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b2c:	6804      	ldr	r4, [r0, #0]
 8001b2e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001b30:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001b34:	3b05      	subs	r3, #5
 8001b36:	f04f 0c1f 	mov.w	ip, #31
 8001b3a:	fa0c f303 	lsl.w	r3, ip, r3
 8001b3e:	ea22 0303 	bic.w	r3, r2, r3
 8001b42:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b44:	6804      	ldr	r4, [r0, #0]
 8001b46:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001b48:	684b      	ldr	r3, [r1, #4]
 8001b4a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001b4e:	3b05      	subs	r3, #5
 8001b50:	f8b1 c000 	ldrh.w	ip, [r1]
 8001b54:	fa0c f303 	lsl.w	r3, ip, r3
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b5c:	6802      	ldr	r2, [r0, #0]
 8001b5e:	4b41      	ldr	r3, [pc, #260]	; (8001c64 <HAL_ADC_ConfigChannel+0x18c>)
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d051      	beq.n	8001c08 <HAL_ADC_ConfigChannel+0x130>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b64:	6802      	ldr	r2, [r0, #0]
 8001b66:	4b3f      	ldr	r3, [pc, #252]	; (8001c64 <HAL_ADC_ConfigChannel+0x18c>)
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d056      	beq.n	8001c1a <HAL_ADC_ConfigChannel+0x142>
  __HAL_UNLOCK(hadc);
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001b72:	4618      	mov	r0, r3
}
 8001b74:	b002      	add	sp, #8
 8001b76:	bc30      	pop	{r4, r5}
 8001b78:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b7a:	6804      	ldr	r4, [r0, #0]
 8001b7c:	6922      	ldr	r2, [r4, #16]
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001b84:	f04f 0c07 	mov.w	ip, #7
 8001b88:	fa0c f303 	lsl.w	r3, ip, r3
 8001b8c:	ea22 0303 	bic.w	r3, r2, r3
 8001b90:	6123      	str	r3, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b92:	6804      	ldr	r4, [r0, #0]
 8001b94:	6922      	ldr	r2, [r4, #16]
 8001b96:	880b      	ldrh	r3, [r1, #0]
 8001b98:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001b9c:	688d      	ldr	r5, [r1, #8]
 8001b9e:	fa05 f303 	lsl.w	r3, r5, r3
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	6123      	str	r3, [r4, #16]
 8001ba6:	e7be      	b.n	8001b26 <HAL_ADC_ConfigChannel+0x4e>
  else if (sConfig->Rank < 13U)
 8001ba8:	2b0c      	cmp	r3, #12
 8001baa:	d816      	bhi.n	8001bda <HAL_ADC_ConfigChannel+0x102>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001bac:	6805      	ldr	r5, [r0, #0]
 8001bae:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001bb0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001bb4:	3b23      	subs	r3, #35	; 0x23
 8001bb6:	241f      	movs	r4, #31
 8001bb8:	fa04 f303 	lsl.w	r3, r4, r3
 8001bbc:	ea22 0303 	bic.w	r3, r2, r3
 8001bc0:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001bc2:	6805      	ldr	r5, [r0, #0]
 8001bc4:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001bc6:	684b      	ldr	r3, [r1, #4]
 8001bc8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001bcc:	3b23      	subs	r3, #35	; 0x23
 8001bce:	880c      	ldrh	r4, [r1, #0]
 8001bd0:	fa04 f303 	lsl.w	r3, r4, r3
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	632b      	str	r3, [r5, #48]	; 0x30
 8001bd8:	e7c0      	b.n	8001b5c <HAL_ADC_ConfigChannel+0x84>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001bda:	6805      	ldr	r5, [r0, #0]
 8001bdc:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001bde:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001be2:	3b41      	subs	r3, #65	; 0x41
 8001be4:	241f      	movs	r4, #31
 8001be6:	fa04 f303 	lsl.w	r3, r4, r3
 8001bea:	ea22 0303 	bic.w	r3, r2, r3
 8001bee:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001bf0:	6805      	ldr	r5, [r0, #0]
 8001bf2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001bf4:	684b      	ldr	r3, [r1, #4]
 8001bf6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001bfa:	3b41      	subs	r3, #65	; 0x41
 8001bfc:	880c      	ldrh	r4, [r1, #0]
 8001bfe:	fa04 f303 	lsl.w	r3, r4, r3
 8001c02:	4313      	orrs	r3, r2
 8001c04:	62eb      	str	r3, [r5, #44]	; 0x2c
 8001c06:	e7a9      	b.n	8001b5c <HAL_ADC_ConfigChannel+0x84>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c08:	680b      	ldr	r3, [r1, #0]
 8001c0a:	2b12      	cmp	r3, #18
 8001c0c:	d1aa      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x8c>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c0e:	4a16      	ldr	r2, [pc, #88]	; (8001c68 <HAL_ADC_ConfigChannel+0x190>)
 8001c10:	6853      	ldr	r3, [r2, #4]
 8001c12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c16:	6053      	str	r3, [r2, #4]
 8001c18:	e7a4      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x8c>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c1a:	680b      	ldr	r3, [r1, #0]
 8001c1c:	3b10      	subs	r3, #16
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d8a4      	bhi.n	8001b6c <HAL_ADC_ConfigChannel+0x94>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c22:	4a11      	ldr	r2, [pc, #68]	; (8001c68 <HAL_ADC_ConfigChannel+0x190>)
 8001c24:	6853      	ldr	r3, [r2, #4]
 8001c26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c2a:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001c2c:	680b      	ldr	r3, [r1, #0]
 8001c2e:	2b10      	cmp	r3, #16
 8001c30:	d19c      	bne.n	8001b6c <HAL_ADC_ConfigChannel+0x94>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c32:	4b0e      	ldr	r3, [pc, #56]	; (8001c6c <HAL_ADC_ConfigChannel+0x194>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 8001c3a:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 8001c3e:	f202 3283 	addw	r2, r2, #899	; 0x383
 8001c42:	fba2 2303 	umull	r2, r3, r2, r3
 8001c46:	0c9b      	lsrs	r3, r3, #18
 8001c48:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8001c50:	e002      	b.n	8001c58 <HAL_ADC_ConfigChannel+0x180>
        counter--;
 8001c52:	9b01      	ldr	r3, [sp, #4]
 8001c54:	3b01      	subs	r3, #1
 8001c56:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8001c58:	9b01      	ldr	r3, [sp, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1f9      	bne.n	8001c52 <HAL_ADC_ConfigChannel+0x17a>
 8001c5e:	e785      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x94>
  __HAL_LOCK(hadc);
 8001c60:	2002      	movs	r0, #2
 8001c62:	e787      	b.n	8001b74 <HAL_ADC_ConfigChannel+0x9c>
 8001c64:	40012000 	.word	0x40012000
 8001c68:	40012300 	.word	0x40012300
 8001c6c:	20000004 	.word	0x20000004

08001c70 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c70:	4a07      	ldr	r2, [pc, #28]	; (8001c90 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001c72:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c74:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c78:	041b      	lsls	r3, r3, #16
 8001c7a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c7c:	0200      	lsls	r0, r0, #8
 8001c7e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c82:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001c84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001c8c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001c8e:	4770      	bx	lr
 8001c90:	e000ed00 	.word	0xe000ed00

08001c94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c94:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c96:	4b19      	ldr	r3, [pc, #100]	; (8001cfc <HAL_NVIC_SetPriority+0x68>)
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c9e:	f1c3 0c07 	rsb	ip, r3, #7
 8001ca2:	f1bc 0f04 	cmp.w	ip, #4
 8001ca6:	bf28      	it	cs
 8001ca8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cac:	f103 0e04 	add.w	lr, r3, #4
 8001cb0:	f1be 0f06 	cmp.w	lr, #6
 8001cb4:	d918      	bls.n	8001ce8 <HAL_NVIC_SetPriority+0x54>
 8001cb6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb8:	f04f 3eff 	mov.w	lr, #4294967295
 8001cbc:	fa0e fc0c 	lsl.w	ip, lr, ip
 8001cc0:	ea21 010c 	bic.w	r1, r1, ip
 8001cc4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc6:	fa0e f303 	lsl.w	r3, lr, r3
 8001cca:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cce:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001cd0:	2800      	cmp	r0, #0
 8001cd2:	db0b      	blt.n	8001cec <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd4:	0109      	lsls	r1, r1, #4
 8001cd6:	b2c9      	uxtb	r1, r1
 8001cd8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001cdc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001ce0:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001ce4:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ce8:	2300      	movs	r3, #0
 8001cea:	e7e5      	b.n	8001cb8 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cec:	f000 000f 	and.w	r0, r0, #15
 8001cf0:	0109      	lsls	r1, r1, #4
 8001cf2:	b2c9      	uxtb	r1, r1
 8001cf4:	4b02      	ldr	r3, [pc, #8]	; (8001d00 <HAL_NVIC_SetPriority+0x6c>)
 8001cf6:	5419      	strb	r1, [r3, r0]
 8001cf8:	e7f4      	b.n	8001ce4 <HAL_NVIC_SetPriority+0x50>
 8001cfa:	bf00      	nop
 8001cfc:	e000ed00 	.word	0xe000ed00
 8001d00:	e000ed14 	.word	0xe000ed14

08001d04 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001d04:	2800      	cmp	r0, #0
 8001d06:	db07      	blt.n	8001d18 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d08:	f000 021f 	and.w	r2, r0, #31
 8001d0c:	0940      	lsrs	r0, r0, #5
 8001d0e:	2301      	movs	r3, #1
 8001d10:	4093      	lsls	r3, r2
 8001d12:	4a02      	ldr	r2, [pc, #8]	; (8001d1c <HAL_NVIC_EnableIRQ+0x18>)
 8001d14:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	e000e100 	.word	0xe000e100

08001d20 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d20:	3801      	subs	r0, #1
 8001d22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001d26:	d20b      	bcs.n	8001d40 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d28:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001d2c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2e:	4a05      	ldr	r2, [pc, #20]	; (8001d44 <HAL_SYSTICK_Config+0x24>)
 8001d30:	21f0      	movs	r1, #240	; 0xf0
 8001d32:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d36:	2000      	movs	r0, #0
 8001d38:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d3a:	2207      	movs	r2, #7
 8001d3c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d3e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001d40:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001d42:	4770      	bx	lr
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d48:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d4a:	6803      	ldr	r3, [r0, #0]
 8001d4c:	b2d9      	uxtb	r1, r3
 8001d4e:	3910      	subs	r1, #16
 8001d50:	4a0c      	ldr	r2, [pc, #48]	; (8001d84 <DMA_CalcBaseAndBitshift+0x3c>)
 8001d52:	fba2 4201 	umull	r4, r2, r2, r1
 8001d56:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d58:	4c0b      	ldr	r4, [pc, #44]	; (8001d88 <DMA_CalcBaseAndBitshift+0x40>)
 8001d5a:	5ca2      	ldrb	r2, [r4, r2]
 8001d5c:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d5e:	295f      	cmp	r1, #95	; 0x5f
 8001d60:	d909      	bls.n	8001d76 <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d66:	f023 0303 	bic.w	r3, r3, #3
 8001d6a:	3304      	adds	r3, #4
 8001d6c:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8001d6e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001d70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d74:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d7a:	f023 0303 	bic.w	r3, r3, #3
 8001d7e:	6583      	str	r3, [r0, #88]	; 0x58
 8001d80:	e7f5      	b.n	8001d6e <DMA_CalcBaseAndBitshift+0x26>
 8001d82:	bf00      	nop
 8001d84:	aaaaaaab 	.word	0xaaaaaaab
 8001d88:	08006a24 	.word	0x08006a24

08001d8c <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d8c:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d8e:	6982      	ldr	r2, [r0, #24]
 8001d90:	b992      	cbnz	r2, 8001db8 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d00a      	beq.n	8001dac <DMA_CheckFifoParam+0x20>
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d002      	beq.n	8001da0 <DMA_CheckFifoParam+0x14>
 8001d9a:	b10b      	cbz	r3, 8001da0 <DMA_CheckFifoParam+0x14>
 8001d9c:	2000      	movs	r0, #0
 8001d9e:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001da0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001da2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001da6:	d128      	bne.n	8001dfa <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8001da8:	2000      	movs	r0, #0
 8001daa:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001dac:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001dae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001db2:	d024      	beq.n	8001dfe <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8001db4:	2000      	movs	r0, #0
 8001db6:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001db8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001dbc:	d009      	beq.n	8001dd2 <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d925      	bls.n	8001e0e <DMA_CheckFifoParam+0x82>
 8001dc2:	2b03      	cmp	r3, #3
 8001dc4:	d125      	bne.n	8001e12 <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dc6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001dc8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001dcc:	d123      	bne.n	8001e16 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8001dce:	2000      	movs	r0, #0
 8001dd0:	4770      	bx	lr
    switch (tmp)
 8001dd2:	2b03      	cmp	r3, #3
 8001dd4:	d803      	bhi.n	8001dde <DMA_CheckFifoParam+0x52>
 8001dd6:	e8df f003 	tbb	[pc, r3]
 8001dda:	0414      	.short	0x0414
 8001ddc:	0a14      	.short	0x0a14
 8001dde:	2000      	movs	r0, #0
 8001de0:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001de2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001de4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001de8:	d10d      	bne.n	8001e06 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8001dea:	2000      	movs	r0, #0
 8001dec:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001dee:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001df0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001df4:	d009      	beq.n	8001e0a <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8001df6:	2000      	movs	r0, #0
 8001df8:	4770      	bx	lr
        status = HAL_ERROR;
 8001dfa:	2001      	movs	r0, #1
 8001dfc:	4770      	bx	lr
        status = HAL_ERROR;
 8001dfe:	2001      	movs	r0, #1
 8001e00:	4770      	bx	lr
      status = HAL_ERROR;
 8001e02:	2001      	movs	r0, #1
 8001e04:	4770      	bx	lr
        status = HAL_ERROR;
 8001e06:	2001      	movs	r0, #1
 8001e08:	4770      	bx	lr
        status = HAL_ERROR;
 8001e0a:	2001      	movs	r0, #1
 8001e0c:	4770      	bx	lr
      status = HAL_ERROR;
 8001e0e:	2001      	movs	r0, #1
 8001e10:	4770      	bx	lr
    switch (tmp)
 8001e12:	2000      	movs	r0, #0
 8001e14:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8001e16:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8001e18:	4770      	bx	lr
	...

08001e1c <HAL_DMA_Init>:
{
 8001e1c:	b570      	push	{r4, r5, r6, lr}
 8001e1e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001e20:	f7ff fd7a 	bl	8001918 <HAL_GetTick>
  if(hdma == NULL)
 8001e24:	2c00      	cmp	r4, #0
 8001e26:	d05b      	beq.n	8001ee0 <HAL_DMA_Init+0xc4>
 8001e28:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e30:	2302      	movs	r3, #2
 8001e32:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001e36:	6822      	ldr	r2, [r4, #0]
 8001e38:	6813      	ldr	r3, [r2, #0]
 8001e3a:	f023 0301 	bic.w	r3, r3, #1
 8001e3e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e40:	6823      	ldr	r3, [r4, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	f012 0f01 	tst.w	r2, #1
 8001e48:	d00a      	beq.n	8001e60 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e4a:	f7ff fd65 	bl	8001918 <HAL_GetTick>
 8001e4e:	1b43      	subs	r3, r0, r5
 8001e50:	2b05      	cmp	r3, #5
 8001e52:	d9f5      	bls.n	8001e40 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e54:	2320      	movs	r3, #32
 8001e56:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e58:	2003      	movs	r0, #3
 8001e5a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001e5e:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8001e60:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e62:	4820      	ldr	r0, [pc, #128]	; (8001ee4 <HAL_DMA_Init+0xc8>)
 8001e64:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e66:	6861      	ldr	r1, [r4, #4]
 8001e68:	68a2      	ldr	r2, [r4, #8]
 8001e6a:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e6c:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e6e:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e70:	6921      	ldr	r1, [r4, #16]
 8001e72:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e74:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e76:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e78:	69a1      	ldr	r1, [r4, #24]
 8001e7a:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e7c:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e7e:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e80:	6a21      	ldr	r1, [r4, #32]
 8001e82:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e84:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e86:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001e88:	2904      	cmp	r1, #4
 8001e8a:	d01e      	beq.n	8001eca <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8001e8c:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001e8e:	6826      	ldr	r6, [r4, #0]
 8001e90:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e92:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8001e96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e98:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	d107      	bne.n	8001eae <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8001e9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001ea0:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ea2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ea4:	b11b      	cbz	r3, 8001eae <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ea6:	4620      	mov	r0, r4
 8001ea8:	f7ff ff70 	bl	8001d8c <DMA_CheckFifoParam>
 8001eac:	b990      	cbnz	r0, 8001ed4 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8001eae:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001eb0:	4620      	mov	r0, r4
 8001eb2:	f7ff ff49 	bl	8001d48 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eb6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001eb8:	233f      	movs	r3, #63	; 0x3f
 8001eba:	4093      	lsls	r3, r2
 8001ebc:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001ec8:	e7c9      	b.n	8001e5e <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001eca:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001ecc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001ece:	4301      	orrs	r1, r0
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	e7db      	b.n	8001e8c <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ed4:	2340      	movs	r3, #64	; 0x40
 8001ed6:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001ed8:	2001      	movs	r0, #1
 8001eda:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8001ede:	e7be      	b.n	8001e5e <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8001ee0:	2001      	movs	r0, #1
 8001ee2:	e7bc      	b.n	8001e5e <HAL_DMA_Init+0x42>
 8001ee4:	f010803f 	.word	0xf010803f

08001ee8 <HAL_DMA_IRQHandler>:
{
 8001ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eea:	b083      	sub	sp, #12
 8001eec:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ef2:	4b72      	ldr	r3, [pc, #456]	; (80020bc <HAL_DMA_IRQHandler+0x1d4>)
 8001ef4:	681d      	ldr	r5, [r3, #0]
 8001ef6:	4b72      	ldr	r3, [pc, #456]	; (80020c0 <HAL_DMA_IRQHandler+0x1d8>)
 8001ef8:	fba3 3505 	umull	r3, r5, r3, r5
 8001efc:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001efe:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8001f00:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f02:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001f04:	2308      	movs	r3, #8
 8001f06:	4093      	lsls	r3, r2
 8001f08:	4233      	tst	r3, r6
 8001f0a:	d010      	beq.n	8001f2e <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f0c:	6803      	ldr	r3, [r0, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	f012 0f04 	tst.w	r2, #4
 8001f14:	d00b      	beq.n	8001f2e <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	f022 0204 	bic.w	r2, r2, #4
 8001f1c:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f1e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001f20:	2308      	movs	r3, #8
 8001f22:	4093      	lsls	r3, r2
 8001f24:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f26:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001f28:	f043 0301 	orr.w	r3, r3, #1
 8001f2c:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f2e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001f30:	2301      	movs	r3, #1
 8001f32:	4093      	lsls	r3, r2
 8001f34:	4233      	tst	r3, r6
 8001f36:	d009      	beq.n	8001f4c <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f38:	6822      	ldr	r2, [r4, #0]
 8001f3a:	6952      	ldr	r2, [r2, #20]
 8001f3c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001f40:	d004      	beq.n	8001f4c <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f42:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f44:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001f46:	f043 0302 	orr.w	r3, r3, #2
 8001f4a:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f4c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001f4e:	2304      	movs	r3, #4
 8001f50:	4093      	lsls	r3, r2
 8001f52:	4233      	tst	r3, r6
 8001f54:	d009      	beq.n	8001f6a <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f56:	6822      	ldr	r2, [r4, #0]
 8001f58:	6812      	ldr	r2, [r2, #0]
 8001f5a:	f012 0f02 	tst.w	r2, #2
 8001f5e:	d004      	beq.n	8001f6a <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f60:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f62:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001f64:	f043 0304 	orr.w	r3, r3, #4
 8001f68:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f6a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001f6c:	2310      	movs	r3, #16
 8001f6e:	4093      	lsls	r3, r2
 8001f70:	4233      	tst	r3, r6
 8001f72:	d024      	beq.n	8001fbe <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f74:	6822      	ldr	r2, [r4, #0]
 8001f76:	6812      	ldr	r2, [r2, #0]
 8001f78:	f012 0f08 	tst.w	r2, #8
 8001f7c:	d01f      	beq.n	8001fbe <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f7e:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f80:	6823      	ldr	r3, [r4, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001f88:	d00d      	beq.n	8001fa6 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001f90:	d104      	bne.n	8001f9c <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8001f92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f94:	b19b      	cbz	r3, 8001fbe <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8001f96:	4620      	mov	r0, r4
 8001f98:	4798      	blx	r3
 8001f9a:	e010      	b.n	8001fbe <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f9c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001f9e:	b173      	cbz	r3, 8001fbe <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8001fa0:	4620      	mov	r0, r4
 8001fa2:	4798      	blx	r3
 8001fa4:	e00b      	b.n	8001fbe <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001fac:	d103      	bne.n	8001fb6 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	f022 0208 	bic.w	r2, r2, #8
 8001fb4:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8001fb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001fb8:	b10b      	cbz	r3, 8001fbe <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8001fba:	4620      	mov	r0, r4
 8001fbc:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001fbe:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001fc0:	2320      	movs	r3, #32
 8001fc2:	4093      	lsls	r3, r2
 8001fc4:	4233      	tst	r3, r6
 8001fc6:	d055      	beq.n	8002074 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001fc8:	6822      	ldr	r2, [r4, #0]
 8001fca:	6812      	ldr	r2, [r2, #0]
 8001fcc:	f012 0f10 	tst.w	r2, #16
 8001fd0:	d050      	beq.n	8002074 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001fd2:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001fd4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b05      	cmp	r3, #5
 8001fdc:	d00e      	beq.n	8001ffc <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fde:	6823      	ldr	r3, [r4, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001fe6:	d033      	beq.n	8002050 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001fee:	d12a      	bne.n	8002046 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8001ff0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d03e      	beq.n	8002074 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8001ff6:	4620      	mov	r0, r4
 8001ff8:	4798      	blx	r3
 8001ffa:	e03b      	b.n	8002074 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ffc:	6822      	ldr	r2, [r4, #0]
 8001ffe:	6813      	ldr	r3, [r2, #0]
 8002000:	f023 0316 	bic.w	r3, r3, #22
 8002004:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002006:	6822      	ldr	r2, [r4, #0]
 8002008:	6953      	ldr	r3, [r2, #20]
 800200a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800200e:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002010:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002012:	b1a3      	cbz	r3, 800203e <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002014:	6822      	ldr	r2, [r4, #0]
 8002016:	6813      	ldr	r3, [r2, #0]
 8002018:	f023 0308 	bic.w	r3, r3, #8
 800201c:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800201e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002020:	233f      	movs	r3, #63	; 0x3f
 8002022:	4093      	lsls	r3, r2
 8002024:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8002026:	2300      	movs	r3, #0
 8002028:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 800202c:	2301      	movs	r3, #1
 800202e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8002032:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002034:	2b00      	cmp	r3, #0
 8002036:	d03f      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8002038:	4620      	mov	r0, r4
 800203a:	4798      	blx	r3
        return;
 800203c:	e03c      	b.n	80020b8 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800203e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1e7      	bne.n	8002014 <HAL_DMA_IRQHandler+0x12c>
 8002044:	e7eb      	b.n	800201e <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8002046:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002048:	b1a3      	cbz	r3, 8002074 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 800204a:	4620      	mov	r0, r4
 800204c:	4798      	blx	r3
 800204e:	e011      	b.n	8002074 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002056:	d109      	bne.n	800206c <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	f022 0210 	bic.w	r2, r2, #16
 800205e:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8002060:	2300      	movs	r3, #0
 8002062:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8002066:	2301      	movs	r3, #1
 8002068:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 800206c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800206e:	b10b      	cbz	r3, 8002074 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8002070:	4620      	mov	r0, r4
 8002072:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002074:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002076:	b1fb      	cbz	r3, 80020b8 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002078:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800207a:	f013 0f01 	tst.w	r3, #1
 800207e:	d017      	beq.n	80020b0 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8002080:	2305      	movs	r3, #5
 8002082:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8002086:	6822      	ldr	r2, [r4, #0]
 8002088:	6813      	ldr	r3, [r2, #0]
 800208a:	f023 0301 	bic.w	r3, r3, #1
 800208e:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8002090:	9b01      	ldr	r3, [sp, #4]
 8002092:	3301      	adds	r3, #1
 8002094:	9301      	str	r3, [sp, #4]
 8002096:	42ab      	cmp	r3, r5
 8002098:	d804      	bhi.n	80020a4 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800209a:	6823      	ldr	r3, [r4, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f013 0f01 	tst.w	r3, #1
 80020a2:	d1f5      	bne.n	8002090 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 80020a4:	2300      	movs	r3, #0
 80020a6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80020aa:	2301      	movs	r3, #1
 80020ac:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80020b0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80020b2:	b10b      	cbz	r3, 80020b8 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 80020b4:	4620      	mov	r0, r4
 80020b6:	4798      	blx	r3
}
 80020b8:	b003      	add	sp, #12
 80020ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020bc:	20000004 	.word	0x20000004
 80020c0:	1b4e81b5 	.word	0x1b4e81b5

080020c4 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020c4:	2300      	movs	r3, #0
 80020c6:	2b0f      	cmp	r3, #15
 80020c8:	f200 80da 	bhi.w	8002280 <HAL_GPIO_Init+0x1bc>
{
 80020cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ce:	b083      	sub	sp, #12
 80020d0:	e03a      	b.n	8002148 <HAL_GPIO_Init+0x84>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020d2:	2207      	movs	r2, #7
 80020d4:	e000      	b.n	80020d8 <HAL_GPIO_Init+0x14>
 80020d6:	2200      	movs	r2, #0
 80020d8:	40aa      	lsls	r2, r5
 80020da:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020dc:	3402      	adds	r4, #2
 80020de:	4d69      	ldr	r5, [pc, #420]	; (8002284 <HAL_GPIO_Init+0x1c0>)
 80020e0:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020e4:	4a68      	ldr	r2, [pc, #416]	; (8002288 <HAL_GPIO_Init+0x1c4>)
 80020e6:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80020e8:	ea6f 020c 	mvn.w	r2, ip
 80020ec:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020f0:	684e      	ldr	r6, [r1, #4]
 80020f2:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 80020f6:	d001      	beq.n	80020fc <HAL_GPIO_Init+0x38>
        {
          temp |= iocurrent;
 80020f8:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->IMR = temp;
 80020fc:	4c62      	ldr	r4, [pc, #392]	; (8002288 <HAL_GPIO_Init+0x1c4>)
 80020fe:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8002100:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8002102:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002106:	684e      	ldr	r6, [r1, #4]
 8002108:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 800210c:	d001      	beq.n	8002112 <HAL_GPIO_Init+0x4e>
        {
          temp |= iocurrent;
 800210e:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8002112:	4c5d      	ldr	r4, [pc, #372]	; (8002288 <HAL_GPIO_Init+0x1c4>)
 8002114:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002116:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8002118:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800211c:	684e      	ldr	r6, [r1, #4]
 800211e:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 8002122:	d001      	beq.n	8002128 <HAL_GPIO_Init+0x64>
        {
          temp |= iocurrent;
 8002124:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8002128:	4c57      	ldr	r4, [pc, #348]	; (8002288 <HAL_GPIO_Init+0x1c4>)
 800212a:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 800212c:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 800212e:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002130:	684d      	ldr	r5, [r1, #4]
 8002132:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 8002136:	d001      	beq.n	800213c <HAL_GPIO_Init+0x78>
        {
          temp |= iocurrent;
 8002138:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->FTSR = temp;
 800213c:	4c52      	ldr	r4, [pc, #328]	; (8002288 <HAL_GPIO_Init+0x1c4>)
 800213e:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002140:	3301      	adds	r3, #1
 8002142:	2b0f      	cmp	r3, #15
 8002144:	f200 809a 	bhi.w	800227c <HAL_GPIO_Init+0x1b8>
    ioposition = 0x01U << position;
 8002148:	2201      	movs	r2, #1
 800214a:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800214c:	680c      	ldr	r4, [r1, #0]
 800214e:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8002152:	ea32 0404 	bics.w	r4, r2, r4
 8002156:	d1f3      	bne.n	8002140 <HAL_GPIO_Init+0x7c>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002158:	684c      	ldr	r4, [r1, #4]
 800215a:	1e65      	subs	r5, r4, #1
 800215c:	2d01      	cmp	r5, #1
 800215e:	d903      	bls.n	8002168 <HAL_GPIO_Init+0xa4>
 8002160:	2c11      	cmp	r4, #17
 8002162:	d001      	beq.n	8002168 <HAL_GPIO_Init+0xa4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002164:	2c12      	cmp	r4, #18
 8002166:	d112      	bne.n	800218e <HAL_GPIO_Init+0xca>
        temp = GPIOx->OSPEEDR; 
 8002168:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800216a:	005e      	lsls	r6, r3, #1
 800216c:	2403      	movs	r4, #3
 800216e:	40b4      	lsls	r4, r6
 8002170:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002174:	68cc      	ldr	r4, [r1, #12]
 8002176:	40b4      	lsls	r4, r6
 8002178:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800217a:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800217c:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800217e:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002182:	684c      	ldr	r4, [r1, #4]
 8002184:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8002188:	409a      	lsls	r2, r3
 800218a:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 800218c:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 800218e:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002190:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8002194:	2403      	movs	r4, #3
 8002196:	fa04 f40e 	lsl.w	r4, r4, lr
 800219a:	43e2      	mvns	r2, r4
 800219c:	ea25 0504 	bic.w	r5, r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021a0:	688c      	ldr	r4, [r1, #8]
 80021a2:	fa04 f40e 	lsl.w	r4, r4, lr
 80021a6:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 80021a8:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021aa:	684c      	ldr	r4, [r1, #4]
 80021ac:	2c02      	cmp	r4, #2
 80021ae:	d001      	beq.n	80021b4 <HAL_GPIO_Init+0xf0>
 80021b0:	2c12      	cmp	r4, #18
 80021b2:	d10f      	bne.n	80021d4 <HAL_GPIO_Init+0x110>
        temp = GPIOx->AFR[position >> 3U];
 80021b4:	08dd      	lsrs	r5, r3, #3
 80021b6:	3508      	adds	r5, #8
 80021b8:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021bc:	f003 0407 	and.w	r4, r3, #7
 80021c0:	00a6      	lsls	r6, r4, #2
 80021c2:	240f      	movs	r4, #15
 80021c4:	40b4      	lsls	r4, r6
 80021c6:	ea27 0704 	bic.w	r7, r7, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021ca:	690c      	ldr	r4, [r1, #16]
 80021cc:	40b4      	lsls	r4, r6
 80021ce:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3U] = temp;
 80021d0:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 80021d4:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021d6:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021d8:	684a      	ldr	r2, [r1, #4]
 80021da:	f002 0203 	and.w	r2, r2, #3
 80021de:	fa02 f20e 	lsl.w	r2, r2, lr
 80021e2:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80021e4:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021e6:	684a      	ldr	r2, [r1, #4]
 80021e8:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80021ec:	d0a8      	beq.n	8002140 <HAL_GPIO_Init+0x7c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ee:	2200      	movs	r2, #0
 80021f0:	9201      	str	r2, [sp, #4]
 80021f2:	4a26      	ldr	r2, [pc, #152]	; (800228c <HAL_GPIO_Init+0x1c8>)
 80021f4:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80021f6:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80021fa:	6454      	str	r4, [r2, #68]	; 0x44
 80021fc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80021fe:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002202:	9201      	str	r2, [sp, #4]
 8002204:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002206:	089c      	lsrs	r4, r3, #2
 8002208:	1ca5      	adds	r5, r4, #2
 800220a:	4a1e      	ldr	r2, [pc, #120]	; (8002284 <HAL_GPIO_Init+0x1c0>)
 800220c:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002210:	f003 0203 	and.w	r2, r3, #3
 8002214:	0095      	lsls	r5, r2, #2
 8002216:	220f      	movs	r2, #15
 8002218:	40aa      	lsls	r2, r5
 800221a:	ea26 0602 	bic.w	r6, r6, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800221e:	4a1c      	ldr	r2, [pc, #112]	; (8002290 <HAL_GPIO_Init+0x1cc>)
 8002220:	4290      	cmp	r0, r2
 8002222:	f43f af58 	beq.w	80020d6 <HAL_GPIO_Init+0x12>
 8002226:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800222a:	4290      	cmp	r0, r2
 800222c:	d01a      	beq.n	8002264 <HAL_GPIO_Init+0x1a0>
 800222e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002232:	4290      	cmp	r0, r2
 8002234:	d018      	beq.n	8002268 <HAL_GPIO_Init+0x1a4>
 8002236:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800223a:	4290      	cmp	r0, r2
 800223c:	d016      	beq.n	800226c <HAL_GPIO_Init+0x1a8>
 800223e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002242:	4290      	cmp	r0, r2
 8002244:	d014      	beq.n	8002270 <HAL_GPIO_Init+0x1ac>
 8002246:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800224a:	4290      	cmp	r0, r2
 800224c:	d012      	beq.n	8002274 <HAL_GPIO_Init+0x1b0>
 800224e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002252:	4290      	cmp	r0, r2
 8002254:	d010      	beq.n	8002278 <HAL_GPIO_Init+0x1b4>
 8002256:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800225a:	4290      	cmp	r0, r2
 800225c:	f43f af39 	beq.w	80020d2 <HAL_GPIO_Init+0xe>
 8002260:	2208      	movs	r2, #8
 8002262:	e739      	b.n	80020d8 <HAL_GPIO_Init+0x14>
 8002264:	2201      	movs	r2, #1
 8002266:	e737      	b.n	80020d8 <HAL_GPIO_Init+0x14>
 8002268:	2202      	movs	r2, #2
 800226a:	e735      	b.n	80020d8 <HAL_GPIO_Init+0x14>
 800226c:	2203      	movs	r2, #3
 800226e:	e733      	b.n	80020d8 <HAL_GPIO_Init+0x14>
 8002270:	2204      	movs	r2, #4
 8002272:	e731      	b.n	80020d8 <HAL_GPIO_Init+0x14>
 8002274:	2205      	movs	r2, #5
 8002276:	e72f      	b.n	80020d8 <HAL_GPIO_Init+0x14>
 8002278:	2206      	movs	r2, #6
 800227a:	e72d      	b.n	80020d8 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 800227c:	b003      	add	sp, #12
 800227e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	40013800 	.word	0x40013800
 8002288:	40013c00 	.word	0x40013c00
 800228c:	40023800 	.word	0x40023800
 8002290:	40020000 	.word	0x40020000

08002294 <HAL_GPIO_DeInit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002294:	2300      	movs	r3, #0
 8002296:	2b0f      	cmp	r3, #15
 8002298:	f200 808f 	bhi.w	80023ba <HAL_GPIO_DeInit+0x126>
{
 800229c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800229e:	e02d      	b.n	80022fc <HAL_GPIO_DeInit+0x68>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80022a0:	2507      	movs	r5, #7
 80022a2:	e000      	b.n	80022a6 <HAL_GPIO_DeInit+0x12>
 80022a4:	2500      	movs	r5, #0
 80022a6:	fa05 fc0c 	lsl.w	ip, r5, ip
 80022aa:	45a4      	cmp	ip, r4
 80022ac:	d069      	beq.n	8002382 <HAL_GPIO_DeInit+0xee>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022ae:	6804      	ldr	r4, [r0, #0]
 80022b0:	005d      	lsls	r5, r3, #1
 80022b2:	f04f 0c03 	mov.w	ip, #3
 80022b6:	fa0c fc05 	lsl.w	ip, ip, r5
 80022ba:	ea24 040c 	bic.w	r4, r4, ip
 80022be:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022c0:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80022c4:	f10e 0e08 	add.w	lr, lr, #8
 80022c8:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 80022cc:	f003 0507 	and.w	r5, r3, #7
 80022d0:	00ae      	lsls	r6, r5, #2
 80022d2:	250f      	movs	r5, #15
 80022d4:	40b5      	lsls	r5, r6
 80022d6:	ea24 0405 	bic.w	r4, r4, r5
 80022da:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022de:	68c4      	ldr	r4, [r0, #12]
 80022e0:	ea24 040c 	bic.w	r4, r4, ip
 80022e4:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022e6:	6844      	ldr	r4, [r0, #4]
 80022e8:	ea24 0202 	bic.w	r2, r4, r2
 80022ec:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022ee:	6882      	ldr	r2, [r0, #8]
 80022f0:	ea22 020c 	bic.w	r2, r2, ip
 80022f4:	6082      	str	r2, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022f6:	3301      	adds	r3, #1
 80022f8:	2b0f      	cmp	r3, #15
 80022fa:	d85d      	bhi.n	80023b8 <HAL_GPIO_DeInit+0x124>
    ioposition = 0x01U << position;
 80022fc:	2201      	movs	r2, #1
 80022fe:	409a      	lsls	r2, r3
    iocurrent = (GPIO_Pin) & ioposition;
 8002300:	ea02 0601 	and.w	r6, r2, r1
    if(iocurrent == ioposition)
 8002304:	ea32 0401 	bics.w	r4, r2, r1
 8002308:	d1f5      	bne.n	80022f6 <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800230a:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 800230e:	f10e 0502 	add.w	r5, lr, #2
 8002312:	4c2a      	ldr	r4, [pc, #168]	; (80023bc <HAL_GPIO_DeInit+0x128>)
 8002314:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002318:	f003 0c03 	and.w	ip, r3, #3
 800231c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8002320:	250f      	movs	r5, #15
 8002322:	fa05 f70c 	lsl.w	r7, r5, ip
 8002326:	403c      	ands	r4, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002328:	4d25      	ldr	r5, [pc, #148]	; (80023c0 <HAL_GPIO_DeInit+0x12c>)
 800232a:	42a8      	cmp	r0, r5
 800232c:	d0ba      	beq.n	80022a4 <HAL_GPIO_DeInit+0x10>
 800232e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002332:	42a8      	cmp	r0, r5
 8002334:	d019      	beq.n	800236a <HAL_GPIO_DeInit+0xd6>
 8002336:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800233a:	42a8      	cmp	r0, r5
 800233c:	d017      	beq.n	800236e <HAL_GPIO_DeInit+0xda>
 800233e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002342:	42a8      	cmp	r0, r5
 8002344:	d015      	beq.n	8002372 <HAL_GPIO_DeInit+0xde>
 8002346:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800234a:	42a8      	cmp	r0, r5
 800234c:	d013      	beq.n	8002376 <HAL_GPIO_DeInit+0xe2>
 800234e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002352:	42a8      	cmp	r0, r5
 8002354:	d011      	beq.n	800237a <HAL_GPIO_DeInit+0xe6>
 8002356:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800235a:	42a8      	cmp	r0, r5
 800235c:	d00f      	beq.n	800237e <HAL_GPIO_DeInit+0xea>
 800235e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002362:	42a8      	cmp	r0, r5
 8002364:	d09c      	beq.n	80022a0 <HAL_GPIO_DeInit+0xc>
 8002366:	2508      	movs	r5, #8
 8002368:	e79d      	b.n	80022a6 <HAL_GPIO_DeInit+0x12>
 800236a:	2501      	movs	r5, #1
 800236c:	e79b      	b.n	80022a6 <HAL_GPIO_DeInit+0x12>
 800236e:	2502      	movs	r5, #2
 8002370:	e799      	b.n	80022a6 <HAL_GPIO_DeInit+0x12>
 8002372:	2503      	movs	r5, #3
 8002374:	e797      	b.n	80022a6 <HAL_GPIO_DeInit+0x12>
 8002376:	2504      	movs	r5, #4
 8002378:	e795      	b.n	80022a6 <HAL_GPIO_DeInit+0x12>
 800237a:	2505      	movs	r5, #5
 800237c:	e793      	b.n	80022a6 <HAL_GPIO_DeInit+0x12>
 800237e:	2506      	movs	r5, #6
 8002380:	e791      	b.n	80022a6 <HAL_GPIO_DeInit+0x12>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002382:	4c10      	ldr	r4, [pc, #64]	; (80023c4 <HAL_GPIO_DeInit+0x130>)
 8002384:	6825      	ldr	r5, [r4, #0]
 8002386:	ea25 0506 	bic.w	r5, r5, r6
 800238a:	6025      	str	r5, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800238c:	6865      	ldr	r5, [r4, #4]
 800238e:	ea25 0506 	bic.w	r5, r5, r6
 8002392:	6065      	str	r5, [r4, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002394:	68a5      	ldr	r5, [r4, #8]
 8002396:	ea25 0506 	bic.w	r5, r5, r6
 800239a:	60a5      	str	r5, [r4, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800239c:	68e5      	ldr	r5, [r4, #12]
 800239e:	ea25 0606 	bic.w	r6, r5, r6
 80023a2:	60e6      	str	r6, [r4, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80023a4:	4e05      	ldr	r6, [pc, #20]	; (80023bc <HAL_GPIO_DeInit+0x128>)
 80023a6:	f10e 0402 	add.w	r4, lr, #2
 80023aa:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 80023ae:	ea25 0507 	bic.w	r5, r5, r7
 80023b2:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
 80023b6:	e77a      	b.n	80022ae <HAL_GPIO_DeInit+0x1a>
    }
  }
}
 80023b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023ba:	4770      	bx	lr
 80023bc:	40013800 	.word	0x40013800
 80023c0:	40020000 	.word	0x40020000
 80023c4:	40013c00 	.word	0x40013c00

080023c8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023c8:	6903      	ldr	r3, [r0, #16]
 80023ca:	4219      	tst	r1, r3
 80023cc:	d001      	beq.n	80023d2 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 80023ce:	2001      	movs	r0, #1
 80023d0:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023d2:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80023d4:	4770      	bx	lr

080023d6 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023d6:	b10a      	cbz	r2, 80023dc <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023d8:	6181      	str	r1, [r0, #24]
 80023da:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023dc:	0409      	lsls	r1, r1, #16
 80023de:	6181      	str	r1, [r0, #24]
  }
}
 80023e0:	4770      	bx	lr
	...

080023e4 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023e4:	2800      	cmp	r0, #0
 80023e6:	f000 80cc 	beq.w	8002582 <HAL_I2C_Init+0x19e>
{
 80023ea:	b570      	push	{r4, r5, r6, lr}
 80023ec:	4604      	mov	r4, r0
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023ee:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d077      	beq.n	80024e6 <HAL_I2C_Init+0x102>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023f6:	2324      	movs	r3, #36	; 0x24
 80023f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023fc:	6822      	ldr	r2, [r4, #0]
 80023fe:	6813      	ldr	r3, [r2, #0]
 8002400:	f023 0301 	bic.w	r3, r3, #1
 8002404:	6013      	str	r3, [r2, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002406:	6822      	ldr	r2, [r4, #0]
 8002408:	6813      	ldr	r3, [r2, #0]
 800240a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800240e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002410:	6822      	ldr	r2, [r4, #0]
 8002412:	6813      	ldr	r3, [r2, #0]
 8002414:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002418:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800241a:	f001 fc77 	bl	8003d0c <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800241e:	6862      	ldr	r2, [r4, #4]
 8002420:	4b5a      	ldr	r3, [pc, #360]	; (800258c <HAL_I2C_Init+0x1a8>)
 8002422:	429a      	cmp	r2, r3
 8002424:	d864      	bhi.n	80024f0 <HAL_I2C_Init+0x10c>
 8002426:	4b5a      	ldr	r3, [pc, #360]	; (8002590 <HAL_I2C_Init+0x1ac>)
 8002428:	4298      	cmp	r0, r3
 800242a:	bf8c      	ite	hi
 800242c:	2300      	movhi	r3, #0
 800242e:	2301      	movls	r3, #1
 8002430:	2b00      	cmp	r3, #0
 8002432:	f040 80a8 	bne.w	8002586 <HAL_I2C_Init+0x1a2>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002436:	4957      	ldr	r1, [pc, #348]	; (8002594 <HAL_I2C_Init+0x1b0>)
 8002438:	fba1 3100 	umull	r3, r1, r1, r0
 800243c:	0c8b      	lsrs	r3, r1, #18

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800243e:	6825      	ldr	r5, [r4, #0]
 8002440:	686a      	ldr	r2, [r5, #4]
 8002442:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002446:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 800244a:	606a      	str	r2, [r5, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800244c:	6821      	ldr	r1, [r4, #0]
 800244e:	6a0a      	ldr	r2, [r1, #32]
 8002450:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002454:	6866      	ldr	r6, [r4, #4]
 8002456:	4d4d      	ldr	r5, [pc, #308]	; (800258c <HAL_I2C_Init+0x1a8>)
 8002458:	42ae      	cmp	r6, r5
 800245a:	d84f      	bhi.n	80024fc <HAL_I2C_Init+0x118>
 800245c:	3301      	adds	r3, #1
 800245e:	4313      	orrs	r3, r2
 8002460:	620b      	str	r3, [r1, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002462:	6821      	ldr	r1, [r4, #0]
 8002464:	69ca      	ldr	r2, [r1, #28]
 8002466:	f422 424f 	bic.w	r2, r2, #52992	; 0xcf00
 800246a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800246e:	6866      	ldr	r6, [r4, #4]
 8002470:	4b46      	ldr	r3, [pc, #280]	; (800258c <HAL_I2C_Init+0x1a8>)
 8002472:	429e      	cmp	r6, r3
 8002474:	d84c      	bhi.n	8002510 <HAL_I2C_Init+0x12c>
 8002476:	1e43      	subs	r3, r0, #1
 8002478:	0076      	lsls	r6, r6, #1
 800247a:	fbb3 f3f6 	udiv	r3, r3, r6
 800247e:	3301      	adds	r3, #1
 8002480:	f640 70fc 	movw	r0, #4092	; 0xffc
 8002484:	4203      	tst	r3, r0
 8002486:	d078      	beq.n	800257a <HAL_I2C_Init+0x196>
 8002488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800248c:	4313      	orrs	r3, r2
 800248e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002490:	6821      	ldr	r1, [r4, #0]
 8002492:	680b      	ldr	r3, [r1, #0]
 8002494:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002498:	69e2      	ldr	r2, [r4, #28]
 800249a:	6a20      	ldr	r0, [r4, #32]
 800249c:	4302      	orrs	r2, r0
 800249e:	4313      	orrs	r3, r2
 80024a0:	600b      	str	r3, [r1, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024a2:	6821      	ldr	r1, [r4, #0]
 80024a4:	688b      	ldr	r3, [r1, #8]
 80024a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80024aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80024ae:	6922      	ldr	r2, [r4, #16]
 80024b0:	68e0      	ldr	r0, [r4, #12]
 80024b2:	4302      	orrs	r2, r0
 80024b4:	4313      	orrs	r3, r2
 80024b6:	608b      	str	r3, [r1, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024b8:	6821      	ldr	r1, [r4, #0]
 80024ba:	68cb      	ldr	r3, [r1, #12]
 80024bc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80024c0:	6962      	ldr	r2, [r4, #20]
 80024c2:	69a0      	ldr	r0, [r4, #24]
 80024c4:	4302      	orrs	r2, r0
 80024c6:	4313      	orrs	r3, r2
 80024c8:	60cb      	str	r3, [r1, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024ca:	6822      	ldr	r2, [r4, #0]
 80024cc:	6813      	ldr	r3, [r2, #0]
 80024ce:	f043 0301 	orr.w	r3, r3, #1
 80024d2:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024d4:	2000      	movs	r0, #0
 80024d6:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024d8:	2320      	movs	r3, #32
 80024da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024de:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e0:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
}
 80024e4:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80024e6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80024ea:	f7fe fc87 	bl	8000dfc <HAL_I2C_MspInit>
 80024ee:	e782      	b.n	80023f6 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024f0:	4b29      	ldr	r3, [pc, #164]	; (8002598 <HAL_I2C_Init+0x1b4>)
 80024f2:	4298      	cmp	r0, r3
 80024f4:	bf8c      	ite	hi
 80024f6:	2300      	movhi	r3, #0
 80024f8:	2301      	movls	r3, #1
 80024fa:	e799      	b.n	8002430 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024fc:	f44f 7596 	mov.w	r5, #300	; 0x12c
 8002500:	fb05 f303 	mul.w	r3, r5, r3
 8002504:	4d25      	ldr	r5, [pc, #148]	; (800259c <HAL_I2C_Init+0x1b8>)
 8002506:	fba5 5303 	umull	r5, r3, r5, r3
 800250a:	099b      	lsrs	r3, r3, #6
 800250c:	3301      	adds	r3, #1
 800250e:	e7a6      	b.n	800245e <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002510:	68a3      	ldr	r3, [r4, #8]
 8002512:	b9bb      	cbnz	r3, 8002544 <HAL_I2C_Init+0x160>
 8002514:	1e45      	subs	r5, r0, #1
 8002516:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 800251a:	fbb5 f5fc 	udiv	r5, r5, ip
 800251e:	3501      	adds	r5, #1
 8002520:	f3c5 050b 	ubfx	r5, r5, #0, #12
 8002524:	fab5 f585 	clz	r5, r5
 8002528:	096d      	lsrs	r5, r5, #5
 800252a:	bb45      	cbnz	r5, 800257e <HAL_I2C_Init+0x19a>
 800252c:	b9c3      	cbnz	r3, 8002560 <HAL_I2C_Init+0x17c>
 800252e:	3801      	subs	r0, #1
 8002530:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8002534:	fbb0 f3f3 	udiv	r3, r0, r3
 8002538:	3301      	adds	r3, #1
 800253a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800253e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002542:	e7a3      	b.n	800248c <HAL_I2C_Init+0xa8>
 8002544:	1e45      	subs	r5, r0, #1
 8002546:	eb06 0c86 	add.w	ip, r6, r6, lsl #2
 800254a:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 800254e:	fbb5 f5fc 	udiv	r5, r5, ip
 8002552:	3501      	adds	r5, #1
 8002554:	f3c5 050b 	ubfx	r5, r5, #0, #12
 8002558:	fab5 f585 	clz	r5, r5
 800255c:	096d      	lsrs	r5, r5, #5
 800255e:	e7e4      	b.n	800252a <HAL_I2C_Init+0x146>
 8002560:	3801      	subs	r0, #1
 8002562:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 8002566:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800256a:	fbb0 f3f3 	udiv	r3, r0, r3
 800256e:	3301      	adds	r3, #1
 8002570:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002574:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002578:	e788      	b.n	800248c <HAL_I2C_Init+0xa8>
 800257a:	2304      	movs	r3, #4
 800257c:	e786      	b.n	800248c <HAL_I2C_Init+0xa8>
 800257e:	2301      	movs	r3, #1
 8002580:	e784      	b.n	800248c <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8002582:	2001      	movs	r0, #1
}
 8002584:	4770      	bx	lr
    return HAL_ERROR;
 8002586:	2001      	movs	r0, #1
 8002588:	e7ac      	b.n	80024e4 <HAL_I2C_Init+0x100>
 800258a:	bf00      	nop
 800258c:	000186a0 	.word	0x000186a0
 8002590:	001e847f 	.word	0x001e847f
 8002594:	431bde83 	.word	0x431bde83
 8002598:	003d08ff 	.word	0x003d08ff
 800259c:	10624dd3 	.word	0x10624dd3

080025a0 <HAL_I2S_Init>:
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80025a0:	2800      	cmp	r0, #0
 80025a2:	f000 80c1 	beq.w	8002728 <HAL_I2S_Init+0x188>
{
 80025a6:	b538      	push	{r3, r4, r5, lr}
 80025a8:	4604      	mov	r4, r0
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80025aa:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d051      	beq.n	8002656 <HAL_I2S_Init+0xb6>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80025b2:	2202      	movs	r2, #2
 80025b4:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80025b8:	6821      	ldr	r1, [r4, #0]
 80025ba:	69cb      	ldr	r3, [r1, #28]
 80025bc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80025c0:	f023 030f 	bic.w	r3, r3, #15
 80025c4:	61cb      	str	r3, [r1, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80025c6:	6823      	ldr	r3, [r4, #0]
 80025c8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80025ca:	6963      	ldr	r3, [r4, #20]
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d063      	beq.n	8002698 <HAL_I2S_Init+0xf8>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80025d0:	68e3      	ldr	r3, [r4, #12]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d146      	bne.n	8002664 <HAL_I2S_Init+0xc4>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80025d6:	2510      	movs	r5, #16
      /* Packet length is 32 bits */
      packetlength = 32U;
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80025d8:	68a3      	ldr	r3, [r4, #8]
 80025da:	2b20      	cmp	r3, #32
 80025dc:	d800      	bhi.n	80025e0 <HAL_I2S_Init+0x40>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80025de:	006d      	lsls	r5, r5, #1
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80025e0:	2001      	movs	r0, #1
 80025e2:	f001 fc4d 	bl	8003e80 <HAL_RCCEx_GetPeriphCLKFreq>
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80025e6:	6923      	ldr	r3, [r4, #16]
 80025e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025ec:	d03c      	beq.n	8002668 <HAL_I2S_Init+0xc8>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80025ee:	fbb0 f0f5 	udiv	r0, r0, r5
 80025f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80025f6:	0043      	lsls	r3, r0, #1
 80025f8:	6960      	ldr	r0, [r4, #20]
 80025fa:	fbb3 f3f0 	udiv	r3, r3, r0
 80025fe:	3305      	adds	r3, #5
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002600:	4a4a      	ldr	r2, [pc, #296]	; (800272c <HAL_I2S_Init+0x18c>)
 8002602:	fba2 2303 	umull	r2, r3, r2, r3

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002606:	f3c3 02c0 	ubfx	r2, r3, #3, #1

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800260a:	ebc2 03d3 	rsb	r3, r2, r3, lsr #3
 800260e:	085b      	lsrs	r3, r3, #1

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002610:	0211      	lsls	r1, r2, #8
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002612:	1e9a      	subs	r2, r3, #2
 8002614:	2afd      	cmp	r2, #253	; 0xfd
 8002616:	d841      	bhi.n	800269c <HAL_I2S_Init+0xfc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002618:	6922      	ldr	r2, [r4, #16]
 800261a:	430a      	orrs	r2, r1
 800261c:	6821      	ldr	r1, [r4, #0]
 800261e:	4313      	orrs	r3, r2
 8002620:	620b      	str	r3, [r1, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002622:	6821      	ldr	r1, [r4, #0]
 8002624:	69cb      	ldr	r3, [r1, #28]
 8002626:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800262a:	f023 030f 	bic.w	r3, r3, #15
 800262e:	6862      	ldr	r2, [r4, #4]
 8002630:	68a0      	ldr	r0, [r4, #8]
 8002632:	4302      	orrs	r2, r0
 8002634:	68e0      	ldr	r0, [r4, #12]
 8002636:	4302      	orrs	r2, r0
 8002638:	69a0      	ldr	r0, [r4, #24]
 800263a:	4302      	orrs	r2, r0
 800263c:	4313      	orrs	r3, r2
 800263e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002642:	61cb      	str	r3, [r1, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002644:	6a23      	ldr	r3, [r4, #32]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d02e      	beq.n	80026a8 <HAL_I2S_Init+0x108>
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800264a:	2000      	movs	r0, #0
 800264c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800264e:	2301      	movs	r3, #1
 8002650:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  return HAL_OK;
}
 8002654:	bd38      	pop	{r3, r4, r5, pc}
    hi2s->Lock = HAL_UNLOCKED;
 8002656:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800265a:	4b35      	ldr	r3, [pc, #212]	; (8002730 <HAL_I2S_Init+0x190>)
 800265c:	6343      	str	r3, [r0, #52]	; 0x34
    HAL_I2S_MspInit(hi2s);
 800265e:	f7fe fc05 	bl	8000e6c <HAL_I2S_MspInit>
 8002662:	e7a6      	b.n	80025b2 <HAL_I2S_Init+0x12>
      packetlength = 32U;
 8002664:	2520      	movs	r5, #32
 8002666:	e7b7      	b.n	80025d8 <HAL_I2S_Init+0x38>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002668:	68e3      	ldr	r3, [r4, #12]
 800266a:	b153      	cbz	r3, 8002682 <HAL_I2S_Init+0xe2>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800266c:	00ad      	lsls	r5, r5, #2
 800266e:	fbb0 f0f5 	udiv	r0, r0, r5
 8002672:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002676:	0043      	lsls	r3, r0, #1
 8002678:	6960      	ldr	r0, [r4, #20]
 800267a:	fbb3 f3f0 	udiv	r3, r3, r0
 800267e:	3305      	adds	r3, #5
 8002680:	e7be      	b.n	8002600 <HAL_I2S_Init+0x60>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002682:	00ed      	lsls	r5, r5, #3
 8002684:	fbb0 f0f5 	udiv	r0, r0, r5
 8002688:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800268c:	0043      	lsls	r3, r0, #1
 800268e:	6960      	ldr	r0, [r4, #20]
 8002690:	fbb3 f3f0 	udiv	r3, r3, r0
 8002694:	3305      	adds	r3, #5
 8002696:	e7b3      	b.n	8002600 <HAL_I2S_Init+0x60>
    i2sodd = 0U;
 8002698:	2100      	movs	r1, #0
 800269a:	e7ba      	b.n	8002612 <HAL_I2S_Init+0x72>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800269c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800269e:	f043 0310 	orr.w	r3, r3, #16
 80026a2:	6463      	str	r3, [r4, #68]	; 0x44
    return  HAL_ERROR;
 80026a4:	2001      	movs	r0, #1
 80026a6:	e7d5      	b.n	8002654 <HAL_I2S_Init+0xb4>
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80026a8:	4b22      	ldr	r3, [pc, #136]	; (8002734 <HAL_I2S_Init+0x194>)
 80026aa:	6363      	str	r3, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80026ac:	6822      	ldr	r2, [r4, #0]
 80026ae:	4b22      	ldr	r3, [pc, #136]	; (8002738 <HAL_I2S_Init+0x198>)
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d01f      	beq.n	80026f4 <HAL_I2S_Init+0x154>
 80026b4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80026b8:	69d3      	ldr	r3, [r2, #28]
 80026ba:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80026be:	f023 030f 	bic.w	r3, r3, #15
 80026c2:	61d3      	str	r3, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80026c4:	6822      	ldr	r2, [r4, #0]
 80026c6:	4b1c      	ldr	r3, [pc, #112]	; (8002738 <HAL_I2S_Init+0x198>)
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d015      	beq.n	80026f8 <HAL_I2S_Init+0x158>
 80026cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026d0:	2202      	movs	r2, #2
 80026d2:	621a      	str	r2, [r3, #32]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80026d4:	6822      	ldr	r2, [r4, #0]
 80026d6:	4b18      	ldr	r3, [pc, #96]	; (8002738 <HAL_I2S_Init+0x198>)
 80026d8:	429a      	cmp	r2, r3
 80026da:	d010      	beq.n	80026fe <HAL_I2S_Init+0x15e>
 80026dc:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
 80026e0:	69ca      	ldr	r2, [r1, #28]
 80026e2:	b292      	uxth	r2, r2
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80026e4:	6863      	ldr	r3, [r4, #4]
 80026e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026ea:	d00a      	beq.n	8002702 <HAL_I2S_Init+0x162>
 80026ec:	b9cb      	cbnz	r3, 8002722 <HAL_I2S_Init+0x182>
      tmp = I2S_MODE_SLAVE_RX;
 80026ee:	f44f 7c80 	mov.w	ip, #256	; 0x100
 80026f2:	e008      	b.n	8002706 <HAL_I2S_Init+0x166>
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80026f4:	4a11      	ldr	r2, [pc, #68]	; (800273c <HAL_I2S_Init+0x19c>)
 80026f6:	e7df      	b.n	80026b8 <HAL_I2S_Init+0x118>
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80026f8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80026fc:	e7e8      	b.n	80026d0 <HAL_I2S_Init+0x130>
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80026fe:	490f      	ldr	r1, [pc, #60]	; (800273c <HAL_I2S_Init+0x19c>)
 8002700:	e7ee      	b.n	80026e0 <HAL_I2S_Init+0x140>
      tmp = I2S_MODE_SLAVE_RX;
 8002702:	f44f 7c80 	mov.w	ip, #256	; 0x100
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002706:	68a0      	ldr	r0, [r4, #8]
 8002708:	68e5      	ldr	r5, [r4, #12]
                                    (uint16_t)hi2s->Init.CPOL))));
 800270a:	8b23      	ldrh	r3, [r4, #24]
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800270c:	432b      	orrs	r3, r5
 800270e:	b29b      	uxth	r3, r3
 8002710:	4303      	orrs	r3, r0
 8002712:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002714:	ea43 030c 	orr.w	r3, r3, ip
 8002718:	4313      	orrs	r3, r2
 800271a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800271e:	61cb      	str	r3, [r1, #28]
 8002720:	e793      	b.n	800264a <HAL_I2S_Init+0xaa>
      tmp = I2S_MODE_SLAVE_TX;
 8002722:	f04f 0c00 	mov.w	ip, #0
 8002726:	e7ee      	b.n	8002706 <HAL_I2S_Init+0x166>
    return HAL_ERROR;
 8002728:	2001      	movs	r0, #1
}
 800272a:	4770      	bx	lr
 800272c:	cccccccd 	.word	0xcccccccd
 8002730:	080027b7 	.word	0x080027b7
 8002734:	080029c9 	.word	0x080029c9
 8002738:	40003800 	.word	0x40003800
 800273c:	40003400 	.word	0x40003400

08002740 <HAL_I2S_TxCpltCallback>:
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002740:	4770      	bx	lr

08002742 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002742:	b508      	push	{r3, lr}
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002744:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002746:	6803      	ldr	r3, [r0, #0]
 8002748:	8812      	ldrh	r2, [r2, #0]
 800274a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800274c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800274e:	3302      	adds	r3, #2
 8002750:	6243      	str	r3, [r0, #36]	; 0x24
  hi2s->TxXferCount--;
 8002752:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002754:	b29b      	uxth	r3, r3
 8002756:	3b01      	subs	r3, #1
 8002758:	b29b      	uxth	r3, r3
 800275a:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800275c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800275e:	b29b      	uxth	r3, r3
 8002760:	b103      	cbz	r3, 8002764 <I2S_Transmit_IT+0x22>
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002762:	bd08      	pop	{r3, pc}
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002764:	6802      	ldr	r2, [r0, #0]
 8002766:	6853      	ldr	r3, [r2, #4]
 8002768:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800276c:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 800276e:	2301      	movs	r3, #1
 8002770:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8002774:	f7ff ffe4 	bl	8002740 <HAL_I2S_TxCpltCallback>
}
 8002778:	e7f3      	b.n	8002762 <I2S_Transmit_IT+0x20>

0800277a <HAL_I2S_RxCpltCallback>:
}
 800277a:	4770      	bx	lr

0800277c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800277c:	b508      	push	{r3, lr}
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800277e:	6803      	ldr	r3, [r0, #0]
 8002780:	68da      	ldr	r2, [r3, #12]
 8002782:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002784:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002786:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002788:	3302      	adds	r3, #2
 800278a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 800278c:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800278e:	b29b      	uxth	r3, r3
 8002790:	3b01      	subs	r3, #1
 8002792:	b29b      	uxth	r3, r3
 8002794:	8643      	strh	r3, [r0, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002796:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8002798:	b29b      	uxth	r3, r3
 800279a:	b103      	cbz	r3, 800279e <I2S_Receive_IT+0x22>
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800279c:	bd08      	pop	{r3, pc}
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800279e:	6802      	ldr	r2, [r0, #0]
 80027a0:	6853      	ldr	r3, [r2, #4]
 80027a2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80027a6:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 80027a8:	2301      	movs	r3, #1
 80027aa:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 80027ae:	f7ff ffe4 	bl	800277a <HAL_I2S_RxCpltCallback>
}
 80027b2:	e7f3      	b.n	800279c <I2S_Receive_IT+0x20>

080027b4 <HAL_I2S_ErrorCallback>:
}
 80027b4:	4770      	bx	lr

080027b6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80027b6:	b510      	push	{r4, lr}
 80027b8:	b084      	sub	sp, #16
 80027ba:	4604      	mov	r4, r0
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80027bc:	6802      	ldr	r2, [r0, #0]
 80027be:	6893      	ldr	r3, [r2, #8]
 80027c0:	9303      	str	r3, [sp, #12]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80027c2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b04      	cmp	r3, #4
 80027ca:	d006      	beq.n	80027da <I2S_IRQHandler+0x24>
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80027cc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b03      	cmp	r3, #3
 80027d4:	d02c      	beq.n	8002830 <I2S_IRQHandler+0x7a>
#else
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80027d6:	b004      	add	sp, #16
 80027d8:	bd10      	pop	{r4, pc}
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80027da:	9b03      	ldr	r3, [sp, #12]
 80027dc:	f013 0f01 	tst.w	r3, #1
 80027e0:	d003      	beq.n	80027ea <I2S_IRQHandler+0x34>
 80027e2:	6853      	ldr	r3, [r2, #4]
 80027e4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80027e8:	d11f      	bne.n	800282a <I2S_IRQHandler+0x74>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80027ea:	9b03      	ldr	r3, [sp, #12]
 80027ec:	f013 0f40 	tst.w	r3, #64	; 0x40
 80027f0:	d0ec      	beq.n	80027cc <I2S_IRQHandler+0x16>
 80027f2:	6823      	ldr	r3, [r4, #0]
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	f012 0f20 	tst.w	r2, #32
 80027fa:	d0e7      	beq.n	80027cc <I2S_IRQHandler+0x16>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80027fc:	685a      	ldr	r2, [r3, #4]
 80027fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002802:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002804:	2300      	movs	r3, #0
 8002806:	9301      	str	r3, [sp, #4]
 8002808:	6823      	ldr	r3, [r4, #0]
 800280a:	68da      	ldr	r2, [r3, #12]
 800280c:	9201      	str	r2, [sp, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	9301      	str	r3, [sp, #4]
 8002812:	9b01      	ldr	r3, [sp, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8002814:	2301      	movs	r3, #1
 8002816:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800281a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800281c:	f043 0302 	orr.w	r3, r3, #2
 8002820:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002822:	4620      	mov	r0, r4
 8002824:	f7ff ffc6 	bl	80027b4 <HAL_I2S_ErrorCallback>
 8002828:	e7d0      	b.n	80027cc <I2S_IRQHandler+0x16>
      I2S_Receive_IT(hi2s);
 800282a:	f7ff ffa7 	bl	800277c <I2S_Receive_IT>
 800282e:	e7dc      	b.n	80027ea <I2S_IRQHandler+0x34>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002830:	9b03      	ldr	r3, [sp, #12]
 8002832:	f013 0f02 	tst.w	r3, #2
 8002836:	d004      	beq.n	8002842 <I2S_IRQHandler+0x8c>
 8002838:	6823      	ldr	r3, [r4, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002840:	d11d      	bne.n	800287e <I2S_IRQHandler+0xc8>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002842:	9b03      	ldr	r3, [sp, #12]
 8002844:	f013 0f08 	tst.w	r3, #8
 8002848:	d0c5      	beq.n	80027d6 <I2S_IRQHandler+0x20>
 800284a:	6823      	ldr	r3, [r4, #0]
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	f012 0f20 	tst.w	r2, #32
 8002852:	d0c0      	beq.n	80027d6 <I2S_IRQHandler+0x20>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800285a:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800285c:	2300      	movs	r3, #0
 800285e:	9302      	str	r3, [sp, #8]
 8002860:	6823      	ldr	r3, [r4, #0]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	9302      	str	r3, [sp, #8]
 8002866:	9b02      	ldr	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8002868:	2301      	movs	r3, #1
 800286a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800286e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002870:	f043 0304 	orr.w	r3, r3, #4
 8002874:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002876:	4620      	mov	r0, r4
 8002878:	f7ff ff9c 	bl	80027b4 <HAL_I2S_ErrorCallback>
}
 800287c:	e7ab      	b.n	80027d6 <I2S_IRQHandler+0x20>
      I2S_Transmit_IT(hi2s);
 800287e:	4620      	mov	r0, r4
 8002880:	f7ff ff5f 	bl	8002742 <I2S_Transmit_IT>
 8002884:	e7dd      	b.n	8002842 <I2S_IRQHandler+0x8c>

08002886 <HAL_I2SEx_TxRxCpltCallback>:
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002886:	4770      	bx	lr

08002888 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002888:	b508      	push	{r3, lr}
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800288a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800288c:	1c9a      	adds	r2, r3, #2
 800288e:	6242      	str	r2, [r0, #36]	; 0x24
 8002890:	6802      	ldr	r2, [r0, #0]
 8002892:	881b      	ldrh	r3, [r3, #0]
 8002894:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8002896:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002898:	b29b      	uxth	r3, r3
 800289a:	3b01      	subs	r3, #1
 800289c:	b29b      	uxth	r3, r3
 800289e:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80028a0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	b93b      	cbnz	r3, 80028b6 <I2SEx_TxISR_I2S+0x2e>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80028a6:	6802      	ldr	r2, [r0, #0]
 80028a8:	6853      	ldr	r3, [r2, #4]
 80028aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028ae:	6053      	str	r3, [r2, #4]

    if (hi2s->RxXferCount == 0U)
 80028b0:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	b103      	cbz	r3, 80028b8 <I2SEx_TxISR_I2S+0x30>
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80028b6:	bd08      	pop	{r3, pc}
      hi2s->State = HAL_I2S_STATE_READY;
 80028b8:	2301      	movs	r3, #1
 80028ba:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80028be:	f7ff ffe2 	bl	8002886 <HAL_I2SEx_TxRxCpltCallback>
}
 80028c2:	e7f8      	b.n	80028b6 <I2SEx_TxISR_I2S+0x2e>

080028c4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80028c4:	b508      	push	{r3, lr}
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80028c6:	6802      	ldr	r2, [r0, #0]
 80028c8:	4b15      	ldr	r3, [pc, #84]	; (8002920 <I2SEx_RxISR_I2SExt+0x5c>)
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d01c      	beq.n	8002908 <I2SEx_RxISR_I2SExt+0x44>
 80028ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028d2:	68da      	ldr	r2, [r3, #12]
 80028d4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80028d6:	1c99      	adds	r1, r3, #2
 80028d8:	62c1      	str	r1, [r0, #44]	; 0x2c
 80028da:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80028dc:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80028de:	b29b      	uxth	r3, r3
 80028e0:	3b01      	subs	r3, #1
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	8643      	strh	r3, [r0, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80028e6:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	b963      	cbnz	r3, 8002906 <I2SEx_RxISR_I2SExt+0x42>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80028ec:	6802      	ldr	r2, [r0, #0]
 80028ee:	4b0c      	ldr	r3, [pc, #48]	; (8002920 <I2SEx_RxISR_I2SExt+0x5c>)
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d00c      	beq.n	800290e <I2SEx_RxISR_I2SExt+0x4a>
 80028f4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80028f8:	6853      	ldr	r3, [r2, #4]
 80028fa:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80028fe:	6053      	str	r3, [r2, #4]

    if (hi2s->TxXferCount == 0U)
 8002900:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002902:	b29b      	uxth	r3, r3
 8002904:	b12b      	cbz	r3, 8002912 <I2SEx_RxISR_I2SExt+0x4e>
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002906:	bd08      	pop	{r3, pc}
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002908:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800290c:	e7e1      	b.n	80028d2 <I2SEx_RxISR_I2SExt+0xe>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800290e:	4a05      	ldr	r2, [pc, #20]	; (8002924 <I2SEx_RxISR_I2SExt+0x60>)
 8002910:	e7f2      	b.n	80028f8 <I2SEx_RxISR_I2SExt+0x34>
      hi2s->State = HAL_I2S_STATE_READY;
 8002912:	2301      	movs	r3, #1
 8002914:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002918:	f7ff ffb5 	bl	8002886 <HAL_I2SEx_TxRxCpltCallback>
}
 800291c:	e7f3      	b.n	8002906 <I2SEx_RxISR_I2SExt+0x42>
 800291e:	bf00      	nop
 8002920:	40003800 	.word	0x40003800
 8002924:	40003400 	.word	0x40003400

08002928 <I2SEx_TxISR_I2SExt>:
{
 8002928:	b508      	push	{r3, lr}
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800292a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800292c:	1c9a      	adds	r2, r3, #2
 800292e:	6242      	str	r2, [r0, #36]	; 0x24
 8002930:	881a      	ldrh	r2, [r3, #0]
 8002932:	6801      	ldr	r1, [r0, #0]
 8002934:	4b13      	ldr	r3, [pc, #76]	; (8002984 <I2SEx_TxISR_I2SExt+0x5c>)
 8002936:	4299      	cmp	r1, r3
 8002938:	d018      	beq.n	800296c <I2SEx_TxISR_I2SExt+0x44>
 800293a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800293e:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002940:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002942:	b29b      	uxth	r3, r3
 8002944:	3b01      	subs	r3, #1
 8002946:	b29b      	uxth	r3, r3
 8002948:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 800294a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800294c:	b29b      	uxth	r3, r3
 800294e:	b963      	cbnz	r3, 800296a <I2SEx_TxISR_I2SExt+0x42>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002950:	6802      	ldr	r2, [r0, #0]
 8002952:	4b0c      	ldr	r3, [pc, #48]	; (8002984 <I2SEx_TxISR_I2SExt+0x5c>)
 8002954:	429a      	cmp	r2, r3
 8002956:	d00c      	beq.n	8002972 <I2SEx_TxISR_I2SExt+0x4a>
 8002958:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800295c:	6853      	ldr	r3, [r2, #4]
 800295e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002962:	6053      	str	r3, [r2, #4]
    if (hi2s->RxXferCount == 0U)
 8002964:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8002966:	b29b      	uxth	r3, r3
 8002968:	b12b      	cbz	r3, 8002976 <I2SEx_TxISR_I2SExt+0x4e>
}
 800296a:	bd08      	pop	{r3, pc}
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800296c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002970:	e7e5      	b.n	800293e <I2SEx_TxISR_I2SExt+0x16>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002972:	4a05      	ldr	r2, [pc, #20]	; (8002988 <I2SEx_TxISR_I2SExt+0x60>)
 8002974:	e7f2      	b.n	800295c <I2SEx_TxISR_I2SExt+0x34>
      hi2s->State = HAL_I2S_STATE_READY;
 8002976:	2301      	movs	r3, #1
 8002978:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800297c:	f7ff ff83 	bl	8002886 <HAL_I2SEx_TxRxCpltCallback>
}
 8002980:	e7f3      	b.n	800296a <I2SEx_TxISR_I2SExt+0x42>
 8002982:	bf00      	nop
 8002984:	40003800 	.word	0x40003800
 8002988:	40003400 	.word	0x40003400

0800298c <I2SEx_RxISR_I2S>:
{
 800298c:	b508      	push	{r3, lr}
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800298e:	6803      	ldr	r3, [r0, #0]
 8002990:	68da      	ldr	r2, [r3, #12]
 8002992:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002994:	1c99      	adds	r1, r3, #2
 8002996:	62c1      	str	r1, [r0, #44]	; 0x2c
 8002998:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800299a:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800299c:	b29b      	uxth	r3, r3
 800299e:	3b01      	subs	r3, #1
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	8643      	strh	r3, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 80029a4:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	b93b      	cbnz	r3, 80029ba <I2SEx_RxISR_I2S+0x2e>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80029aa:	6802      	ldr	r2, [r0, #0]
 80029ac:	6853      	ldr	r3, [r2, #4]
 80029ae:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80029b2:	6053      	str	r3, [r2, #4]
    if (hi2s->TxXferCount == 0U)
 80029b4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	b103      	cbz	r3, 80029bc <I2SEx_RxISR_I2S+0x30>
}
 80029ba:	bd08      	pop	{r3, pc}
      hi2s->State = HAL_I2S_STATE_READY;
 80029bc:	2301      	movs	r3, #1
 80029be:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80029c2:	f7ff ff60 	bl	8002886 <HAL_I2SEx_TxRxCpltCallback>
}
 80029c6:	e7f8      	b.n	80029ba <I2SEx_RxISR_I2S+0x2e>

080029c8 <HAL_I2SEx_FullDuplex_IRQHandler>:
{
 80029c8:	b510      	push	{r4, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80029ce:	6803      	ldr	r3, [r0, #0]
 80029d0:	689a      	ldr	r2, [r3, #8]
 80029d2:	9205      	str	r2, [sp, #20]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80029d4:	4a70      	ldr	r2, [pc, #448]	; (8002b98 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d06f      	beq.n	8002aba <HAL_I2SEx_FullDuplex_IRQHandler+0xf2>
 80029da:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80029de:	6891      	ldr	r1, [r2, #8]
 80029e0:	9104      	str	r1, [sp, #16]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	9303      	str	r3, [sp, #12]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80029e6:	6853      	ldr	r3, [r2, #4]
 80029e8:	9302      	str	r3, [sp, #8]
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80029ea:	6863      	ldr	r3, [r4, #4]
 80029ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029f0:	d001      	beq.n	80029f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x2e>
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d170      	bne.n	8002ad8 <HAL_I2SEx_FullDuplex_IRQHandler+0x110>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80029f6:	9b05      	ldr	r3, [sp, #20]
 80029f8:	f013 0f02 	tst.w	r3, #2
 80029fc:	d003      	beq.n	8002a06 <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
 80029fe:	9b03      	ldr	r3, [sp, #12]
 8002a00:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002a04:	d15c      	bne.n	8002ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0xf8>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002a06:	9b04      	ldr	r3, [sp, #16]
 8002a08:	f013 0f01 	tst.w	r3, #1
 8002a0c:	d003      	beq.n	8002a16 <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
 8002a0e:	9b02      	ldr	r3, [sp, #8]
 8002a10:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002a14:	d158      	bne.n	8002ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x100>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002a16:	9b04      	ldr	r3, [sp, #16]
 8002a18:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002a1c:	d024      	beq.n	8002a68 <HAL_I2SEx_FullDuplex_IRQHandler+0xa0>
 8002a1e:	9b02      	ldr	r3, [sp, #8]
 8002a20:	f013 0f20 	tst.w	r3, #32
 8002a24:	d020      	beq.n	8002a68 <HAL_I2SEx_FullDuplex_IRQHandler+0xa0>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a26:	6822      	ldr	r2, [r4, #0]
 8002a28:	4b5b      	ldr	r3, [pc, #364]	; (8002b98 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d050      	beq.n	8002ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x108>
 8002a2e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002a32:	6853      	ldr	r3, [r2, #4]
 8002a34:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002a38:	6053      	str	r3, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a3a:	6822      	ldr	r2, [r4, #0]
 8002a3c:	6853      	ldr	r3, [r2, #4]
 8002a3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a42:	6053      	str	r3, [r2, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002a44:	2300      	movs	r3, #0
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	6823      	ldr	r3, [r4, #0]
 8002a4a:	68da      	ldr	r2, [r3, #12]
 8002a4c:	9200      	str	r2, [sp, #0]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	9b00      	ldr	r3, [sp, #0]
      hi2s->State = HAL_I2S_STATE_READY;
 8002a54:	2301      	movs	r3, #1
 8002a56:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002a5a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002a5c:	f043 0302 	orr.w	r3, r3, #2
 8002a60:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002a62:	4620      	mov	r0, r4
 8002a64:	f7ff fea6 	bl	80027b4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002a68:	9b05      	ldr	r3, [sp, #20]
 8002a6a:	f013 0f08 	tst.w	r3, #8
 8002a6e:	d022      	beq.n	8002ab6 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
 8002a70:	9b03      	ldr	r3, [sp, #12]
 8002a72:	f013 0f20 	tst.w	r3, #32
 8002a76:	d01e      	beq.n	8002ab6 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a78:	6822      	ldr	r2, [r4, #0]
 8002a7a:	6853      	ldr	r3, [r2, #4]
 8002a7c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a80:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a82:	6822      	ldr	r2, [r4, #0]
 8002a84:	4b44      	ldr	r3, [pc, #272]	; (8002b98 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d024      	beq.n	8002ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002a8a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002a8e:	6853      	ldr	r3, [r2, #4]
 8002a90:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002a94:	6053      	str	r3, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002a96:	2300      	movs	r3, #0
 8002a98:	9301      	str	r3, [sp, #4]
 8002a9a:	6823      	ldr	r3, [r4, #0]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	9301      	str	r3, [sp, #4]
 8002aa0:	9b01      	ldr	r3, [sp, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002aa8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002aaa:	f043 0304 	orr.w	r3, r3, #4
 8002aae:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002ab0:	4620      	mov	r0, r4
 8002ab2:	f7ff fe7f 	bl	80027b4 <HAL_I2S_ErrorCallback>
}
 8002ab6:	b006      	add	sp, #24
 8002ab8:	bd10      	pop	{r4, pc}
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002aba:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8002abe:	e78e      	b.n	80029de <HAL_I2SEx_FullDuplex_IRQHandler+0x16>
      I2SEx_TxISR_I2S(hi2s);
 8002ac0:	4620      	mov	r0, r4
 8002ac2:	f7ff fee1 	bl	8002888 <I2SEx_TxISR_I2S>
 8002ac6:	e79e      	b.n	8002a06 <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
      I2SEx_RxISR_I2SExt(hi2s);
 8002ac8:	4620      	mov	r0, r4
 8002aca:	f7ff fefb 	bl	80028c4 <I2SEx_RxISR_I2SExt>
 8002ace:	e7a2      	b.n	8002a16 <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ad0:	4a32      	ldr	r2, [pc, #200]	; (8002b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 8002ad2:	e7ae      	b.n	8002a32 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ad4:	4a31      	ldr	r2, [pc, #196]	; (8002b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 8002ad6:	e7da      	b.n	8002a8e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002ad8:	9b04      	ldr	r3, [sp, #16]
 8002ada:	f013 0f02 	tst.w	r3, #2
 8002ade:	d003      	beq.n	8002ae8 <HAL_I2SEx_FullDuplex_IRQHandler+0x120>
 8002ae0:	9b02      	ldr	r3, [sp, #8]
 8002ae2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002ae6:	d14a      	bne.n	8002b7e <HAL_I2SEx_FullDuplex_IRQHandler+0x1b6>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002ae8:	9b05      	ldr	r3, [sp, #20]
 8002aea:	f013 0f01 	tst.w	r3, #1
 8002aee:	d003      	beq.n	8002af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
 8002af0:	9b03      	ldr	r3, [sp, #12]
 8002af2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002af6:	d146      	bne.n	8002b86 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002af8:	9b05      	ldr	r3, [sp, #20]
 8002afa:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002afe:	d01c      	beq.n	8002b3a <HAL_I2SEx_FullDuplex_IRQHandler+0x172>
 8002b00:	9b03      	ldr	r3, [sp, #12]
 8002b02:	f013 0f20 	tst.w	r3, #32
 8002b06:	d018      	beq.n	8002b3a <HAL_I2SEx_FullDuplex_IRQHandler+0x172>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b08:	6822      	ldr	r2, [r4, #0]
 8002b0a:	6853      	ldr	r3, [r2, #4]
 8002b0c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002b10:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b12:	6822      	ldr	r2, [r4, #0]
 8002b14:	4b20      	ldr	r3, [pc, #128]	; (8002b98 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d039      	beq.n	8002b8e <HAL_I2SEx_FullDuplex_IRQHandler+0x1c6>
 8002b1a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002b1e:	6853      	ldr	r3, [r2, #4]
 8002b20:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b24:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8002b26:	2301      	movs	r3, #1
 8002b28:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002b2c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002b2e:	f043 0302 	orr.w	r3, r3, #2
 8002b32:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002b34:	4620      	mov	r0, r4
 8002b36:	f7ff fe3d 	bl	80027b4 <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002b3a:	9b04      	ldr	r3, [sp, #16]
 8002b3c:	f013 0f08 	tst.w	r3, #8
 8002b40:	d0b9      	beq.n	8002ab6 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
 8002b42:	9b02      	ldr	r3, [sp, #8]
 8002b44:	f013 0f20 	tst.w	r3, #32
 8002b48:	d0b5      	beq.n	8002ab6 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b4a:	6822      	ldr	r2, [r4, #0]
 8002b4c:	4b12      	ldr	r3, [pc, #72]	; (8002b98 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d01f      	beq.n	8002b92 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
 8002b52:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002b56:	6853      	ldr	r3, [r2, #4]
 8002b58:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b5c:	6053      	str	r3, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b5e:	6822      	ldr	r2, [r4, #0]
 8002b60:	6853      	ldr	r3, [r2, #4]
 8002b62:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002b66:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002b6e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002b70:	f043 0304 	orr.w	r3, r3, #4
 8002b74:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002b76:	4620      	mov	r0, r4
 8002b78:	f7ff fe1c 	bl	80027b4 <HAL_I2S_ErrorCallback>
}
 8002b7c:	e79b      	b.n	8002ab6 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      I2SEx_TxISR_I2SExt(hi2s);
 8002b7e:	4620      	mov	r0, r4
 8002b80:	f7ff fed2 	bl	8002928 <I2SEx_TxISR_I2SExt>
 8002b84:	e7b0      	b.n	8002ae8 <HAL_I2SEx_FullDuplex_IRQHandler+0x120>
      I2SEx_RxISR_I2S(hi2s);
 8002b86:	4620      	mov	r0, r4
 8002b88:	f7ff ff00 	bl	800298c <I2SEx_RxISR_I2S>
 8002b8c:	e7b4      	b.n	8002af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b8e:	4a03      	ldr	r2, [pc, #12]	; (8002b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 8002b90:	e7c5      	b.n	8002b1e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b92:	4a02      	ldr	r2, [pc, #8]	; (8002b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 8002b94:	e7df      	b.n	8002b56 <HAL_I2SEx_FullDuplex_IRQHandler+0x18e>
 8002b96:	bf00      	nop
 8002b98:	40003800 	.word	0x40003800
 8002b9c:	40003400 	.word	0x40003400

08002ba0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ba0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ba4:	b083      	sub	sp, #12
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ba6:	f8d0 8000 	ldr.w	r8, [r0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8002baa:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8002bae:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8002bb2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d854      	bhi.n	8002c64 <PCD_WriteEmptyTxFifo+0xc4>
 8002bba:	4607      	mov	r7, r0
 8002bbc:	460c      	mov	r4, r1
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8002bbe:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 8002bc0:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8002bc4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002bc8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d300      	bcc.n	8002bd0 <PCD_WriteEmptyTxFifo+0x30>
  len = ep->xfer_len - ep->xfer_count;
 8002bce:	461a      	mov	r2, r3
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 8002bd0:	f102 0903 	add.w	r9, r2, #3
 8002bd4:	ea4f 0999 	mov.w	r9, r9, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002bd8:	e015      	b.n	8002c06 <PCD_WriteEmptyTxFifo+0x66>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 8002bda:	f106 0903 	add.w	r9, r6, #3
 8002bde:	ea4f 0999 	mov.w	r9, r9, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002be2:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8002be6:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8002bea:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8002bec:	7c3b      	ldrb	r3, [r7, #16]
 8002bee:	9300      	str	r3, [sp, #0]
 8002bf0:	b2b3      	uxth	r3, r6
 8002bf2:	b2e2      	uxtb	r2, r4
 8002bf4:	4640      	mov	r0, r8
 8002bf6:	f001 fec3 	bl	8004980 <USB_WritePacket>
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 8002bfa:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8002bfc:	4433      	add	r3, r6
 8002bfe:	64ab      	str	r3, [r5, #72]	; 0x48
    ep->xfer_count += len;
 8002c00:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8002c02:	4433      	add	r3, r6
 8002c04:	656b      	str	r3, [r5, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c06:	eb08 1344 	add.w	r3, r8, r4, lsl #5
 8002c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	454b      	cmp	r3, r9
 8002c14:	d312      	bcc.n	8002c3c <PCD_WriteEmptyTxFifo+0x9c>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c16:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 8002c1a:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8002c1e:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8002c20:	6d13      	ldr	r3, [r2, #80]	; 0x50
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c22:	4299      	cmp	r1, r3
 8002c24:	d20a      	bcs.n	8002c3c <PCD_WriteEmptyTxFifo+0x9c>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c26:	b14b      	cbz	r3, 8002c3c <PCD_WriteEmptyTxFifo+0x9c>
    len = ep->xfer_len - ep->xfer_count;
 8002c28:	1a5b      	subs	r3, r3, r1
    if (len > ep->maxpacket)
 8002c2a:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 8002c2e:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8002c32:	6c56      	ldr	r6, [r2, #68]	; 0x44
 8002c34:	429e      	cmp	r6, r3
 8002c36:	d3d0      	bcc.n	8002bda <PCD_WriteEmptyTxFifo+0x3a>
    len = ep->xfer_len - ep->xfer_count;
 8002c38:	461e      	mov	r6, r3
 8002c3a:	e7ce      	b.n	8002bda <PCD_WriteEmptyTxFifo+0x3a>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002c3c:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 8002c40:	eb07 0780 	add.w	r7, r7, r0, lsl #2
 8002c44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002c46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d80f      	bhi.n	8002c6c <PCD_WriteEmptyTxFifo+0xcc>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c4c:	f004 040f 	and.w	r4, r4, #15
 8002c50:	2301      	movs	r3, #1
 8002c52:	40a3      	lsls	r3, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c54:	f8d8 4834 	ldr.w	r4, [r8, #2100]	; 0x834
 8002c58:	ea24 0403 	bic.w	r4, r4, r3
 8002c5c:	f8c8 4834 	str.w	r4, [r8, #2100]	; 0x834
  }

  return HAL_OK;
 8002c60:	2000      	movs	r0, #0
 8002c62:	e000      	b.n	8002c66 <PCD_WriteEmptyTxFifo+0xc6>
    return HAL_ERROR;
 8002c64:	2001      	movs	r0, #1
}
 8002c66:	b003      	add	sp, #12
 8002c68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return HAL_OK;
 8002c6c:	2000      	movs	r0, #0
 8002c6e:	e7fa      	b.n	8002c66 <PCD_WriteEmptyTxFifo+0xc6>

08002c70 <HAL_PCD_Init>:
{
 8002c70:	b570      	push	{r4, r5, r6, lr}
 8002c72:	b08a      	sub	sp, #40	; 0x28
  if (hpcd == NULL)
 8002c74:	2800      	cmp	r0, #0
 8002c76:	f000 8090 	beq.w	8002d9a <HAL_PCD_Init+0x12a>
 8002c7a:	4605      	mov	r5, r0
  USBx = hpcd->Instance;
 8002c7c:	6804      	ldr	r4, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c7e:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8002c82:	b33b      	cbz	r3, 8002cd4 <HAL_PCD_Init+0x64>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c84:	2303      	movs	r3, #3
 8002c86:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002c8a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002c8c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002c90:	d101      	bne.n	8002c96 <HAL_PCD_Init+0x26>
    hpcd->Init.dma_enable = 0U;
 8002c92:	2300      	movs	r3, #0
 8002c94:	612b      	str	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 8002c96:	6828      	ldr	r0, [r5, #0]
 8002c98:	f001 fbfe 	bl	8004498 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c9c:	462c      	mov	r4, r5
 8002c9e:	f854 6b10 	ldr.w	r6, [r4], #16
 8002ca2:	46ec      	mov	ip, sp
 8002ca4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ca6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002caa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002cb0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002cb4:	e88c 0003 	stmia.w	ip, {r0, r1}
 8002cb8:	1d2b      	adds	r3, r5, #4
 8002cba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cbc:	4630      	mov	r0, r6
 8002cbe:	f001 fb2d 	bl	800431c <USB_CoreInit>
 8002cc2:	4604      	mov	r4, r0
 8002cc4:	b158      	cbz	r0, 8002cde <HAL_PCD_Init+0x6e>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
    return HAL_ERROR;
 8002ccc:	2401      	movs	r4, #1
}
 8002cce:	4620      	mov	r0, r4
 8002cd0:	b00a      	add	sp, #40	; 0x28
 8002cd2:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8002cd4:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 8002cd8:	f003 f856 	bl	8005d88 <HAL_PCD_MspInit>
 8002cdc:	e7d2      	b.n	8002c84 <HAL_PCD_Init+0x14>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002cde:	2100      	movs	r1, #0
 8002ce0:	6828      	ldr	r0, [r5, #0]
 8002ce2:	f001 fbdf 	bl	80044a4 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ce6:	4623      	mov	r3, r4
 8002ce8:	e016      	b.n	8002d18 <HAL_PCD_Init+0xa8>
    hpcd->IN_ep[i].is_in = 1U;
 8002cea:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8002cee:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8002cf8:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002cfc:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d00:	2100      	movs	r1, #0
 8002d02:	f882 103f 	strb.w	r1, [r2, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d06:	6451      	str	r1, [r2, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d08:	6491      	str	r1, [r2, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d0a:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8002d0e:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8002d12:	6511      	str	r1, [r2, #80]	; 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d14:	3301      	adds	r3, #1
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	6869      	ldr	r1, [r5, #4]
 8002d1a:	428b      	cmp	r3, r1
 8002d1c:	d3e5      	bcc.n	8002cea <HAL_PCD_Init+0x7a>
 8002d1e:	e016      	b.n	8002d4e <HAL_PCD_Init+0xde>
    hpcd->OUT_ep[i].is_in = 0U;
 8002d20:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 8002d24:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 8002d2e:	f883 41fc 	strb.w	r4, [r3, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d32:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d36:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d3a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d3e:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 8002d42:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8002d46:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d4a:	3401      	adds	r4, #1
 8002d4c:	b2e4      	uxtb	r4, r4
 8002d4e:	42a1      	cmp	r1, r4
 8002d50:	d8e6      	bhi.n	8002d20 <HAL_PCD_Init+0xb0>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d52:	462c      	mov	r4, r5
 8002d54:	f854 6b10 	ldr.w	r6, [r4], #16
 8002d58:	46ec      	mov	ip, sp
 8002d5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d5c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002d60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d62:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002d66:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d6a:	e88c 0003 	stmia.w	ip, {r0, r1}
 8002d6e:	1d2b      	adds	r3, r5, #4
 8002d70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d72:	4630      	mov	r0, r6
 8002d74:	f001 fbdc 	bl	8004530 <USB_DevInit>
 8002d78:	4604      	mov	r4, r0
 8002d7a:	b120      	cbz	r0, 8002d86 <HAL_PCD_Init+0x116>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
    return HAL_ERROR;
 8002d82:	2401      	movs	r4, #1
 8002d84:	e7a3      	b.n	8002cce <HAL_PCD_Init+0x5e>
  hpcd->USB_Address = 0U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d92:	6828      	ldr	r0, [r5, #0]
 8002d94:	f001 ffb0 	bl	8004cf8 <USB_DevDisconnect>
  return HAL_OK;
 8002d98:	e799      	b.n	8002cce <HAL_PCD_Init+0x5e>
    return HAL_ERROR;
 8002d9a:	2401      	movs	r4, #1
 8002d9c:	e797      	b.n	8002cce <HAL_PCD_Init+0x5e>

08002d9e <HAL_PCD_Start>:
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d9e:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hpcd);
 8002da0:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d019      	beq.n	8002ddc <HAL_PCD_Start+0x3e>
{
 8002da8:	b510      	push	{r4, lr}
 8002daa:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8002dac:	2301      	movs	r3, #1
 8002dae:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002db2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d009      	beq.n	8002dcc <HAL_PCD_Start+0x2e>
  __HAL_PCD_ENABLE(hpcd);
 8002db8:	6820      	ldr	r0, [r4, #0]
 8002dba:	f001 fb67 	bl	800448c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002dbe:	6820      	ldr	r0, [r4, #0]
 8002dc0:	f001 ff8c 	bl	8004cdc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002dc4:	2000      	movs	r0, #0
 8002dc6:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8002dca:	bd10      	pop	{r4, pc}
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002dcc:	6983      	ldr	r3, [r0, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d0f2      	beq.n	8002db8 <HAL_PCD_Start+0x1a>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002dd2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd8:	6393      	str	r3, [r2, #56]	; 0x38
 8002dda:	e7ed      	b.n	8002db8 <HAL_PCD_Start+0x1a>
  __HAL_LOCK(hpcd);
 8002ddc:	2002      	movs	r0, #2
}
 8002dde:	4770      	bx	lr

08002de0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002de0:	b570      	push	{r4, r5, r6, lr}
 8002de2:	4604      	mov	r4, r0
 8002de4:	460d      	mov	r5, r1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002de6:	6800      	ldr	r0, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002de8:	6c06      	ldr	r6, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002dea:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8002dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002df2:	689a      	ldr	r2, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002df4:	6921      	ldr	r1, [r4, #16]
 8002df6:	2901      	cmp	r1, #1
 8002df8:	d011      	beq.n	8002e1e <PCD_EP_OutXfrComplete_int+0x3e>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002dfa:	4934      	ldr	r1, [pc, #208]	; (8002ecc <PCD_EP_OutXfrComplete_int+0xec>)
 8002dfc:	428e      	cmp	r6, r1
 8002dfe:	d04e      	beq.n	8002e9e <PCD_EP_OutXfrComplete_int+0xbe>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002e00:	b93d      	cbnz	r5, 8002e12 <PCD_EP_OutXfrComplete_int+0x32>
 8002e02:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 8002e06:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002e0a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d056      	beq.n	8002ec0 <PCD_EP_OutXfrComplete_int+0xe0>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e12:	b2e9      	uxtb	r1, r5
 8002e14:	4620      	mov	r0, r4
 8002e16:	f003 f809 	bl	8005e2c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
}
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	bd70      	pop	{r4, r5, r6, pc}
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002e1e:	f012 0f08 	tst.w	r2, #8
 8002e22:	d009      	beq.n	8002e38 <PCD_EP_OutXfrComplete_int+0x58>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e24:	492a      	ldr	r1, [pc, #168]	; (8002ed0 <PCD_EP_OutXfrComplete_int+0xf0>)
 8002e26:	428e      	cmp	r6, r1
 8002e28:	d9f7      	bls.n	8002e1a <PCD_EP_OutXfrComplete_int+0x3a>
 8002e2a:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8002e2e:	d0f4      	beq.n	8002e1a <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e30:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002e34:	609a      	str	r2, [r3, #8]
 8002e36:	e7f0      	b.n	8002e1a <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002e38:	f012 0f20 	tst.w	r2, #32
 8002e3c:	d002      	beq.n	8002e44 <PCD_EP_OutXfrComplete_int+0x64>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e3e:	2220      	movs	r2, #32
 8002e40:	609a      	str	r2, [r3, #8]
 8002e42:	e7ea      	b.n	8002e1a <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002e44:	f012 0f28 	tst.w	r2, #40	; 0x28
 8002e48:	d1e7      	bne.n	8002e1a <PCD_EP_OutXfrComplete_int+0x3a>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e4a:	4921      	ldr	r1, [pc, #132]	; (8002ed0 <PCD_EP_OutXfrComplete_int+0xf0>)
 8002e4c:	428e      	cmp	r6, r1
 8002e4e:	d906      	bls.n	8002e5e <PCD_EP_OutXfrComplete_int+0x7e>
 8002e50:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8002e54:	d003      	beq.n	8002e5e <PCD_EP_OutXfrComplete_int+0x7e>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e56:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002e5a:	609a      	str	r2, [r3, #8]
 8002e5c:	e7dd      	b.n	8002e1a <PCD_EP_OutXfrComplete_int+0x3a>
          hpcd->OUT_ep[epnum].maxpacket -
 8002e5e:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
 8002e62:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002e66:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002e70:	1acb      	subs	r3, r1, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002e72:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002e76:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
 8002e7a:	440b      	add	r3, r1
 8002e7c:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002e80:	b915      	cbnz	r5, 8002e88 <PCD_EP_OutXfrComplete_int+0xa8>
 8002e82:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8002e86:	b123      	cbz	r3, 8002e92 <PCD_EP_OutXfrComplete_int+0xb2>
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e88:	b2e9      	uxtb	r1, r5
 8002e8a:	4620      	mov	r0, r4
 8002e8c:	f002 ffce 	bl	8005e2c <HAL_PCD_DataOutStageCallback>
 8002e90:	e7c3      	b.n	8002e1a <PCD_EP_OutXfrComplete_int+0x3a>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e92:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8002e96:	2101      	movs	r1, #1
 8002e98:	f001 ff82 	bl	8004da0 <USB_EP0_OutStart>
 8002e9c:	e7f4      	b.n	8002e88 <PCD_EP_OutXfrComplete_int+0xa8>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002e9e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8002ea2:	d003      	beq.n	8002eac <PCD_EP_OutXfrComplete_int+0xcc>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ea4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002ea8:	609a      	str	r2, [r3, #8]
 8002eaa:	e7b6      	b.n	8002e1a <PCD_EP_OutXfrComplete_int+0x3a>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002eac:	f012 0f20 	tst.w	r2, #32
 8002eb0:	d001      	beq.n	8002eb6 <PCD_EP_OutXfrComplete_int+0xd6>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002eb6:	b2e9      	uxtb	r1, r5
 8002eb8:	4620      	mov	r0, r4
 8002eba:	f002 ffb7 	bl	8005e2c <HAL_PCD_DataOutStageCallback>
 8002ebe:	e7ac      	b.n	8002e1a <PCD_EP_OutXfrComplete_int+0x3a>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002ec0:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	f001 ff6b 	bl	8004da0 <USB_EP0_OutStart>
 8002eca:	e7a2      	b.n	8002e12 <PCD_EP_OutXfrComplete_int+0x32>
 8002ecc:	4f54310a 	.word	0x4f54310a
 8002ed0:	4f54300a 	.word	0x4f54300a

08002ed4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ed4:	b538      	push	{r3, r4, r5, lr}
 8002ed6:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ed8:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002eda:	6c1d      	ldr	r5, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002edc:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8002ee0:	f8d3 1b08 	ldr.w	r1, [r3, #2824]	; 0xb08

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ee4:	4a0e      	ldr	r2, [pc, #56]	; (8002f20 <PCD_EP_OutSetupPacket_int+0x4c>)
 8002ee6:	4295      	cmp	r5, r2
 8002ee8:	d907      	bls.n	8002efa <PCD_EP_OutSetupPacket_int+0x26>
 8002eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eee:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8002ef2:	d002      	beq.n	8002efa <PCD_EP_OutSetupPacket_int+0x26>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ef4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002ef8:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002efa:	4620      	mov	r0, r4
 8002efc:	f002 ff8e 	bl	8005e1c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002f00:	4b07      	ldr	r3, [pc, #28]	; (8002f20 <PCD_EP_OutSetupPacket_int+0x4c>)
 8002f02:	429d      	cmp	r5, r3
 8002f04:	d902      	bls.n	8002f0c <PCD_EP_OutSetupPacket_int+0x38>
 8002f06:	6923      	ldr	r3, [r4, #16]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d001      	beq.n	8002f10 <PCD_EP_OutSetupPacket_int+0x3c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
  }

  return HAL_OK;
}
 8002f0c:	2000      	movs	r0, #0
 8002f0e:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f10:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8002f14:	2101      	movs	r1, #1
 8002f16:	6820      	ldr	r0, [r4, #0]
 8002f18:	f001 ff42 	bl	8004da0 <USB_EP0_OutStart>
 8002f1c:	e7f6      	b.n	8002f0c <PCD_EP_OutSetupPacket_int+0x38>
 8002f1e:	bf00      	nop
 8002f20:	4f54300a 	.word	0x4f54300a

08002f24 <HAL_PCD_IRQHandler>:
{
 8002f24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f28:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f2a:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002f2c:	4628      	mov	r0, r5
 8002f2e:	f001 ff22 	bl	8004d76 <USB_GetMode>
 8002f32:	b108      	cbz	r0, 8002f38 <HAL_PCD_IRQHandler+0x14>
}
 8002f34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f38:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002f3a:	6820      	ldr	r0, [r4, #0]
 8002f3c:	f001 feea 	bl	8004d14 <USB_ReadInterrupts>
 8002f40:	2800      	cmp	r0, #0
 8002f42:	d0f7      	beq.n	8002f34 <HAL_PCD_IRQHandler+0x10>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002f44:	6820      	ldr	r0, [r4, #0]
 8002f46:	f001 fee5 	bl	8004d14 <USB_ReadInterrupts>
 8002f4a:	f010 0f02 	tst.w	r0, #2
 8002f4e:	d004      	beq.n	8002f5a <HAL_PCD_IRQHandler+0x36>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002f50:	6822      	ldr	r2, [r4, #0]
 8002f52:	6953      	ldr	r3, [r2, #20]
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002f5a:	6820      	ldr	r0, [r4, #0]
 8002f5c:	f001 feda 	bl	8004d14 <USB_ReadInterrupts>
 8002f60:	f010 0f10 	tst.w	r0, #16
 8002f64:	d013      	beq.n	8002f8e <HAL_PCD_IRQHandler+0x6a>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f66:	6822      	ldr	r2, [r4, #0]
 8002f68:	6993      	ldr	r3, [r2, #24]
 8002f6a:	f023 0310 	bic.w	r3, r3, #16
 8002f6e:	6193      	str	r3, [r2, #24]
      temp = USBx->GRXSTSP;
 8002f70:	6a2f      	ldr	r7, [r5, #32]
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002f72:	f007 080f 	and.w	r8, r7, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002f76:	f3c7 4343 	ubfx	r3, r7, #17, #4
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d068      	beq.n	8003050 <HAL_PCD_IRQHandler+0x12c>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002f7e:	2b06      	cmp	r3, #6
 8002f80:	f000 8084 	beq.w	800308c <HAL_PCD_IRQHandler+0x168>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f84:	6822      	ldr	r2, [r4, #0]
 8002f86:	6993      	ldr	r3, [r2, #24]
 8002f88:	f043 0310 	orr.w	r3, r3, #16
 8002f8c:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002f8e:	6820      	ldr	r0, [r4, #0]
 8002f90:	f001 fec0 	bl	8004d14 <USB_ReadInterrupts>
 8002f94:	f410 2f00 	tst.w	r0, #524288	; 0x80000
 8002f98:	f040 808a 	bne.w	80030b0 <HAL_PCD_IRQHandler+0x18c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002f9c:	6820      	ldr	r0, [r4, #0]
 8002f9e:	f001 feb9 	bl	8004d14 <USB_ReadInterrupts>
 8002fa2:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 8002fa6:	f040 80cc 	bne.w	8003142 <HAL_PCD_IRQHandler+0x21e>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002faa:	6820      	ldr	r0, [r4, #0]
 8002fac:	f001 feb2 	bl	8004d14 <USB_ReadInterrupts>
 8002fb0:	2800      	cmp	r0, #0
 8002fb2:	f2c0 8136 	blt.w	8003222 <HAL_PCD_IRQHandler+0x2fe>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002fb6:	6820      	ldr	r0, [r4, #0]
 8002fb8:	f001 feac 	bl	8004d14 <USB_ReadInterrupts>
 8002fbc:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8002fc0:	d00a      	beq.n	8002fd8 <HAL_PCD_IRQHandler+0xb4>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002fc2:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 8002fc6:	f013 0f01 	tst.w	r3, #1
 8002fca:	f040 8144 	bne.w	8003256 <HAL_PCD_IRQHandler+0x332>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002fce:	6822      	ldr	r2, [r4, #0]
 8002fd0:	6953      	ldr	r3, [r2, #20]
 8002fd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fd6:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002fd8:	6820      	ldr	r0, [r4, #0]
 8002fda:	f001 fe9b 	bl	8004d14 <USB_ReadInterrupts>
 8002fde:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8002fe2:	f040 813c 	bne.w	800325e <HAL_PCD_IRQHandler+0x33a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002fe6:	6820      	ldr	r0, [r4, #0]
 8002fe8:	f001 fe94 	bl	8004d14 <USB_ReadInterrupts>
 8002fec:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8002ff0:	f040 8191 	bne.w	8003316 <HAL_PCD_IRQHandler+0x3f2>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002ff4:	6820      	ldr	r0, [r4, #0]
 8002ff6:	f001 fe8d 	bl	8004d14 <USB_ReadInterrupts>
 8002ffa:	f010 0f08 	tst.w	r0, #8
 8002ffe:	f040 81a2 	bne.w	8003346 <HAL_PCD_IRQHandler+0x422>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003002:	6820      	ldr	r0, [r4, #0]
 8003004:	f001 fe86 	bl	8004d14 <USB_ReadInterrupts>
 8003008:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 800300c:	f040 81a4 	bne.w	8003358 <HAL_PCD_IRQHandler+0x434>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003010:	6820      	ldr	r0, [r4, #0]
 8003012:	f001 fe7f 	bl	8004d14 <USB_ReadInterrupts>
 8003016:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 800301a:	f040 81a7 	bne.w	800336c <HAL_PCD_IRQHandler+0x448>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800301e:	6820      	ldr	r0, [r4, #0]
 8003020:	f001 fe78 	bl	8004d14 <USB_ReadInterrupts>
 8003024:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8003028:	f040 81aa 	bne.w	8003380 <HAL_PCD_IRQHandler+0x45c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800302c:	6820      	ldr	r0, [r4, #0]
 800302e:	f001 fe71 	bl	8004d14 <USB_ReadInterrupts>
 8003032:	f010 0f04 	tst.w	r0, #4
 8003036:	f43f af7d 	beq.w	8002f34 <HAL_PCD_IRQHandler+0x10>
      temp = hpcd->Instance->GOTGINT;
 800303a:	6823      	ldr	r3, [r4, #0]
 800303c:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800303e:	f015 0f04 	tst.w	r5, #4
 8003042:	f040 81a6 	bne.w	8003392 <HAL_PCD_IRQHandler+0x46e>
      hpcd->Instance->GOTGINT |= temp;
 8003046:	6822      	ldr	r2, [r4, #0]
 8003048:	6853      	ldr	r3, [r2, #4]
 800304a:	432b      	orrs	r3, r5
 800304c:	6053      	str	r3, [r2, #4]
 800304e:	e771      	b.n	8002f34 <HAL_PCD_IRQHandler+0x10>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003050:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003054:	421f      	tst	r7, r3
 8003056:	d095      	beq.n	8002f84 <HAL_PCD_IRQHandler+0x60>
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003058:	ea4f 1b17 	mov.w	fp, r7, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800305c:	ebc8 09c8 	rsb	r9, r8, r8, lsl #3
 8003060:	eb04 0989 	add.w	r9, r4, r9, lsl #2
 8003064:	f3c7 120a 	ubfx	r2, r7, #4, #11
 8003068:	f8d9 1208 	ldr.w	r1, [r9, #520]	; 0x208
 800306c:	4628      	mov	r0, r5
 800306e:	f001 fdbb 	bl	8004be8 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003072:	f3cb 020a 	ubfx	r2, fp, #0, #11
 8003076:	f8d9 3208 	ldr.w	r3, [r9, #520]	; 0x208
 800307a:	4413      	add	r3, r2
 800307c:	f8c9 3208 	str.w	r3, [r9, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003080:	f8d9 3214 	ldr.w	r3, [r9, #532]	; 0x214
 8003084:	441a      	add	r2, r3
 8003086:	f8c9 2214 	str.w	r2, [r9, #532]	; 0x214
 800308a:	e77b      	b.n	8002f84 <HAL_PCD_IRQHandler+0x60>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800308c:	2208      	movs	r2, #8
 800308e:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8003092:	4628      	mov	r0, r5
 8003094:	f001 fda8 	bl	8004be8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003098:	f3c7 170a 	ubfx	r7, r7, #4, #11
 800309c:	ebc8 02c8 	rsb	r2, r8, r8, lsl #3
 80030a0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80030a4:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 80030a8:	441f      	add	r7, r3
 80030aa:	f8c2 7214 	str.w	r7, [r2, #532]	; 0x214
 80030ae:	e769      	b.n	8002f84 <HAL_PCD_IRQHandler+0x60>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80030b0:	6820      	ldr	r0, [r4, #0]
 80030b2:	f001 fe33 	bl	8004d1c <USB_ReadDevAllOutEpInterrupt>
 80030b6:	4607      	mov	r7, r0
      epnum = 0U;
 80030b8:	46b0      	mov	r8, r6
      while (ep_intr != 0U)
 80030ba:	e016      	b.n	80030ea <HAL_PCD_IRQHandler+0x1c6>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80030bc:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 80030c0:	2201      	movs	r2, #1
 80030c2:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80030c6:	4641      	mov	r1, r8
 80030c8:	4620      	mov	r0, r4
 80030ca:	f7ff fe89 	bl	8002de0 <PCD_EP_OutXfrComplete_int>
 80030ce:	e01b      	b.n	8003108 <HAL_PCD_IRQHandler+0x1e4>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80030d0:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 80030d4:	2208      	movs	r2, #8
 80030d6:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80030da:	4641      	mov	r1, r8
 80030dc:	4620      	mov	r0, r4
 80030de:	f7ff fef9 	bl	8002ed4 <PCD_EP_OutSetupPacket_int>
 80030e2:	e014      	b.n	800310e <HAL_PCD_IRQHandler+0x1ea>
        epnum++;
 80030e4:	f108 0801 	add.w	r8, r8, #1
        ep_intr >>= 1U;
 80030e8:	087f      	lsrs	r7, r7, #1
      while (ep_intr != 0U)
 80030ea:	2f00      	cmp	r7, #0
 80030ec:	f43f af56 	beq.w	8002f9c <HAL_PCD_IRQHandler+0x78>
        if ((ep_intr & 0x1U) != 0U)
 80030f0:	f017 0f01 	tst.w	r7, #1
 80030f4:	d0f6      	beq.n	80030e4 <HAL_PCD_IRQHandler+0x1c0>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80030f6:	fa5f f188 	uxtb.w	r1, r8
 80030fa:	6820      	ldr	r0, [r4, #0]
 80030fc:	f001 fe1e 	bl	8004d3c <USB_ReadDevOutEPInterrupt>
 8003100:	4681      	mov	r9, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003102:	f010 0f01 	tst.w	r0, #1
 8003106:	d1d9      	bne.n	80030bc <HAL_PCD_IRQHandler+0x198>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003108:	f019 0f08 	tst.w	r9, #8
 800310c:	d1e0      	bne.n	80030d0 <HAL_PCD_IRQHandler+0x1ac>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800310e:	f019 0f10 	tst.w	r9, #16
 8003112:	d004      	beq.n	800311e <HAL_PCD_IRQHandler+0x1fa>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003114:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 8003118:	2210      	movs	r2, #16
 800311a:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800311e:	f019 0f20 	tst.w	r9, #32
 8003122:	d004      	beq.n	800312e <HAL_PCD_IRQHandler+0x20a>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003124:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 8003128:	2220      	movs	r2, #32
 800312a:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800312e:	f419 5f00 	tst.w	r9, #8192	; 0x2000
 8003132:	d0d7      	beq.n	80030e4 <HAL_PCD_IRQHandler+0x1c0>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003134:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 8003138:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800313c:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
 8003140:	e7d0      	b.n	80030e4 <HAL_PCD_IRQHandler+0x1c0>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003142:	6820      	ldr	r0, [r4, #0]
 8003144:	f001 fdf2 	bl	8004d2c <USB_ReadDevAllInEpInterrupt>
 8003148:	4607      	mov	r7, r0
      epnum = 0U;
 800314a:	46b0      	mov	r8, r6
      while (ep_intr != 0U)
 800314c:	e029      	b.n	80031a2 <HAL_PCD_IRQHandler+0x27e>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800314e:	4651      	mov	r1, sl
 8003150:	4620      	mov	r0, r4
 8003152:	f002 fe77 	bl	8005e44 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003156:	f019 0f08 	tst.w	r9, #8
 800315a:	d004      	beq.n	8003166 <HAL_PCD_IRQHandler+0x242>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800315c:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 8003160:	2208      	movs	r2, #8
 8003162:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003166:	f019 0f10 	tst.w	r9, #16
 800316a:	d004      	beq.n	8003176 <HAL_PCD_IRQHandler+0x252>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800316c:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 8003170:	2210      	movs	r2, #16
 8003172:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003176:	f019 0f40 	tst.w	r9, #64	; 0x40
 800317a:	d004      	beq.n	8003186 <HAL_PCD_IRQHandler+0x262>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800317c:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 8003180:	2240      	movs	r2, #64	; 0x40
 8003182:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003186:	f019 0f02 	tst.w	r9, #2
 800318a:	d004      	beq.n	8003196 <HAL_PCD_IRQHandler+0x272>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800318c:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 8003190:	2202      	movs	r2, #2
 8003192:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003196:	f019 0f80 	tst.w	r9, #128	; 0x80
 800319a:	d13d      	bne.n	8003218 <HAL_PCD_IRQHandler+0x2f4>
        epnum++;
 800319c:	f108 0801 	add.w	r8, r8, #1
        ep_intr >>= 1U;
 80031a0:	087f      	lsrs	r7, r7, #1
      while (ep_intr != 0U)
 80031a2:	2f00      	cmp	r7, #0
 80031a4:	f43f af01 	beq.w	8002faa <HAL_PCD_IRQHandler+0x86>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80031a8:	f017 0f01 	tst.w	r7, #1
 80031ac:	d0f6      	beq.n	800319c <HAL_PCD_IRQHandler+0x278>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80031ae:	fa5f fa88 	uxtb.w	sl, r8
 80031b2:	4651      	mov	r1, sl
 80031b4:	6820      	ldr	r0, [r4, #0]
 80031b6:	f001 fdca 	bl	8004d4e <USB_ReadDevInEPInterrupt>
 80031ba:	4681      	mov	r9, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80031bc:	f010 0f01 	tst.w	r0, #1
 80031c0:	d0c9      	beq.n	8003156 <HAL_PCD_IRQHandler+0x232>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80031c2:	f008 030f 	and.w	r3, r8, #15
 80031c6:	2101      	movs	r1, #1
 80031c8:	fa01 f203 	lsl.w	r2, r1, r3
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80031cc:	f8d5 3834 	ldr.w	r3, [r5, #2100]	; 0x834
 80031d0:	ea23 0302 	bic.w	r3, r3, r2
 80031d4:	f8c5 3834 	str.w	r3, [r5, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80031d8:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 80031dc:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
            if (hpcd->Init.dma_enable == 1U)
 80031e0:	6923      	ldr	r3, [r4, #16]
 80031e2:	428b      	cmp	r3, r1
 80031e4:	d1b3      	bne.n	800314e <HAL_PCD_IRQHandler+0x22a>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80031e6:	ebc8 03c8 	rsb	r3, r8, r8, lsl #3
 80031ea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80031ee:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80031f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031f2:	440a      	add	r2, r1
 80031f4:	649a      	str	r2, [r3, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80031f6:	f1b8 0f00 	cmp.w	r8, #0
 80031fa:	d1a8      	bne.n	800314e <HAL_PCD_IRQHandler+0x22a>
 80031fc:	ebc8 03c8 	rsb	r3, r8, r8, lsl #3
 8003200:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1a1      	bne.n	800314e <HAL_PCD_IRQHandler+0x22a>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800320a:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800320e:	2101      	movs	r1, #1
 8003210:	6820      	ldr	r0, [r4, #0]
 8003212:	f001 fdc5 	bl	8004da0 <USB_EP0_OutStart>
 8003216:	e79a      	b.n	800314e <HAL_PCD_IRQHandler+0x22a>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003218:	4641      	mov	r1, r8
 800321a:	4620      	mov	r0, r4
 800321c:	f7ff fcc0 	bl	8002ba0 <PCD_WriteEmptyTxFifo>
 8003220:	e7bc      	b.n	800319c <HAL_PCD_IRQHandler+0x278>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003222:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 8003226:	f023 0301 	bic.w	r3, r3, #1
 800322a:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 800322e:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8003232:	2b01      	cmp	r3, #1
 8003234:	d008      	beq.n	8003248 <HAL_PCD_IRQHandler+0x324>
        HAL_PCD_ResumeCallback(hpcd);
 8003236:	4620      	mov	r0, r4
 8003238:	f002 fe44 	bl	8005ec4 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800323c:	6822      	ldr	r2, [r4, #0]
 800323e:	6953      	ldr	r3, [r2, #20]
 8003240:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003244:	6153      	str	r3, [r2, #20]
 8003246:	e6b6      	b.n	8002fb6 <HAL_PCD_IRQHandler+0x92>
        hpcd->LPM_State = LPM_L0;
 8003248:	2100      	movs	r1, #0
 800324a:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800324e:	4620      	mov	r0, r4
 8003250:	f000 fa45 	bl	80036de <HAL_PCDEx_LPM_Callback>
 8003254:	e7f2      	b.n	800323c <HAL_PCD_IRQHandler+0x318>
        HAL_PCD_SuspendCallback(hpcd);
 8003256:	4620      	mov	r0, r4
 8003258:	f002 fe1c 	bl	8005e94 <HAL_PCD_SuspendCallback>
 800325c:	e6b7      	b.n	8002fce <HAL_PCD_IRQHandler+0xaa>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800325e:	f505 6700 	add.w	r7, r5, #2048	; 0x800
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f023 0301 	bic.w	r3, r3, #1
 8003268:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800326a:	2110      	movs	r1, #16
 800326c:	6820      	ldr	r0, [r4, #0]
 800326e:	f001 f931 	bl	80044d4 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003272:	e020      	b.n	80032b6 <HAL_PCD_IRQHandler+0x392>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003274:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8003278:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 800327c:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003280:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8003284:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003288:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800328c:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8003290:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8003294:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003298:	f8c3 1b08 	str.w	r1, [r3, #2824]	; 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800329c:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80032a0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80032a4:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80032a8:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80032ac:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80032b0:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032b4:	3601      	adds	r6, #1
 80032b6:	6863      	ldr	r3, [r4, #4]
 80032b8:	42b3      	cmp	r3, r6
 80032ba:	d8db      	bhi.n	8003274 <HAL_PCD_IRQHandler+0x350>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80032c2:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80032c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80032c6:	b1db      	cbz	r3, 8003300 <HAL_PCD_IRQHandler+0x3dc>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80032c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032cc:	f043 030b 	orr.w	r3, r3, #11
 80032d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80032d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032d6:	f043 030b 	orr.w	r3, r3, #11
 80032da:	647b      	str	r3, [r7, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80032dc:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
 80032e0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80032e4:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80032e8:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80032ec:	7c21      	ldrb	r1, [r4, #16]
 80032ee:	6820      	ldr	r0, [r4, #0]
 80032f0:	f001 fd56 	bl	8004da0 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80032f4:	6822      	ldr	r2, [r4, #0]
 80032f6:	6953      	ldr	r3, [r2, #20]
 80032f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032fc:	6153      	str	r3, [r2, #20]
 80032fe:	e672      	b.n	8002fe6 <HAL_PCD_IRQHandler+0xc2>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003306:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800330a:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	f043 030b 	orr.w	r3, r3, #11
 8003312:	613b      	str	r3, [r7, #16]
 8003314:	e7e2      	b.n	80032dc <HAL_PCD_IRQHandler+0x3b8>
      (void)USB_ActivateSetup(hpcd->Instance);
 8003316:	6820      	ldr	r0, [r4, #0]
 8003318:	f001 fd31 	bl	8004d7e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800331c:	6820      	ldr	r0, [r4, #0]
 800331e:	f001 f9cf 	bl	80046c0 <USB_GetDevSpeed>
 8003322:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003324:	6825      	ldr	r5, [r4, #0]
 8003326:	f000 fceb 	bl	8003d00 <HAL_RCC_GetHCLKFreq>
 800332a:	4601      	mov	r1, r0
 800332c:	7b22      	ldrb	r2, [r4, #12]
 800332e:	4628      	mov	r0, r5
 8003330:	f001 f83a 	bl	80043a8 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8003334:	4620      	mov	r0, r4
 8003336:	f002 fd96 	bl	8005e66 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800333a:	6822      	ldr	r2, [r4, #0]
 800333c:	6953      	ldr	r3, [r2, #20]
 800333e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003342:	6153      	str	r3, [r2, #20]
 8003344:	e656      	b.n	8002ff4 <HAL_PCD_IRQHandler+0xd0>
      HAL_PCD_SOFCallback(hpcd);
 8003346:	4620      	mov	r0, r4
 8003348:	f002 fd87 	bl	8005e5a <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800334c:	6822      	ldr	r2, [r4, #0]
 800334e:	6953      	ldr	r3, [r2, #20]
 8003350:	f003 0308 	and.w	r3, r3, #8
 8003354:	6153      	str	r3, [r2, #20]
 8003356:	e654      	b.n	8003002 <HAL_PCD_IRQHandler+0xde>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003358:	2100      	movs	r1, #0
 800335a:	4620      	mov	r0, r4
 800335c:	f002 fdbe 	bl	8005edc <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003360:	6822      	ldr	r2, [r4, #0]
 8003362:	6953      	ldr	r3, [r2, #20]
 8003364:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003368:	6153      	str	r3, [r2, #20]
 800336a:	e651      	b.n	8003010 <HAL_PCD_IRQHandler+0xec>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800336c:	2100      	movs	r1, #0
 800336e:	4620      	mov	r0, r4
 8003370:	f002 fdae 	bl	8005ed0 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003374:	6822      	ldr	r2, [r4, #0]
 8003376:	6953      	ldr	r3, [r2, #20]
 8003378:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800337c:	6153      	str	r3, [r2, #20]
 800337e:	e64e      	b.n	800301e <HAL_PCD_IRQHandler+0xfa>
      HAL_PCD_ConnectCallback(hpcd);
 8003380:	4620      	mov	r0, r4
 8003382:	f002 fdb1 	bl	8005ee8 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003386:	6822      	ldr	r2, [r4, #0]
 8003388:	6953      	ldr	r3, [r2, #20]
 800338a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800338e:	6153      	str	r3, [r2, #20]
 8003390:	e64c      	b.n	800302c <HAL_PCD_IRQHandler+0x108>
        HAL_PCD_DisconnectCallback(hpcd);
 8003392:	4620      	mov	r0, r4
 8003394:	f002 fdae 	bl	8005ef4 <HAL_PCD_DisconnectCallback>
 8003398:	e655      	b.n	8003046 <HAL_PCD_IRQHandler+0x122>

0800339a <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 800339a:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d00d      	beq.n	80033be <HAL_PCD_SetAddress+0x24>
{
 80033a2:	b510      	push	{r4, lr}
 80033a4:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80033a6:	2301      	movs	r3, #1
 80033a8:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80033ac:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80033b0:	6800      	ldr	r0, [r0, #0]
 80033b2:	f001 fc83 	bl	8004cbc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80033b6:	2000      	movs	r0, #0
 80033b8:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 80033bc:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80033be:	2002      	movs	r0, #2
}
 80033c0:	4770      	bx	lr

080033c2 <HAL_PCD_EP_Open>:
{
 80033c2:	b538      	push	{r3, r4, r5, lr}
 80033c4:	4605      	mov	r5, r0
 80033c6:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 80033c8:	f011 0f80 	tst.w	r1, #128	; 0x80
 80033cc:	d129      	bne.n	8003422 <HAL_PCD_EP_Open+0x60>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033ce:	f001 0e0f 	and.w	lr, r1, #15
 80033d2:	ebce 04ce 	rsb	r4, lr, lr, lsl #3
 80033d6:	00a4      	lsls	r4, r4, #2
 80033d8:	f504 74fc 	add.w	r4, r4, #504	; 0x1f8
 80033dc:	4404      	add	r4, r0
 80033de:	1d21      	adds	r1, r4, #4
    ep->is_in = 0U;
 80033e0:	ebce 0ece 	rsb	lr, lr, lr, lsl #3
 80033e4:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 80033e8:	2000      	movs	r0, #0
 80033ea:	f88e 01fd 	strb.w	r0, [lr, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 80033ee:	f00c 0c0f 	and.w	ip, ip, #15
 80033f2:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = ep_mps;
 80033f6:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 80033f8:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 80033fa:	784a      	ldrb	r2, [r1, #1]
 80033fc:	b10a      	cbz	r2, 8003402 <HAL_PCD_EP_Open+0x40>
    ep->tx_fifo_num = ep->num;
 80033fe:	f8a1 c006 	strh.w	ip, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 8003402:	2b02      	cmp	r3, #2
 8003404:	d01d      	beq.n	8003442 <HAL_PCD_EP_Open+0x80>
  __HAL_LOCK(hpcd);
 8003406:	f895 33bc 	ldrb.w	r3, [r5, #956]	; 0x3bc
 800340a:	2b01      	cmp	r3, #1
 800340c:	d01c      	beq.n	8003448 <HAL_PCD_EP_Open+0x86>
 800340e:	2301      	movs	r3, #1
 8003410:	f885 33bc 	strb.w	r3, [r5, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003414:	6828      	ldr	r0, [r5, #0]
 8003416:	f001 f964 	bl	80046e2 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800341a:	2000      	movs	r0, #0
 800341c:	f885 03bc 	strb.w	r0, [r5, #956]	; 0x3bc
}
 8003420:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003422:	f001 000f 	and.w	r0, r1, #15
 8003426:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
 800342a:	0089      	lsls	r1, r1, #2
 800342c:	3138      	adds	r1, #56	; 0x38
 800342e:	4429      	add	r1, r5
 8003430:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8003432:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8003436:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 800343a:	2401      	movs	r4, #1
 800343c:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
 8003440:	e7d5      	b.n	80033ee <HAL_PCD_EP_Open+0x2c>
    ep->data_pid_start = 0U;
 8003442:	2300      	movs	r3, #0
 8003444:	710b      	strb	r3, [r1, #4]
 8003446:	e7de      	b.n	8003406 <HAL_PCD_EP_Open+0x44>
  __HAL_LOCK(hpcd);
 8003448:	2002      	movs	r0, #2
 800344a:	e7e9      	b.n	8003420 <HAL_PCD_EP_Open+0x5e>

0800344c <HAL_PCD_EP_Close>:
{
 800344c:	b510      	push	{r4, lr}
 800344e:	4604      	mov	r4, r0
 8003450:	460a      	mov	r2, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8003452:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003456:	d120      	bne.n	800349a <HAL_PCD_EP_Close+0x4e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003458:	f001 000f 	and.w	r0, r1, #15
 800345c:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003466:	4423      	add	r3, r4
 8003468:	1d19      	adds	r1, r3, #4
    ep->is_in = 0U;
 800346a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800346e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8003472:	2300      	movs	r3, #0
 8003474:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003478:	f002 020f 	and.w	r2, r2, #15
 800347c:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800347e:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8003482:	2b01      	cmp	r3, #1
 8003484:	d019      	beq.n	80034ba <HAL_PCD_EP_Close+0x6e>
 8003486:	2301      	movs	r3, #1
 8003488:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800348c:	6820      	ldr	r0, [r4, #0]
 800348e:	f001 f977 	bl	8004780 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003492:	2000      	movs	r0, #0
 8003494:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8003498:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800349a:	f001 000f 	and.w	r0, r1, #15
 800349e:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	3338      	adds	r3, #56	; 0x38
 80034a6:	4423      	add	r3, r4
 80034a8:	1d19      	adds	r1, r3, #4
    ep->is_in = 1U;
 80034aa:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80034ae:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80034b2:	2301      	movs	r3, #1
 80034b4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 80034b8:	e7de      	b.n	8003478 <HAL_PCD_EP_Close+0x2c>
  __HAL_LOCK(hpcd);
 80034ba:	2002      	movs	r0, #2
 80034bc:	e7ec      	b.n	8003498 <HAL_PCD_EP_Close+0x4c>

080034be <HAL_PCD_EP_Receive>:
{
 80034be:	b510      	push	{r4, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034c0:	f001 040f 	and.w	r4, r1, #15
 80034c4:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 80034c8:	0089      	lsls	r1, r1, #2
 80034ca:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 80034ce:	4401      	add	r1, r0
 80034d0:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 80034d2:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
 80034d6:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 80034da:	f8cc 2208 	str.w	r2, [ip, #520]	; 0x208
  ep->xfer_len = len;
 80034de:	f8cc 3210 	str.w	r3, [ip, #528]	; 0x210
  ep->xfer_count = 0U;
 80034e2:	2300      	movs	r3, #0
 80034e4:	f8cc 3214 	str.w	r3, [ip, #532]	; 0x214
  ep->is_in = 0U;
 80034e8:	f88c 31fd 	strb.w	r3, [ip, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 80034ec:	f88c 41fc 	strb.w	r4, [ip, #508]	; 0x1fc
  if (hpcd->Init.dma_enable == 1U)
 80034f0:	6903      	ldr	r3, [r0, #16]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d006      	beq.n	8003504 <HAL_PCD_EP_Receive+0x46>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034f6:	b964      	cbnz	r4, 8003512 <HAL_PCD_EP_Receive+0x54>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034f8:	b2da      	uxtb	r2, r3
 80034fa:	6800      	ldr	r0, [r0, #0]
 80034fc:	f001 f9b0 	bl	8004860 <USB_EP0StartXfer>
}
 8003500:	2000      	movs	r0, #0
 8003502:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8003504:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
 8003508:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800350c:	f8cc 220c 	str.w	r2, [ip, #524]	; 0x20c
 8003510:	e7f1      	b.n	80034f6 <HAL_PCD_EP_Receive+0x38>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003512:	b2da      	uxtb	r2, r3
 8003514:	6800      	ldr	r0, [r0, #0]
 8003516:	f001 fa4b 	bl	80049b0 <USB_EPStartXfer>
 800351a:	e7f1      	b.n	8003500 <HAL_PCD_EP_Receive+0x42>

0800351c <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800351c:	f001 010f 	and.w	r1, r1, #15
 8003520:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8003524:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 8003528:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 800352c:	4770      	bx	lr

0800352e <HAL_PCD_EP_Transmit>:
{
 800352e:	b510      	push	{r4, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003530:	f001 040f 	and.w	r4, r1, #15
 8003534:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8003538:	0089      	lsls	r1, r1, #2
 800353a:	3138      	adds	r1, #56	; 0x38
 800353c:	4401      	add	r1, r0
 800353e:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 8003540:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
 8003544:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8003548:	f8cc 2048 	str.w	r2, [ip, #72]	; 0x48
  ep->xfer_len = len;
 800354c:	f8cc 3050 	str.w	r3, [ip, #80]	; 0x50
  ep->xfer_count = 0U;
 8003550:	2300      	movs	r3, #0
 8003552:	f8cc 3054 	str.w	r3, [ip, #84]	; 0x54
  ep->is_in = 1U;
 8003556:	2301      	movs	r3, #1
 8003558:	f88c 303d 	strb.w	r3, [ip, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 800355c:	f88c 403c 	strb.w	r4, [ip, #60]	; 0x3c
  if (hpcd->Init.dma_enable == 1U)
 8003560:	6903      	ldr	r3, [r0, #16]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d006      	beq.n	8003574 <HAL_PCD_EP_Transmit+0x46>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003566:	b964      	cbnz	r4, 8003582 <HAL_PCD_EP_Transmit+0x54>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003568:	b2da      	uxtb	r2, r3
 800356a:	6800      	ldr	r0, [r0, #0]
 800356c:	f001 f978 	bl	8004860 <USB_EP0StartXfer>
}
 8003570:	2000      	movs	r0, #0
 8003572:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8003574:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
 8003578:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800357c:	f8cc 204c 	str.w	r2, [ip, #76]	; 0x4c
 8003580:	e7f1      	b.n	8003566 <HAL_PCD_EP_Transmit+0x38>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003582:	b2da      	uxtb	r2, r3
 8003584:	6800      	ldr	r0, [r0, #0]
 8003586:	f001 fa13 	bl	80049b0 <USB_EPStartXfer>
 800358a:	e7f1      	b.n	8003570 <HAL_PCD_EP_Transmit+0x42>

0800358c <HAL_PCD_EP_SetStall>:
{
 800358c:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800358e:	f001 050f 	and.w	r5, r1, #15
 8003592:	6842      	ldr	r2, [r0, #4]
 8003594:	4295      	cmp	r5, r2
 8003596:	d839      	bhi.n	800360c <HAL_PCD_EP_SetStall+0x80>
 8003598:	4604      	mov	r4, r0
 800359a:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 800359c:	f011 0f80 	tst.w	r1, #128	; 0x80
 80035a0:	d11f      	bne.n	80035e2 <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->OUT_ep[ep_addr];
 80035a2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80035a6:	0089      	lsls	r1, r1, #2
 80035a8:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 80035ac:	4401      	add	r1, r0
 80035ae:	3104      	adds	r1, #4
    ep->is_in = 0U;
 80035b0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80035b4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 80035be:	2301      	movs	r3, #1
 80035c0:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035c2:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 80035c4:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d021      	beq.n	8003610 <HAL_PCD_EP_SetStall+0x84>
 80035cc:	2301      	movs	r3, #1
 80035ce:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80035d2:	6820      	ldr	r0, [r4, #0]
 80035d4:	f001 fb17 	bl	8004c06 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80035d8:	b18d      	cbz	r5, 80035fe <HAL_PCD_EP_SetStall+0x72>
  __HAL_UNLOCK(hpcd);
 80035da:	2000      	movs	r0, #0
 80035dc:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 80035e0:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035e2:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
 80035e6:	0089      	lsls	r1, r1, #2
 80035e8:	3138      	adds	r1, #56	; 0x38
 80035ea:	4401      	add	r1, r0
 80035ec:	3104      	adds	r1, #4
    ep->is_in = 1U;
 80035ee:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 80035f2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80035fc:	e7df      	b.n	80035be <HAL_PCD_EP_SetStall+0x32>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80035fe:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8003602:	7c21      	ldrb	r1, [r4, #16]
 8003604:	6820      	ldr	r0, [r4, #0]
 8003606:	f001 fbcb 	bl	8004da0 <USB_EP0_OutStart>
 800360a:	e7e6      	b.n	80035da <HAL_PCD_EP_SetStall+0x4e>
    return HAL_ERROR;
 800360c:	2001      	movs	r0, #1
 800360e:	e7e7      	b.n	80035e0 <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 8003610:	2002      	movs	r0, #2
 8003612:	e7e5      	b.n	80035e0 <HAL_PCD_EP_SetStall+0x54>

08003614 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003614:	f001 030f 	and.w	r3, r1, #15
 8003618:	6842      	ldr	r2, [r0, #4]
 800361a:	4293      	cmp	r3, r2
 800361c:	d831      	bhi.n	8003682 <HAL_PCD_EP_ClrStall+0x6e>
{
 800361e:	b510      	push	{r4, lr}
 8003620:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8003622:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003626:	d11e      	bne.n	8003666 <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003628:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 800362c:	0089      	lsls	r1, r1, #2
 800362e:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 8003632:	4401      	add	r1, r0
 8003634:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8003636:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800363a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800363e:	2000      	movs	r0, #0
 8003640:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->is_stall = 0U;
 8003644:	2200      	movs	r2, #0
 8003646:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003648:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800364a:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800364e:	2b01      	cmp	r3, #1
 8003650:	d019      	beq.n	8003686 <HAL_PCD_EP_ClrStall+0x72>
 8003652:	2301      	movs	r3, #1
 8003654:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003658:	6820      	ldr	r0, [r4, #0]
 800365a:	f001 fb01 	bl	8004c60 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800365e:	2000      	movs	r0, #0
 8003660:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8003664:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003666:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 800366a:	0089      	lsls	r1, r1, #2
 800366c:	3138      	adds	r1, #56	; 0x38
 800366e:	4401      	add	r1, r0
 8003670:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8003672:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8003676:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800367a:	2001      	movs	r0, #1
 800367c:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
 8003680:	e7e0      	b.n	8003644 <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 8003682:	2001      	movs	r0, #1
}
 8003684:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8003686:	2002      	movs	r0, #2
 8003688:	e7ec      	b.n	8003664 <HAL_PCD_EP_ClrStall+0x50>

0800368a <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800368a:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800368c:	6804      	ldr	r4, [r0, #0]
 800368e:	6a60      	ldr	r0, [r4, #36]	; 0x24

  if (fifo == 0U)
 8003690:	b931      	cbnz	r1, 80036a0 <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003692:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8003696:	62a0      	str	r0, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8003698:	2000      	movs	r0, #0
 800369a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	468c      	mov	ip, r1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80036a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80036a4:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80036a8:	2300      	movs	r3, #0
 80036aa:	e008      	b.n	80036be <HAL_PCDEx_SetTxFiFo+0x34>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80036ac:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80036b0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80036b4:	6849      	ldr	r1, [r1, #4]
 80036b6:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80036ba:	3301      	adds	r3, #1
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	f10c 31ff 	add.w	r1, ip, #4294967295
 80036c2:	428b      	cmp	r3, r1
 80036c4:	d3f2      	bcc.n	80036ac <HAL_PCDEx_SetTxFiFo+0x22>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80036c6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80036ca:	f10c 013f 	add.w	r1, ip, #63	; 0x3f
 80036ce:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80036d2:	6048      	str	r0, [r1, #4]
 80036d4:	e7e0      	b.n	8003698 <HAL_PCDEx_SetTxFiFo+0xe>

080036d6 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 80036d6:	6803      	ldr	r3, [r0, #0]
 80036d8:	6259      	str	r1, [r3, #36]	; 0x24

  return HAL_OK;
}
 80036da:	2000      	movs	r0, #0
 80036dc:	4770      	bx	lr

080036de <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80036de:	4770      	bx	lr

080036e0 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036e0:	2800      	cmp	r0, #0
 80036e2:	f000 81da 	beq.w	8003a9a <HAL_RCC_OscConfig+0x3ba>
{
 80036e6:	b570      	push	{r4, r5, r6, lr}
 80036e8:	b082      	sub	sp, #8
 80036ea:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036ec:	6803      	ldr	r3, [r0, #0]
 80036ee:	f013 0f01 	tst.w	r3, #1
 80036f2:	d03b      	beq.n	800376c <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036f4:	4b9f      	ldr	r3, [pc, #636]	; (8003974 <HAL_RCC_OscConfig+0x294>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f003 030c 	and.w	r3, r3, #12
 80036fc:	2b04      	cmp	r3, #4
 80036fe:	d02c      	beq.n	800375a <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003700:	4b9c      	ldr	r3, [pc, #624]	; (8003974 <HAL_RCC_OscConfig+0x294>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003708:	2b08      	cmp	r3, #8
 800370a:	d021      	beq.n	8003750 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800370c:	6863      	ldr	r3, [r4, #4]
 800370e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003712:	d04f      	beq.n	80037b4 <HAL_RCC_OscConfig+0xd4>
 8003714:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003718:	d052      	beq.n	80037c0 <HAL_RCC_OscConfig+0xe0>
 800371a:	4b96      	ldr	r3, [pc, #600]	; (8003974 <HAL_RCC_OscConfig+0x294>)
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800372a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800372c:	6863      	ldr	r3, [r4, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d050      	beq.n	80037d4 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003732:	f7fe f8f1 	bl	8001918 <HAL_GetTick>
 8003736:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003738:	4b8e      	ldr	r3, [pc, #568]	; (8003974 <HAL_RCC_OscConfig+0x294>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003740:	d114      	bne.n	800376c <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003742:	f7fe f8e9 	bl	8001918 <HAL_GetTick>
 8003746:	1b40      	subs	r0, r0, r5
 8003748:	2864      	cmp	r0, #100	; 0x64
 800374a:	d9f5      	bls.n	8003738 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 800374c:	2003      	movs	r0, #3
 800374e:	e1ab      	b.n	8003aa8 <HAL_RCC_OscConfig+0x3c8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003750:	4b88      	ldr	r3, [pc, #544]	; (8003974 <HAL_RCC_OscConfig+0x294>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003758:	d0d8      	beq.n	800370c <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800375a:	4b86      	ldr	r3, [pc, #536]	; (8003974 <HAL_RCC_OscConfig+0x294>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003762:	d003      	beq.n	800376c <HAL_RCC_OscConfig+0x8c>
 8003764:	6863      	ldr	r3, [r4, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 8199 	beq.w	8003a9e <HAL_RCC_OscConfig+0x3be>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800376c:	6823      	ldr	r3, [r4, #0]
 800376e:	f013 0f02 	tst.w	r3, #2
 8003772:	d054      	beq.n	800381e <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003774:	4b7f      	ldr	r3, [pc, #508]	; (8003974 <HAL_RCC_OscConfig+0x294>)
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f013 0f0c 	tst.w	r3, #12
 800377c:	d03e      	beq.n	80037fc <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800377e:	4b7d      	ldr	r3, [pc, #500]	; (8003974 <HAL_RCC_OscConfig+0x294>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003786:	2b08      	cmp	r3, #8
 8003788:	d033      	beq.n	80037f2 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800378a:	68e3      	ldr	r3, [r4, #12]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d068      	beq.n	8003862 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003790:	4b79      	ldr	r3, [pc, #484]	; (8003978 <HAL_RCC_OscConfig+0x298>)
 8003792:	2201      	movs	r2, #1
 8003794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003796:	f7fe f8bf 	bl	8001918 <HAL_GetTick>
 800379a:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800379c:	4b75      	ldr	r3, [pc, #468]	; (8003974 <HAL_RCC_OscConfig+0x294>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f013 0f02 	tst.w	r3, #2
 80037a4:	d154      	bne.n	8003850 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037a6:	f7fe f8b7 	bl	8001918 <HAL_GetTick>
 80037aa:	1b40      	subs	r0, r0, r5
 80037ac:	2802      	cmp	r0, #2
 80037ae:	d9f5      	bls.n	800379c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80037b0:	2003      	movs	r0, #3
 80037b2:	e179      	b.n	8003aa8 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037b4:	4a6f      	ldr	r2, [pc, #444]	; (8003974 <HAL_RCC_OscConfig+0x294>)
 80037b6:	6813      	ldr	r3, [r2, #0]
 80037b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037bc:	6013      	str	r3, [r2, #0]
 80037be:	e7b5      	b.n	800372c <HAL_RCC_OscConfig+0x4c>
 80037c0:	4b6c      	ldr	r3, [pc, #432]	; (8003974 <HAL_RCC_OscConfig+0x294>)
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80037c8:	601a      	str	r2, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80037d0:	601a      	str	r2, [r3, #0]
 80037d2:	e7ab      	b.n	800372c <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80037d4:	f7fe f8a0 	bl	8001918 <HAL_GetTick>
 80037d8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037da:	4b66      	ldr	r3, [pc, #408]	; (8003974 <HAL_RCC_OscConfig+0x294>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80037e2:	d0c3      	beq.n	800376c <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037e4:	f7fe f898 	bl	8001918 <HAL_GetTick>
 80037e8:	1b40      	subs	r0, r0, r5
 80037ea:	2864      	cmp	r0, #100	; 0x64
 80037ec:	d9f5      	bls.n	80037da <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80037ee:	2003      	movs	r0, #3
 80037f0:	e15a      	b.n	8003aa8 <HAL_RCC_OscConfig+0x3c8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037f2:	4b60      	ldr	r3, [pc, #384]	; (8003974 <HAL_RCC_OscConfig+0x294>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80037fa:	d1c6      	bne.n	800378a <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037fc:	4b5d      	ldr	r3, [pc, #372]	; (8003974 <HAL_RCC_OscConfig+0x294>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f013 0f02 	tst.w	r3, #2
 8003804:	d003      	beq.n	800380e <HAL_RCC_OscConfig+0x12e>
 8003806:	68e3      	ldr	r3, [r4, #12]
 8003808:	2b01      	cmp	r3, #1
 800380a:	f040 814a 	bne.w	8003aa2 <HAL_RCC_OscConfig+0x3c2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800380e:	4a59      	ldr	r2, [pc, #356]	; (8003974 <HAL_RCC_OscConfig+0x294>)
 8003810:	6813      	ldr	r3, [r2, #0]
 8003812:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003816:	6921      	ldr	r1, [r4, #16]
 8003818:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800381c:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800381e:	6823      	ldr	r3, [r4, #0]
 8003820:	f013 0f08 	tst.w	r3, #8
 8003824:	d042      	beq.n	80038ac <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003826:	6963      	ldr	r3, [r4, #20]
 8003828:	b36b      	cbz	r3, 8003886 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800382a:	4b53      	ldr	r3, [pc, #332]	; (8003978 <HAL_RCC_OscConfig+0x298>)
 800382c:	2201      	movs	r2, #1
 800382e:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003832:	f7fe f871 	bl	8001918 <HAL_GetTick>
 8003836:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003838:	4b4e      	ldr	r3, [pc, #312]	; (8003974 <HAL_RCC_OscConfig+0x294>)
 800383a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800383c:	f013 0f02 	tst.w	r3, #2
 8003840:	d134      	bne.n	80038ac <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003842:	f7fe f869 	bl	8001918 <HAL_GetTick>
 8003846:	1b40      	subs	r0, r0, r5
 8003848:	2802      	cmp	r0, #2
 800384a:	d9f5      	bls.n	8003838 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 800384c:	2003      	movs	r0, #3
 800384e:	e12b      	b.n	8003aa8 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003850:	4a48      	ldr	r2, [pc, #288]	; (8003974 <HAL_RCC_OscConfig+0x294>)
 8003852:	6813      	ldr	r3, [r2, #0]
 8003854:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003858:	6921      	ldr	r1, [r4, #16]
 800385a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800385e:	6013      	str	r3, [r2, #0]
 8003860:	e7dd      	b.n	800381e <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8003862:	4b45      	ldr	r3, [pc, #276]	; (8003978 <HAL_RCC_OscConfig+0x298>)
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003868:	f7fe f856 	bl	8001918 <HAL_GetTick>
 800386c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800386e:	4b41      	ldr	r3, [pc, #260]	; (8003974 <HAL_RCC_OscConfig+0x294>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f013 0f02 	tst.w	r3, #2
 8003876:	d0d2      	beq.n	800381e <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003878:	f7fe f84e 	bl	8001918 <HAL_GetTick>
 800387c:	1b40      	subs	r0, r0, r5
 800387e:	2802      	cmp	r0, #2
 8003880:	d9f5      	bls.n	800386e <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8003882:	2003      	movs	r0, #3
 8003884:	e110      	b.n	8003aa8 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003886:	4b3c      	ldr	r3, [pc, #240]	; (8003978 <HAL_RCC_OscConfig+0x298>)
 8003888:	2200      	movs	r2, #0
 800388a:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800388e:	f7fe f843 	bl	8001918 <HAL_GetTick>
 8003892:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003894:	4b37      	ldr	r3, [pc, #220]	; (8003974 <HAL_RCC_OscConfig+0x294>)
 8003896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003898:	f013 0f02 	tst.w	r3, #2
 800389c:	d006      	beq.n	80038ac <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800389e:	f7fe f83b 	bl	8001918 <HAL_GetTick>
 80038a2:	1b40      	subs	r0, r0, r5
 80038a4:	2802      	cmp	r0, #2
 80038a6:	d9f5      	bls.n	8003894 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 80038a8:	2003      	movs	r0, #3
 80038aa:	e0fd      	b.n	8003aa8 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038ac:	6823      	ldr	r3, [r4, #0]
 80038ae:	f013 0f04 	tst.w	r3, #4
 80038b2:	d077      	beq.n	80039a4 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038b4:	4b2f      	ldr	r3, [pc, #188]	; (8003974 <HAL_RCC_OscConfig+0x294>)
 80038b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80038bc:	d133      	bne.n	8003926 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038be:	2300      	movs	r3, #0
 80038c0:	9301      	str	r3, [sp, #4]
 80038c2:	4b2c      	ldr	r3, [pc, #176]	; (8003974 <HAL_RCC_OscConfig+0x294>)
 80038c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038c6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80038ca:	641a      	str	r2, [r3, #64]	; 0x40
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d2:	9301      	str	r3, [sp, #4]
 80038d4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80038d6:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d8:	4b28      	ldr	r3, [pc, #160]	; (800397c <HAL_RCC_OscConfig+0x29c>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f413 7f80 	tst.w	r3, #256	; 0x100
 80038e0:	d023      	beq.n	800392a <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038e2:	68a3      	ldr	r3, [r4, #8]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d034      	beq.n	8003952 <HAL_RCC_OscConfig+0x272>
 80038e8:	2b05      	cmp	r3, #5
 80038ea:	d038      	beq.n	800395e <HAL_RCC_OscConfig+0x27e>
 80038ec:	4b21      	ldr	r3, [pc, #132]	; (8003974 <HAL_RCC_OscConfig+0x294>)
 80038ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038f0:	f022 0201 	bic.w	r2, r2, #1
 80038f4:	671a      	str	r2, [r3, #112]	; 0x70
 80038f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038f8:	f022 0204 	bic.w	r2, r2, #4
 80038fc:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038fe:	68a3      	ldr	r3, [r4, #8]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d03d      	beq.n	8003980 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003904:	f7fe f808 	bl	8001918 <HAL_GetTick>
 8003908:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800390a:	4b1a      	ldr	r3, [pc, #104]	; (8003974 <HAL_RCC_OscConfig+0x294>)
 800390c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390e:	f013 0f02 	tst.w	r3, #2
 8003912:	d146      	bne.n	80039a2 <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003914:	f7fe f800 	bl	8001918 <HAL_GetTick>
 8003918:	1b80      	subs	r0, r0, r6
 800391a:	f241 3388 	movw	r3, #5000	; 0x1388
 800391e:	4298      	cmp	r0, r3
 8003920:	d9f3      	bls.n	800390a <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8003922:	2003      	movs	r0, #3
 8003924:	e0c0      	b.n	8003aa8 <HAL_RCC_OscConfig+0x3c8>
    FlagStatus       pwrclkchanged = RESET;
 8003926:	2500      	movs	r5, #0
 8003928:	e7d6      	b.n	80038d8 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800392a:	4a14      	ldr	r2, [pc, #80]	; (800397c <HAL_RCC_OscConfig+0x29c>)
 800392c:	6813      	ldr	r3, [r2, #0]
 800392e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003932:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003934:	f7fd fff0 	bl	8001918 <HAL_GetTick>
 8003938:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800393a:	4b10      	ldr	r3, [pc, #64]	; (800397c <HAL_RCC_OscConfig+0x29c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003942:	d1ce      	bne.n	80038e2 <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003944:	f7fd ffe8 	bl	8001918 <HAL_GetTick>
 8003948:	1b80      	subs	r0, r0, r6
 800394a:	2802      	cmp	r0, #2
 800394c:	d9f5      	bls.n	800393a <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 800394e:	2003      	movs	r0, #3
 8003950:	e0aa      	b.n	8003aa8 <HAL_RCC_OscConfig+0x3c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003952:	4a08      	ldr	r2, [pc, #32]	; (8003974 <HAL_RCC_OscConfig+0x294>)
 8003954:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003956:	f043 0301 	orr.w	r3, r3, #1
 800395a:	6713      	str	r3, [r2, #112]	; 0x70
 800395c:	e7cf      	b.n	80038fe <HAL_RCC_OscConfig+0x21e>
 800395e:	4b05      	ldr	r3, [pc, #20]	; (8003974 <HAL_RCC_OscConfig+0x294>)
 8003960:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003962:	f042 0204 	orr.w	r2, r2, #4
 8003966:	671a      	str	r2, [r3, #112]	; 0x70
 8003968:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800396a:	f042 0201 	orr.w	r2, r2, #1
 800396e:	671a      	str	r2, [r3, #112]	; 0x70
 8003970:	e7c5      	b.n	80038fe <HAL_RCC_OscConfig+0x21e>
 8003972:	bf00      	nop
 8003974:	40023800 	.word	0x40023800
 8003978:	42470000 	.word	0x42470000
 800397c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003980:	f7fd ffca 	bl	8001918 <HAL_GetTick>
 8003984:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003986:	4b4f      	ldr	r3, [pc, #316]	; (8003ac4 <HAL_RCC_OscConfig+0x3e4>)
 8003988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398a:	f013 0f02 	tst.w	r3, #2
 800398e:	d008      	beq.n	80039a2 <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003990:	f7fd ffc2 	bl	8001918 <HAL_GetTick>
 8003994:	1b80      	subs	r0, r0, r6
 8003996:	f241 3388 	movw	r3, #5000	; 0x1388
 800399a:	4298      	cmp	r0, r3
 800399c:	d9f3      	bls.n	8003986 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 800399e:	2003      	movs	r0, #3
 80039a0:	e082      	b.n	8003aa8 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039a2:	b9e5      	cbnz	r5, 80039de <HAL_RCC_OscConfig+0x2fe>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039a4:	69a3      	ldr	r3, [r4, #24]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d07d      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x3c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039aa:	4a46      	ldr	r2, [pc, #280]	; (8003ac4 <HAL_RCC_OscConfig+0x3e4>)
 80039ac:	6892      	ldr	r2, [r2, #8]
 80039ae:	f002 020c 	and.w	r2, r2, #12
 80039b2:	2a08      	cmp	r2, #8
 80039b4:	d051      	beq.n	8003a5a <HAL_RCC_OscConfig+0x37a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d017      	beq.n	80039ea <HAL_RCC_OscConfig+0x30a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ba:	4b43      	ldr	r3, [pc, #268]	; (8003ac8 <HAL_RCC_OscConfig+0x3e8>)
 80039bc:	2200      	movs	r2, #0
 80039be:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c0:	f7fd ffaa 	bl	8001918 <HAL_GetTick>
 80039c4:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039c6:	4b3f      	ldr	r3, [pc, #252]	; (8003ac4 <HAL_RCC_OscConfig+0x3e4>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80039ce:	d042      	beq.n	8003a56 <HAL_RCC_OscConfig+0x376>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039d0:	f7fd ffa2 	bl	8001918 <HAL_GetTick>
 80039d4:	1b00      	subs	r0, r0, r4
 80039d6:	2802      	cmp	r0, #2
 80039d8:	d9f5      	bls.n	80039c6 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80039da:	2003      	movs	r0, #3
 80039dc:	e064      	b.n	8003aa8 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_PWR_CLK_DISABLE();
 80039de:	4a39      	ldr	r2, [pc, #228]	; (8003ac4 <HAL_RCC_OscConfig+0x3e4>)
 80039e0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80039e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039e6:	6413      	str	r3, [r2, #64]	; 0x40
 80039e8:	e7dc      	b.n	80039a4 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 80039ea:	4b37      	ldr	r3, [pc, #220]	; (8003ac8 <HAL_RCC_OscConfig+0x3e8>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80039f0:	f7fd ff92 	bl	8001918 <HAL_GetTick>
 80039f4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039f6:	4b33      	ldr	r3, [pc, #204]	; (8003ac4 <HAL_RCC_OscConfig+0x3e4>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80039fe:	d006      	beq.n	8003a0e <HAL_RCC_OscConfig+0x32e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a00:	f7fd ff8a 	bl	8001918 <HAL_GetTick>
 8003a04:	1b40      	subs	r0, r0, r5
 8003a06:	2802      	cmp	r0, #2
 8003a08:	d9f5      	bls.n	80039f6 <HAL_RCC_OscConfig+0x316>
            return HAL_TIMEOUT;
 8003a0a:	2003      	movs	r0, #3
 8003a0c:	e04c      	b.n	8003aa8 <HAL_RCC_OscConfig+0x3c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a0e:	69e3      	ldr	r3, [r4, #28]
 8003a10:	6a22      	ldr	r2, [r4, #32]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003a16:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003a1a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003a1c:	0852      	lsrs	r2, r2, #1
 8003a1e:	3a01      	subs	r2, #1
 8003a20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003a24:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003a26:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003a2a:	4a26      	ldr	r2, [pc, #152]	; (8003ac4 <HAL_RCC_OscConfig+0x3e4>)
 8003a2c:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8003a2e:	4b26      	ldr	r3, [pc, #152]	; (8003ac8 <HAL_RCC_OscConfig+0x3e8>)
 8003a30:	2201      	movs	r2, #1
 8003a32:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003a34:	f7fd ff70 	bl	8001918 <HAL_GetTick>
 8003a38:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a3a:	4b22      	ldr	r3, [pc, #136]	; (8003ac4 <HAL_RCC_OscConfig+0x3e4>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003a42:	d106      	bne.n	8003a52 <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a44:	f7fd ff68 	bl	8001918 <HAL_GetTick>
 8003a48:	1b00      	subs	r0, r0, r4
 8003a4a:	2802      	cmp	r0, #2
 8003a4c:	d9f5      	bls.n	8003a3a <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8003a4e:	2003      	movs	r0, #3
 8003a50:	e02a      	b.n	8003aa8 <HAL_RCC_OscConfig+0x3c8>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8003a52:	2000      	movs	r0, #0
 8003a54:	e028      	b.n	8003aa8 <HAL_RCC_OscConfig+0x3c8>
 8003a56:	2000      	movs	r0, #0
 8003a58:	e026      	b.n	8003aa8 <HAL_RCC_OscConfig+0x3c8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d026      	beq.n	8003aac <HAL_RCC_OscConfig+0x3cc>
        pll_config = RCC->PLLCFGR;
 8003a5e:	4b19      	ldr	r3, [pc, #100]	; (8003ac4 <HAL_RCC_OscConfig+0x3e4>)
 8003a60:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a62:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8003a66:	69e2      	ldr	r2, [r4, #28]
 8003a68:	4291      	cmp	r1, r2
 8003a6a:	d121      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x3d0>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a6c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a70:	6a21      	ldr	r1, [r4, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a72:	428a      	cmp	r2, r1
 8003a74:	d11e      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x3d4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003a76:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a78:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8003a7c:	401a      	ands	r2, r3
 8003a7e:	428a      	cmp	r2, r1
 8003a80:	d11a      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a86:	6aa1      	ldr	r1, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003a88:	428a      	cmp	r2, r1
 8003a8a:	d117      	bne.n	8003abc <HAL_RCC_OscConfig+0x3dc>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003a8c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8003a90:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d114      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x3e0>
  return HAL_OK;
 8003a96:	2000      	movs	r0, #0
 8003a98:	e006      	b.n	8003aa8 <HAL_RCC_OscConfig+0x3c8>
    return HAL_ERROR;
 8003a9a:	2001      	movs	r0, #1
}
 8003a9c:	4770      	bx	lr
        return HAL_ERROR;
 8003a9e:	2001      	movs	r0, #1
 8003aa0:	e002      	b.n	8003aa8 <HAL_RCC_OscConfig+0x3c8>
        return HAL_ERROR;
 8003aa2:	2001      	movs	r0, #1
 8003aa4:	e000      	b.n	8003aa8 <HAL_RCC_OscConfig+0x3c8>
  return HAL_OK;
 8003aa6:	2000      	movs	r0, #0
}
 8003aa8:	b002      	add	sp, #8
 8003aaa:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8003aac:	2001      	movs	r0, #1
 8003aae:	e7fb      	b.n	8003aa8 <HAL_RCC_OscConfig+0x3c8>
          return HAL_ERROR;
 8003ab0:	2001      	movs	r0, #1
 8003ab2:	e7f9      	b.n	8003aa8 <HAL_RCC_OscConfig+0x3c8>
 8003ab4:	2001      	movs	r0, #1
 8003ab6:	e7f7      	b.n	8003aa8 <HAL_RCC_OscConfig+0x3c8>
 8003ab8:	2001      	movs	r0, #1
 8003aba:	e7f5      	b.n	8003aa8 <HAL_RCC_OscConfig+0x3c8>
 8003abc:	2001      	movs	r0, #1
 8003abe:	e7f3      	b.n	8003aa8 <HAL_RCC_OscConfig+0x3c8>
 8003ac0:	2001      	movs	r0, #1
 8003ac2:	e7f1      	b.n	8003aa8 <HAL_RCC_OscConfig+0x3c8>
 8003ac4:	40023800 	.word	0x40023800
 8003ac8:	42470000 	.word	0x42470000

08003acc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003acc:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ace:	4b31      	ldr	r3, [pc, #196]	; (8003b94 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f003 030c 	and.w	r3, r3, #12
 8003ad6:	2b04      	cmp	r3, #4
 8003ad8:	d057      	beq.n	8003b8a <HAL_RCC_GetSysClockFreq+0xbe>
 8003ada:	2b08      	cmp	r3, #8
 8003adc:	d157      	bne.n	8003b8e <HAL_RCC_GetSysClockFreq+0xc2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ade:	4b2d      	ldr	r3, [pc, #180]	; (8003b94 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003ae0:	685a      	ldr	r2, [r3, #4]
 8003ae2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003aec:	d02a      	beq.n	8003b44 <HAL_RCC_GetSysClockFreq+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aee:	4b29      	ldr	r3, [pc, #164]	; (8003b94 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003af0:	6859      	ldr	r1, [r3, #4]
 8003af2:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8003af6:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8003afa:	ebb1 000c 	subs.w	r0, r1, ip
 8003afe:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8003b02:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8003b06:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b0a:	0181      	lsls	r1, r0, #6
 8003b0c:	1a09      	subs	r1, r1, r0
 8003b0e:	eb63 030e 	sbc.w	r3, r3, lr
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b18:	00c9      	lsls	r1, r1, #3
 8003b1a:	eb11 0c0c 	adds.w	ip, r1, ip
 8003b1e:	f143 0300 	adc.w	r3, r3, #0
 8003b22:	0259      	lsls	r1, r3, #9
 8003b24:	2300      	movs	r3, #0
 8003b26:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8003b2a:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8003b2e:	f7fc fba7 	bl	8000280 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b32:	4b18      	ldr	r3, [pc, #96]	; (8003b94 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8003b3e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8003b42:	e025      	b.n	8003b90 <HAL_RCC_GetSysClockFreq+0xc4>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b44:	4b13      	ldr	r3, [pc, #76]	; (8003b94 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003b46:	6859      	ldr	r1, [r3, #4]
 8003b48:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8003b4c:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8003b50:	ebb1 000c 	subs.w	r0, r1, ip
 8003b54:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8003b58:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8003b5c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b60:	0181      	lsls	r1, r0, #6
 8003b62:	1a09      	subs	r1, r1, r0
 8003b64:	eb63 030e 	sbc.w	r3, r3, lr
 8003b68:	00db      	lsls	r3, r3, #3
 8003b6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b6e:	00c9      	lsls	r1, r1, #3
 8003b70:	eb11 0c0c 	adds.w	ip, r1, ip
 8003b74:	f143 0300 	adc.w	r3, r3, #0
 8003b78:	0299      	lsls	r1, r3, #10
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8003b80:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8003b84:	f7fc fb7c 	bl	8000280 <__aeabi_uldivmod>
 8003b88:	e7d3      	b.n	8003b32 <HAL_RCC_GetSysClockFreq+0x66>
      sysclockfreq = HSE_VALUE;
 8003b8a:	4803      	ldr	r0, [pc, #12]	; (8003b98 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003b8c:	e000      	b.n	8003b90 <HAL_RCC_GetSysClockFreq+0xc4>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b8e:	4803      	ldr	r0, [pc, #12]	; (8003b9c <HAL_RCC_GetSysClockFreq+0xd0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003b90:	bd08      	pop	{r3, pc}
 8003b92:	bf00      	nop
 8003b94:	40023800 	.word	0x40023800
 8003b98:	007a1200 	.word	0x007a1200
 8003b9c:	00f42400 	.word	0x00f42400

08003ba0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003ba0:	2800      	cmp	r0, #0
 8003ba2:	f000 809b 	beq.w	8003cdc <HAL_RCC_ClockConfig+0x13c>
{
 8003ba6:	b570      	push	{r4, r5, r6, lr}
 8003ba8:	460d      	mov	r5, r1
 8003baa:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bac:	4b4f      	ldr	r3, [pc, #316]	; (8003cec <HAL_RCC_ClockConfig+0x14c>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 030f 	and.w	r3, r3, #15
 8003bb4:	428b      	cmp	r3, r1
 8003bb6:	d208      	bcs.n	8003bca <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bb8:	b2cb      	uxtb	r3, r1
 8003bba:	4a4c      	ldr	r2, [pc, #304]	; (8003cec <HAL_RCC_ClockConfig+0x14c>)
 8003bbc:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bbe:	6813      	ldr	r3, [r2, #0]
 8003bc0:	f003 030f 	and.w	r3, r3, #15
 8003bc4:	428b      	cmp	r3, r1
 8003bc6:	f040 808b 	bne.w	8003ce0 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bca:	6823      	ldr	r3, [r4, #0]
 8003bcc:	f013 0f02 	tst.w	r3, #2
 8003bd0:	d017      	beq.n	8003c02 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd2:	f013 0f04 	tst.w	r3, #4
 8003bd6:	d004      	beq.n	8003be2 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bd8:	4a45      	ldr	r2, [pc, #276]	; (8003cf0 <HAL_RCC_ClockConfig+0x150>)
 8003bda:	6893      	ldr	r3, [r2, #8]
 8003bdc:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003be0:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003be2:	6823      	ldr	r3, [r4, #0]
 8003be4:	f013 0f08 	tst.w	r3, #8
 8003be8:	d004      	beq.n	8003bf4 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bea:	4a41      	ldr	r2, [pc, #260]	; (8003cf0 <HAL_RCC_ClockConfig+0x150>)
 8003bec:	6893      	ldr	r3, [r2, #8]
 8003bee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bf2:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bf4:	4a3e      	ldr	r2, [pc, #248]	; (8003cf0 <HAL_RCC_ClockConfig+0x150>)
 8003bf6:	6893      	ldr	r3, [r2, #8]
 8003bf8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bfc:	68a1      	ldr	r1, [r4, #8]
 8003bfe:	430b      	orrs	r3, r1
 8003c00:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c02:	6823      	ldr	r3, [r4, #0]
 8003c04:	f013 0f01 	tst.w	r3, #1
 8003c08:	d032      	beq.n	8003c70 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c0a:	6863      	ldr	r3, [r4, #4]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d021      	beq.n	8003c54 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c10:	1e9a      	subs	r2, r3, #2
 8003c12:	2a01      	cmp	r2, #1
 8003c14:	d925      	bls.n	8003c62 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c16:	4a36      	ldr	r2, [pc, #216]	; (8003cf0 <HAL_RCC_ClockConfig+0x150>)
 8003c18:	6812      	ldr	r2, [r2, #0]
 8003c1a:	f012 0f02 	tst.w	r2, #2
 8003c1e:	d061      	beq.n	8003ce4 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c20:	4933      	ldr	r1, [pc, #204]	; (8003cf0 <HAL_RCC_ClockConfig+0x150>)
 8003c22:	688a      	ldr	r2, [r1, #8]
 8003c24:	f022 0203 	bic.w	r2, r2, #3
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003c2c:	f7fd fe74 	bl	8001918 <HAL_GetTick>
 8003c30:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c32:	4b2f      	ldr	r3, [pc, #188]	; (8003cf0 <HAL_RCC_ClockConfig+0x150>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 030c 	and.w	r3, r3, #12
 8003c3a:	6862      	ldr	r2, [r4, #4]
 8003c3c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003c40:	d016      	beq.n	8003c70 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c42:	f7fd fe69 	bl	8001918 <HAL_GetTick>
 8003c46:	1b80      	subs	r0, r0, r6
 8003c48:	f241 3388 	movw	r3, #5000	; 0x1388
 8003c4c:	4298      	cmp	r0, r3
 8003c4e:	d9f0      	bls.n	8003c32 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8003c50:	2003      	movs	r0, #3
 8003c52:	e042      	b.n	8003cda <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c54:	4a26      	ldr	r2, [pc, #152]	; (8003cf0 <HAL_RCC_ClockConfig+0x150>)
 8003c56:	6812      	ldr	r2, [r2, #0]
 8003c58:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8003c5c:	d1e0      	bne.n	8003c20 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8003c5e:	2001      	movs	r0, #1
 8003c60:	e03b      	b.n	8003cda <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c62:	4a23      	ldr	r2, [pc, #140]	; (8003cf0 <HAL_RCC_ClockConfig+0x150>)
 8003c64:	6812      	ldr	r2, [r2, #0]
 8003c66:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003c6a:	d1d9      	bne.n	8003c20 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8003c6c:	2001      	movs	r0, #1
 8003c6e:	e034      	b.n	8003cda <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c70:	4b1e      	ldr	r3, [pc, #120]	; (8003cec <HAL_RCC_ClockConfig+0x14c>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 030f 	and.w	r3, r3, #15
 8003c78:	42ab      	cmp	r3, r5
 8003c7a:	d907      	bls.n	8003c8c <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c7c:	b2ea      	uxtb	r2, r5
 8003c7e:	4b1b      	ldr	r3, [pc, #108]	; (8003cec <HAL_RCC_ClockConfig+0x14c>)
 8003c80:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 030f 	and.w	r3, r3, #15
 8003c88:	42ab      	cmp	r3, r5
 8003c8a:	d12d      	bne.n	8003ce8 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c8c:	6823      	ldr	r3, [r4, #0]
 8003c8e:	f013 0f04 	tst.w	r3, #4
 8003c92:	d006      	beq.n	8003ca2 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c94:	4a16      	ldr	r2, [pc, #88]	; (8003cf0 <HAL_RCC_ClockConfig+0x150>)
 8003c96:	6893      	ldr	r3, [r2, #8]
 8003c98:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003c9c:	68e1      	ldr	r1, [r4, #12]
 8003c9e:	430b      	orrs	r3, r1
 8003ca0:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ca2:	6823      	ldr	r3, [r4, #0]
 8003ca4:	f013 0f08 	tst.w	r3, #8
 8003ca8:	d007      	beq.n	8003cba <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003caa:	4a11      	ldr	r2, [pc, #68]	; (8003cf0 <HAL_RCC_ClockConfig+0x150>)
 8003cac:	6893      	ldr	r3, [r2, #8]
 8003cae:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003cb2:	6921      	ldr	r1, [r4, #16]
 8003cb4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003cb8:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cba:	f7ff ff07 	bl	8003acc <HAL_RCC_GetSysClockFreq>
 8003cbe:	4b0c      	ldr	r3, [pc, #48]	; (8003cf0 <HAL_RCC_ClockConfig+0x150>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003cc6:	4a0b      	ldr	r2, [pc, #44]	; (8003cf4 <HAL_RCC_ClockConfig+0x154>)
 8003cc8:	5cd3      	ldrb	r3, [r2, r3]
 8003cca:	40d8      	lsrs	r0, r3
 8003ccc:	4b0a      	ldr	r3, [pc, #40]	; (8003cf8 <HAL_RCC_ClockConfig+0x158>)
 8003cce:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8003cd0:	4b0a      	ldr	r3, [pc, #40]	; (8003cfc <HAL_RCC_ClockConfig+0x15c>)
 8003cd2:	6818      	ldr	r0, [r3, #0]
 8003cd4:	f7fd fdd4 	bl	8001880 <HAL_InitTick>
  return HAL_OK;
 8003cd8:	2000      	movs	r0, #0
}
 8003cda:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003cdc:	2001      	movs	r0, #1
}
 8003cde:	4770      	bx	lr
      return HAL_ERROR;
 8003ce0:	2001      	movs	r0, #1
 8003ce2:	e7fa      	b.n	8003cda <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8003ce4:	2001      	movs	r0, #1
 8003ce6:	e7f8      	b.n	8003cda <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8003ce8:	2001      	movs	r0, #1
 8003cea:	e7f6      	b.n	8003cda <HAL_RCC_ClockConfig+0x13a>
 8003cec:	40023c00 	.word	0x40023c00
 8003cf0:	40023800 	.word	0x40023800
 8003cf4:	08006a0c 	.word	0x08006a0c
 8003cf8:	20000004 	.word	0x20000004
 8003cfc:	20000078 	.word	0x20000078

08003d00 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8003d00:	4b01      	ldr	r3, [pc, #4]	; (8003d08 <HAL_RCC_GetHCLKFreq+0x8>)
 8003d02:	6818      	ldr	r0, [r3, #0]
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	20000004 	.word	0x20000004

08003d0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d0c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d0e:	f7ff fff7 	bl	8003d00 <HAL_RCC_GetHCLKFreq>
 8003d12:	4b04      	ldr	r3, [pc, #16]	; (8003d24 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003d1a:	4a03      	ldr	r2, [pc, #12]	; (8003d28 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003d1c:	5cd3      	ldrb	r3, [r2, r3]
}
 8003d1e:	40d8      	lsrs	r0, r3
 8003d20:	bd08      	pop	{r3, pc}
 8003d22:	bf00      	nop
 8003d24:	40023800 	.word	0x40023800
 8003d28:	08006a1c 	.word	0x08006a1c

08003d2c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d2c:	b530      	push	{r4, r5, lr}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003d32:	6803      	ldr	r3, [r0, #0]
 8003d34:	f013 0f05 	tst.w	r3, #5
 8003d38:	d106      	bne.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d3a:	6823      	ldr	r3, [r4, #0]
 8003d3c:	f013 0f02 	tst.w	r3, #2
 8003d40:	d12e      	bne.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x74>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003d42:	2000      	movs	r0, #0
}
 8003d44:	b003      	add	sp, #12
 8003d46:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8003d48:	4b4a      	ldr	r3, [pc, #296]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 8003d4e:	f7fd fde3 	bl	8001918 <HAL_GetTick>
 8003d52:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d54:	4b48      	ldr	r3, [pc, #288]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003d5c:	d006      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x40>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d5e:	f7fd fddb 	bl	8001918 <HAL_GetTick>
 8003d62:	1b43      	subs	r3, r0, r5
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d9f5      	bls.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x28>
        return HAL_TIMEOUT;
 8003d68:	2003      	movs	r0, #3
 8003d6a:	e7eb      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003d6c:	6862      	ldr	r2, [r4, #4]
 8003d6e:	68a3      	ldr	r3, [r4, #8]
 8003d70:	071b      	lsls	r3, r3, #28
 8003d72:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003d76:	4a40      	ldr	r2, [pc, #256]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003d78:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8003d7c:	4b3d      	ldr	r3, [pc, #244]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8003d7e:	2201      	movs	r2, #1
 8003d80:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 8003d82:	f7fd fdc9 	bl	8001918 <HAL_GetTick>
 8003d86:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d88:	4b3b      	ldr	r3, [pc, #236]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003d90:	d1d3      	bne.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d92:	f7fd fdc1 	bl	8001918 <HAL_GetTick>
 8003d96:	1b43      	subs	r3, r0, r5
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d9f5      	bls.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x5c>
        return HAL_TIMEOUT;
 8003d9c:	2003      	movs	r0, #3
 8003d9e:	e7d1      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_PWR_CLK_ENABLE();
 8003da0:	2300      	movs	r3, #0
 8003da2:	9301      	str	r3, [sp, #4]
 8003da4:	4b34      	ldr	r3, [pc, #208]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003da6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003da8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003dac:	641a      	str	r2, [r3, #64]	; 0x40
 8003dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db4:	9301      	str	r3, [sp, #4]
 8003db6:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8003db8:	4a30      	ldr	r2, [pc, #192]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003dba:	6813      	ldr	r3, [r2, #0]
 8003dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dc0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003dc2:	f7fd fda9 	bl	8001918 <HAL_GetTick>
 8003dc6:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003dc8:	4b2c      	ldr	r3, [pc, #176]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003dd0:	d106      	bne.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003dd2:	f7fd fda1 	bl	8001918 <HAL_GetTick>
 8003dd6:	1b43      	subs	r3, r0, r5
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d9f5      	bls.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
        return HAL_TIMEOUT;
 8003ddc:	2003      	movs	r0, #3
 8003dde:	e7b1      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x18>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003de0:	4b25      	ldr	r3, [pc, #148]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003de4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003de8:	d014      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003dea:	68e2      	ldr	r2, [r4, #12]
 8003dec:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d00f      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003df4:	4b20      	ldr	r3, [pc, #128]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003df6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003df8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8003dfc:	491d      	ldr	r1, [pc, #116]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8003dfe:	2001      	movs	r0, #1
 8003e00:	f8c1 0e40 	str.w	r0, [r1, #3648]	; 0xe40
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e04:	2000      	movs	r0, #0
 8003e06:	f8c1 0e40 	str.w	r0, [r1, #3648]	; 0xe40
      RCC->BDCR = tmpreg1;
 8003e0a:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0e:	f013 0f01 	tst.w	r3, #1
 8003e12:	d113      	bne.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x110>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e14:	68e3      	ldr	r3, [r4, #12]
 8003e16:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003e1a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8003e1e:	d01e      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x132>
 8003e20:	4a15      	ldr	r2, [pc, #84]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003e22:	6893      	ldr	r3, [r2, #8]
 8003e24:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003e28:	6093      	str	r3, [r2, #8]
 8003e2a:	4913      	ldr	r1, [pc, #76]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003e2c:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8003e2e:	68e2      	ldr	r2, [r4, #12]
 8003e30:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8003e34:	4313      	orrs	r3, r2
 8003e36:	670b      	str	r3, [r1, #112]	; 0x70
  return HAL_OK;
 8003e38:	2000      	movs	r0, #0
 8003e3a:	e783      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x18>
        tickstart = HAL_GetTick();
 8003e3c:	f7fd fd6c 	bl	8001918 <HAL_GetTick>
 8003e40:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e42:	4b0d      	ldr	r3, [pc, #52]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e46:	f013 0f02 	tst.w	r3, #2
 8003e4a:	d1e3      	bne.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e4c:	f7fd fd64 	bl	8001918 <HAL_GetTick>
 8003e50:	1b40      	subs	r0, r0, r5
 8003e52:	f241 3388 	movw	r3, #5000	; 0x1388
 8003e56:	4298      	cmp	r0, r3
 8003e58:	d9f3      	bls.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x116>
            return HAL_TIMEOUT;
 8003e5a:	2003      	movs	r0, #3
 8003e5c:	e772      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e5e:	4906      	ldr	r1, [pc, #24]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003e60:	688a      	ldr	r2, [r1, #8]
 8003e62:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8003e66:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	608b      	str	r3, [r1, #8]
 8003e72:	e7da      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003e74:	42470000 	.word	0x42470000
 8003e78:	40023800 	.word	0x40023800
 8003e7c:	40007000 	.word	0x40007000

08003e80 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8003e80:	2801      	cmp	r0, #1
 8003e82:	d001      	beq.n	8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x8>
  uint32_t frequency = 0U;
 8003e84:	2000      	movs	r0, #0
 8003e86:	4770      	bx	lr
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003e88:	4b16      	ldr	r3, [pc, #88]	; (8003ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
      switch (srcclk)
 8003e8c:	f413 0300 	ands.w	r3, r3, #8388608	; 0x800000
 8003e90:	d003      	beq.n	8003e9a <HAL_RCCEx_GetPeriphCLKFreq+0x1a>
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d123      	bne.n	8003ede <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8003e96:	4814      	ldr	r0, [pc, #80]	; (8003ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x68>)
 8003e98:	4770      	bx	lr
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003e9a:	4b12      	ldr	r3, [pc, #72]	; (8003ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003ea2:	d014      	beq.n	8003ece <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003ea4:	4b0f      	ldr	r3, [pc, #60]	; (8003ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003eac:	480f      	ldr	r0, [pc, #60]	; (8003eec <HAL_RCCEx_GetPeriphCLKFreq+0x6c>)
 8003eae:	fbb0 f3f3 	udiv	r3, r0, r3
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003eb2:	4a0c      	ldr	r2, [pc, #48]	; (8003ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 8003eb4:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
 8003eb8:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8003ebc:	fb03 f000 	mul.w	r0, r3, r0
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003ec0:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8003ec4:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8003ec8:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 8003ecc:	4770      	bx	lr
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003ece:	4b05      	ldr	r3, [pc, #20]	; (8003ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ed6:	4806      	ldr	r0, [pc, #24]	; (8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x70>)
 8003ed8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003edc:	e7e9      	b.n	8003eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x32>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003ede:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	00bb8000 	.word	0x00bb8000
 8003eec:	007a1200 	.word	0x007a1200
 8003ef0:	00f42400 	.word	0x00f42400

08003ef4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ef8:	4606      	mov	r6, r0
 8003efa:	4688      	mov	r8, r1
 8003efc:	4617      	mov	r7, r2
 8003efe:	461d      	mov	r5, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f00:	6834      	ldr	r4, [r6, #0]
 8003f02:	68a4      	ldr	r4, [r4, #8]
 8003f04:	ea38 0304 	bics.w	r3, r8, r4
 8003f08:	bf0c      	ite	eq
 8003f0a:	f04f 0c01 	moveq.w	ip, #1
 8003f0e:	f04f 0c00 	movne.w	ip, #0
 8003f12:	45bc      	cmp	ip, r7
 8003f14:	d037      	beq.n	8003f86 <SPI_WaitFlagStateUntilTimeout+0x92>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f16:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003f1a:	d0f1      	beq.n	8003f00 <SPI_WaitFlagStateUntilTimeout+0xc>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003f1c:	f7fd fcfc 	bl	8001918 <HAL_GetTick>
 8003f20:	9b06      	ldr	r3, [sp, #24]
 8003f22:	1ac0      	subs	r0, r0, r3
 8003f24:	42a8      	cmp	r0, r5
 8003f26:	d201      	bcs.n	8003f2c <SPI_WaitFlagStateUntilTimeout+0x38>
 8003f28:	2d00      	cmp	r5, #0
 8003f2a:	d1e9      	bne.n	8003f00 <SPI_WaitFlagStateUntilTimeout+0xc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f2c:	6832      	ldr	r2, [r6, #0]
 8003f2e:	6853      	ldr	r3, [r2, #4]
 8003f30:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8003f34:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f36:	6873      	ldr	r3, [r6, #4]
 8003f38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f3c:	d00b      	beq.n	8003f56 <SPI_WaitFlagStateUntilTimeout+0x62>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f3e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8003f40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f44:	d014      	beq.n	8003f70 <SPI_WaitFlagStateUntilTimeout+0x7c>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f46:	2301      	movs	r3, #1
 8003f48:	f886 3051 	strb.w	r3, [r6, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50

        return HAL_TIMEOUT;
 8003f52:	2003      	movs	r0, #3
 8003f54:	e018      	b.n	8003f88 <SPI_WaitFlagStateUntilTimeout+0x94>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f56:	68b3      	ldr	r3, [r6, #8]
 8003f58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f5c:	d002      	beq.n	8003f64 <SPI_WaitFlagStateUntilTimeout+0x70>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f62:	d1ec      	bne.n	8003f3e <SPI_WaitFlagStateUntilTimeout+0x4a>
          __HAL_SPI_DISABLE(hspi);
 8003f64:	6832      	ldr	r2, [r6, #0]
 8003f66:	6813      	ldr	r3, [r2, #0]
 8003f68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f6c:	6013      	str	r3, [r2, #0]
 8003f6e:	e7e6      	b.n	8003f3e <SPI_WaitFlagStateUntilTimeout+0x4a>
          SPI_RESET_CRC(hspi);
 8003f70:	6832      	ldr	r2, [r6, #0]
 8003f72:	6813      	ldr	r3, [r2, #0]
 8003f74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f78:	6013      	str	r3, [r2, #0]
 8003f7a:	6832      	ldr	r2, [r6, #0]
 8003f7c:	6813      	ldr	r3, [r2, #0]
 8003f7e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003f82:	6013      	str	r3, [r2, #0]
 8003f84:	e7df      	b.n	8003f46 <SPI_WaitFlagStateUntilTimeout+0x52>
      }
    }
  }

  return HAL_OK;
 8003f86:	2000      	movs	r0, #0
}
 8003f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003f8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f8c:	b510      	push	{r4, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	4604      	mov	r4, r0
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003f92:	4b16      	ldr	r3, [pc, #88]	; (8003fec <SPI_EndRxTxTransaction+0x60>)
 8003f94:	6818      	ldr	r0, [r3, #0]
 8003f96:	4b16      	ldr	r3, [pc, #88]	; (8003ff0 <SPI_EndRxTxTransaction+0x64>)
 8003f98:	fba3 3000 	umull	r3, r0, r3, r0
 8003f9c:	0d40      	lsrs	r0, r0, #21
 8003f9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fa2:	fb03 f000 	mul.w	r0, r3, r0
 8003fa6:	9003      	str	r0, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fa8:	6863      	ldr	r3, [r4, #4]
 8003faa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fae:	d00b      	beq.n	8003fc8 <SPI_EndRxTxTransaction+0x3c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003fb0:	9b03      	ldr	r3, [sp, #12]
 8003fb2:	b1bb      	cbz	r3, 8003fe4 <SPI_EndRxTxTransaction+0x58>
      {
        break;
      }
      count--;
 8003fb4:	9b03      	ldr	r3, [sp, #12]
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003fba:	6823      	ldr	r3, [r4, #0]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003fc2:	d1f5      	bne.n	8003fb0 <SPI_EndRxTxTransaction+0x24>
  }

  return HAL_OK;
 8003fc4:	2000      	movs	r0, #0
 8003fc6:	e00e      	b.n	8003fe6 <SPI_EndRxTxTransaction+0x5a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fc8:	9200      	str	r2, [sp, #0]
 8003fca:	460b      	mov	r3, r1
 8003fcc:	2200      	movs	r2, #0
 8003fce:	2180      	movs	r1, #128	; 0x80
 8003fd0:	4620      	mov	r0, r4
 8003fd2:	f7ff ff8f 	bl	8003ef4 <SPI_WaitFlagStateUntilTimeout>
 8003fd6:	b130      	cbz	r0, 8003fe6 <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fd8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003fda:	f043 0320 	orr.w	r3, r3, #32
 8003fde:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8003fe0:	2003      	movs	r0, #3
 8003fe2:	e000      	b.n	8003fe6 <SPI_EndRxTxTransaction+0x5a>
  return HAL_OK;
 8003fe4:	2000      	movs	r0, #0
}
 8003fe6:	b004      	add	sp, #16
 8003fe8:	bd10      	pop	{r4, pc}
 8003fea:	bf00      	nop
 8003fec:	20000004 	.word	0x20000004
 8003ff0:	165e9f81 	.word	0x165e9f81

08003ff4 <HAL_SPI_Init>:
  if (hspi == NULL)
 8003ff4:	2800      	cmp	r0, #0
 8003ff6:	d03b      	beq.n	8004070 <HAL_SPI_Init+0x7c>
{
 8003ff8:	b510      	push	{r4, lr}
 8003ffa:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004000:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8004004:	2b00      	cmp	r3, #0
 8004006:	d02e      	beq.n	8004066 <HAL_SPI_Init+0x72>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004008:	2302      	movs	r3, #2
 800400a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800400e:	6822      	ldr	r2, [r4, #0]
 8004010:	6813      	ldr	r3, [r2, #0]
 8004012:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004016:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004018:	6863      	ldr	r3, [r4, #4]
 800401a:	68a2      	ldr	r2, [r4, #8]
 800401c:	4313      	orrs	r3, r2
 800401e:	68e2      	ldr	r2, [r4, #12]
 8004020:	4313      	orrs	r3, r2
 8004022:	6922      	ldr	r2, [r4, #16]
 8004024:	4313      	orrs	r3, r2
 8004026:	6962      	ldr	r2, [r4, #20]
 8004028:	4313      	orrs	r3, r2
 800402a:	69a2      	ldr	r2, [r4, #24]
 800402c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8004030:	4313      	orrs	r3, r2
 8004032:	69e2      	ldr	r2, [r4, #28]
 8004034:	4313      	orrs	r3, r2
 8004036:	6a22      	ldr	r2, [r4, #32]
 8004038:	4313      	orrs	r3, r2
 800403a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800403c:	6822      	ldr	r2, [r4, #0]
 800403e:	430b      	orrs	r3, r1
 8004040:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004042:	8b63      	ldrh	r3, [r4, #26]
 8004044:	f003 0304 	and.w	r3, r3, #4
 8004048:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800404a:	6822      	ldr	r2, [r4, #0]
 800404c:	430b      	orrs	r3, r1
 800404e:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004050:	6822      	ldr	r2, [r4, #0]
 8004052:	69d3      	ldr	r3, [r2, #28]
 8004054:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004058:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800405a:	2000      	movs	r0, #0
 800405c:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800405e:	2301      	movs	r3, #1
 8004060:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8004064:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8004066:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800406a:	f7fc ff4b 	bl	8000f04 <HAL_SPI_MspInit>
 800406e:	e7cb      	b.n	8004008 <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 8004070:	2001      	movs	r0, #1
}
 8004072:	4770      	bx	lr

08004074 <HAL_SPI_DeInit>:
  if (hspi == NULL)
 8004074:	b190      	cbz	r0, 800409c <HAL_SPI_DeInit+0x28>
{
 8004076:	b510      	push	{r4, lr}
 8004078:	4604      	mov	r4, r0
  hspi->State = HAL_SPI_STATE_BUSY;
 800407a:	2302      	movs	r3, #2
 800407c:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8004080:	6802      	ldr	r2, [r0, #0]
 8004082:	6813      	ldr	r3, [r2, #0]
 8004084:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004088:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 800408a:	f7fc ff71 	bl	8000f70 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800408e:	2000      	movs	r0, #0
 8004090:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8004092:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004096:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
}
 800409a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800409c:	2001      	movs	r0, #1
}
 800409e:	4770      	bx	lr

080040a0 <HAL_SPI_TransmitReceive>:
{
 80040a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80040a4:	b083      	sub	sp, #12
 80040a6:	461f      	mov	r7, r3
 80040a8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 80040aa:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	f000 8110 	beq.w	80042d4 <HAL_SPI_TransmitReceive+0x234>
 80040b4:	4604      	mov	r4, r0
 80040b6:	4688      	mov	r8, r1
 80040b8:	4691      	mov	r9, r2
 80040ba:	2301      	movs	r3, #1
 80040bc:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80040c0:	f7fd fc2a 	bl	8001918 <HAL_GetTick>
 80040c4:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 80040c6:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80040ca:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 80040cc:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d00a      	beq.n	80040e8 <HAL_SPI_TransmitReceive+0x48>
 80040d2:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80040d6:	f040 80e3 	bne.w	80042a0 <HAL_SPI_TransmitReceive+0x200>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80040da:	68a2      	ldr	r2, [r4, #8]
 80040dc:	2a00      	cmp	r2, #0
 80040de:	f040 80e9 	bne.w	80042b4 <HAL_SPI_TransmitReceive+0x214>
 80040e2:	2b04      	cmp	r3, #4
 80040e4:	f040 80e8 	bne.w	80042b8 <HAL_SPI_TransmitReceive+0x218>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80040e8:	f1b8 0f00 	cmp.w	r8, #0
 80040ec:	f000 80e6 	beq.w	80042bc <HAL_SPI_TransmitReceive+0x21c>
 80040f0:	f1b9 0f00 	cmp.w	r9, #0
 80040f4:	f000 80e4 	beq.w	80042c0 <HAL_SPI_TransmitReceive+0x220>
 80040f8:	2f00      	cmp	r7, #0
 80040fa:	f000 80e3 	beq.w	80042c4 <HAL_SPI_TransmitReceive+0x224>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80040fe:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b04      	cmp	r3, #4
 8004106:	d002      	beq.n	800410e <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004108:	2305      	movs	r3, #5
 800410a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800410e:	2300      	movs	r3, #0
 8004110:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004112:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004116:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004118:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800411a:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 800411e:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004120:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 8004122:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004124:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004126:	6823      	ldr	r3, [r4, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800412e:	d103      	bne.n	8004138 <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004136:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004138:	68e3      	ldr	r3, [r4, #12]
 800413a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800413e:	d011      	beq.n	8004164 <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004140:	6863      	ldr	r3, [r4, #4]
 8004142:	b10b      	cbz	r3, 8004148 <HAL_SPI_TransmitReceive+0xa8>
 8004144:	2f01      	cmp	r7, #1
 8004146:	d10b      	bne.n	8004160 <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004148:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800414a:	6823      	ldr	r3, [r4, #0]
 800414c:	7812      	ldrb	r2, [r2, #0]
 800414e:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004150:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004152:	3301      	adds	r3, #1
 8004154:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004156:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004158:	b29b      	uxth	r3, r3
 800415a:	3b01      	subs	r3, #1
 800415c:	b29b      	uxth	r3, r3
 800415e:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8004160:	2701      	movs	r7, #1
 8004162:	e06b      	b.n	800423c <HAL_SPI_TransmitReceive+0x19c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004164:	6863      	ldr	r3, [r4, #4]
 8004166:	b10b      	cbz	r3, 800416c <HAL_SPI_TransmitReceive+0xcc>
 8004168:	2f01      	cmp	r7, #1
 800416a:	d10b      	bne.n	8004184 <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800416c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800416e:	6823      	ldr	r3, [r4, #0]
 8004170:	8812      	ldrh	r2, [r2, #0]
 8004172:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004174:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004176:	3302      	adds	r3, #2
 8004178:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800417a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800417c:	b29b      	uxth	r3, r3
 800417e:	3b01      	subs	r3, #1
 8004180:	b29b      	uxth	r3, r3
 8004182:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8004184:	2701      	movs	r7, #1
 8004186:	e01c      	b.n	80041c2 <HAL_SPI_TransmitReceive+0x122>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004188:	6823      	ldr	r3, [r4, #0]
 800418a:	689a      	ldr	r2, [r3, #8]
 800418c:	f012 0f01 	tst.w	r2, #1
 8004190:	d00e      	beq.n	80041b0 <HAL_SPI_TransmitReceive+0x110>
 8004192:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8004194:	b292      	uxth	r2, r2
 8004196:	b15a      	cbz	r2, 80041b0 <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004198:	68da      	ldr	r2, [r3, #12]
 800419a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800419c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800419e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80041a0:	3302      	adds	r3, #2
 80041a2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80041a4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	3b01      	subs	r3, #1
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80041ae:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80041b0:	f7fd fbb2 	bl	8001918 <HAL_GetTick>
 80041b4:	1b80      	subs	r0, r0, r6
 80041b6:	42a8      	cmp	r0, r5
 80041b8:	d303      	bcc.n	80041c2 <HAL_SPI_TransmitReceive+0x122>
 80041ba:	f1b5 3fff 	cmp.w	r5, #4294967295
 80041be:	f040 8083 	bne.w	80042c8 <HAL_SPI_TransmitReceive+0x228>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041c2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	b91b      	cbnz	r3, 80041d0 <HAL_SPI_TransmitReceive+0x130>
 80041c8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d053      	beq.n	8004278 <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041d0:	6823      	ldr	r3, [r4, #0]
 80041d2:	689a      	ldr	r2, [r3, #8]
 80041d4:	f012 0f02 	tst.w	r2, #2
 80041d8:	d0d6      	beq.n	8004188 <HAL_SPI_TransmitReceive+0xe8>
 80041da:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80041dc:	b292      	uxth	r2, r2
 80041de:	2a00      	cmp	r2, #0
 80041e0:	d0d2      	beq.n	8004188 <HAL_SPI_TransmitReceive+0xe8>
 80041e2:	2f00      	cmp	r7, #0
 80041e4:	d0d0      	beq.n	8004188 <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041e6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80041e8:	8812      	ldrh	r2, [r2, #0]
 80041ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80041ee:	3302      	adds	r3, #2
 80041f0:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80041f2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	3b01      	subs	r3, #1
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80041fc:	2700      	movs	r7, #0
 80041fe:	e7c3      	b.n	8004188 <HAL_SPI_TransmitReceive+0xe8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004200:	6823      	ldr	r3, [r4, #0]
 8004202:	689a      	ldr	r2, [r3, #8]
 8004204:	f012 0f01 	tst.w	r2, #1
 8004208:	d00e      	beq.n	8004228 <HAL_SPI_TransmitReceive+0x188>
 800420a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800420c:	b292      	uxth	r2, r2
 800420e:	b15a      	cbz	r2, 8004228 <HAL_SPI_TransmitReceive+0x188>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004210:	68da      	ldr	r2, [r3, #12]
 8004212:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004214:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004216:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004218:	3301      	adds	r3, #1
 800421a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800421c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800421e:	b29b      	uxth	r3, r3
 8004220:	3b01      	subs	r3, #1
 8004222:	b29b      	uxth	r3, r3
 8004224:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8004226:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004228:	f7fd fb76 	bl	8001918 <HAL_GetTick>
 800422c:	1b83      	subs	r3, r0, r6
 800422e:	42ab      	cmp	r3, r5
 8004230:	d302      	bcc.n	8004238 <HAL_SPI_TransmitReceive+0x198>
 8004232:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004236:	d149      	bne.n	80042cc <HAL_SPI_TransmitReceive+0x22c>
 8004238:	2d00      	cmp	r5, #0
 800423a:	d049      	beq.n	80042d0 <HAL_SPI_TransmitReceive+0x230>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800423c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800423e:	b29b      	uxth	r3, r3
 8004240:	b913      	cbnz	r3, 8004248 <HAL_SPI_TransmitReceive+0x1a8>
 8004242:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004244:	b29b      	uxth	r3, r3
 8004246:	b1bb      	cbz	r3, 8004278 <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004248:	6823      	ldr	r3, [r4, #0]
 800424a:	689a      	ldr	r2, [r3, #8]
 800424c:	f012 0f02 	tst.w	r2, #2
 8004250:	d0d6      	beq.n	8004200 <HAL_SPI_TransmitReceive+0x160>
 8004252:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8004254:	b292      	uxth	r2, r2
 8004256:	2a00      	cmp	r2, #0
 8004258:	d0d2      	beq.n	8004200 <HAL_SPI_TransmitReceive+0x160>
 800425a:	2f00      	cmp	r7, #0
 800425c:	d0d0      	beq.n	8004200 <HAL_SPI_TransmitReceive+0x160>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800425e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004260:	7812      	ldrb	r2, [r2, #0]
 8004262:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8004264:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004266:	3301      	adds	r3, #1
 8004268:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800426a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800426c:	b29b      	uxth	r3, r3
 800426e:	3b01      	subs	r3, #1
 8004270:	b29b      	uxth	r3, r3
 8004272:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8004274:	2700      	movs	r7, #0
 8004276:	e7c3      	b.n	8004200 <HAL_SPI_TransmitReceive+0x160>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004278:	4632      	mov	r2, r6
 800427a:	4629      	mov	r1, r5
 800427c:	4620      	mov	r0, r4
 800427e:	f7ff fe85 	bl	8003f8c <SPI_EndRxTxTransaction>
 8004282:	b948      	cbnz	r0, 8004298 <HAL_SPI_TransmitReceive+0x1f8>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004284:	68a3      	ldr	r3, [r4, #8]
 8004286:	b963      	cbnz	r3, 80042a2 <HAL_SPI_TransmitReceive+0x202>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004288:	9301      	str	r3, [sp, #4]
 800428a:	6823      	ldr	r3, [r4, #0]
 800428c:	68da      	ldr	r2, [r3, #12]
 800428e:	9201      	str	r2, [sp, #4]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	9301      	str	r3, [sp, #4]
 8004294:	9b01      	ldr	r3, [sp, #4]
 8004296:	e004      	b.n	80042a2 <HAL_SPI_TransmitReceive+0x202>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004298:	2320      	movs	r3, #32
 800429a:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 800429c:	2001      	movs	r0, #1
    goto error;
 800429e:	e000      	b.n	80042a2 <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_BUSY;
 80042a0:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80042a2:	2301      	movs	r3, #1
 80042a4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80042a8:	2300      	movs	r3, #0
 80042aa:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80042ae:	b003      	add	sp, #12
 80042b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 80042b4:	2002      	movs	r0, #2
 80042b6:	e7f4      	b.n	80042a2 <HAL_SPI_TransmitReceive+0x202>
 80042b8:	2002      	movs	r0, #2
 80042ba:	e7f2      	b.n	80042a2 <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_ERROR;
 80042bc:	2001      	movs	r0, #1
 80042be:	e7f0      	b.n	80042a2 <HAL_SPI_TransmitReceive+0x202>
 80042c0:	2001      	movs	r0, #1
 80042c2:	e7ee      	b.n	80042a2 <HAL_SPI_TransmitReceive+0x202>
 80042c4:	2001      	movs	r0, #1
 80042c6:	e7ec      	b.n	80042a2 <HAL_SPI_TransmitReceive+0x202>
        errorcode = HAL_TIMEOUT;
 80042c8:	2003      	movs	r0, #3
 80042ca:	e7ea      	b.n	80042a2 <HAL_SPI_TransmitReceive+0x202>
        errorcode = HAL_TIMEOUT;
 80042cc:	2003      	movs	r0, #3
 80042ce:	e7e8      	b.n	80042a2 <HAL_SPI_TransmitReceive+0x202>
 80042d0:	2003      	movs	r0, #3
 80042d2:	e7e6      	b.n	80042a2 <HAL_SPI_TransmitReceive+0x202>
  __HAL_LOCK(hspi);
 80042d4:	2002      	movs	r0, #2
 80042d6:	e7ea      	b.n	80042ae <HAL_SPI_TransmitReceive+0x20e>

080042d8 <HAL_SPI_GetState>:
  return hspi->State;
 80042d8:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 80042dc:	4770      	bx	lr
	...

080042e0 <USB_CoreReset>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0U;
 80042e0:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80042e2:	3301      	adds	r3, #1
 80042e4:	4a0c      	ldr	r2, [pc, #48]	; (8004318 <USB_CoreReset+0x38>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d811      	bhi.n	800430e <USB_CoreReset+0x2e>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80042ea:	6902      	ldr	r2, [r0, #16]
 80042ec:	2a00      	cmp	r2, #0
 80042ee:	daf8      	bge.n	80042e2 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80042f0:	6903      	ldr	r3, [r0, #16]
 80042f2:	f043 0301 	orr.w	r3, r3, #1
 80042f6:	6103      	str	r3, [r0, #16]
  count = 0U;
 80042f8:	2300      	movs	r3, #0

  do
  {
    if (++count > 200000U)
 80042fa:	3301      	adds	r3, #1
 80042fc:	4a06      	ldr	r2, [pc, #24]	; (8004318 <USB_CoreReset+0x38>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d807      	bhi.n	8004312 <USB_CoreReset+0x32>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004302:	6902      	ldr	r2, [r0, #16]
 8004304:	f012 0f01 	tst.w	r2, #1
 8004308:	d1f7      	bne.n	80042fa <USB_CoreReset+0x1a>

  return HAL_OK;
 800430a:	2000      	movs	r0, #0
 800430c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800430e:	2003      	movs	r0, #3
 8004310:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004312:	2003      	movs	r0, #3
}
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	00030d40 	.word	0x00030d40

0800431c <USB_CoreInit>:
{
 800431c:	b084      	sub	sp, #16
 800431e:	b510      	push	{r4, lr}
 8004320:	4604      	mov	r4, r0
 8004322:	a803      	add	r0, sp, #12
 8004324:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004328:	9b08      	ldr	r3, [sp, #32]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d11f      	bne.n	800436e <USB_CoreInit+0x52>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800432e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004330:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004334:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004336:	68e3      	ldr	r3, [r4, #12]
 8004338:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800433c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004340:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004342:	68e3      	ldr	r3, [r4, #12]
 8004344:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004348:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 800434a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800434c:	2b01      	cmp	r3, #1
 800434e:	d009      	beq.n	8004364 <USB_CoreInit+0x48>
    ret = USB_CoreReset(USBx);
 8004350:	4620      	mov	r0, r4
 8004352:	f7ff ffc5 	bl	80042e0 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8004356:	9b06      	ldr	r3, [sp, #24]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d01b      	beq.n	8004394 <USB_CoreInit+0x78>
}
 800435c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004360:	b004      	add	sp, #16
 8004362:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004364:	68e3      	ldr	r3, [r4, #12]
 8004366:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800436a:	60e3      	str	r3, [r4, #12]
 800436c:	e7f0      	b.n	8004350 <USB_CoreInit+0x34>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800436e:	68e3      	ldr	r3, [r4, #12]
 8004370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004374:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 8004376:	4620      	mov	r0, r4
 8004378:	f7ff ffb2 	bl	80042e0 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 800437c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800437e:	b923      	cbnz	r3, 800438a <USB_CoreInit+0x6e>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004380:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004382:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004386:	63a3      	str	r3, [r4, #56]	; 0x38
 8004388:	e7e5      	b.n	8004356 <USB_CoreInit+0x3a>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800438a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800438c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004390:	63a3      	str	r3, [r4, #56]	; 0x38
 8004392:	e7e0      	b.n	8004356 <USB_CoreInit+0x3a>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004394:	68a3      	ldr	r3, [r4, #8]
 8004396:	f043 0306 	orr.w	r3, r3, #6
 800439a:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800439c:	68a3      	ldr	r3, [r4, #8]
 800439e:	f043 0320 	orr.w	r3, r3, #32
 80043a2:	60a3      	str	r3, [r4, #8]
 80043a4:	e7da      	b.n	800435c <USB_CoreInit+0x40>
	...

080043a8 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 80043a8:	2a02      	cmp	r2, #2
 80043aa:	d00a      	beq.n	80043c2 <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 80043ac:	2109      	movs	r1, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80043ae:	68c2      	ldr	r2, [r0, #12]
 80043b0:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 80043b4:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80043b6:	68c3      	ldr	r3, [r0, #12]
 80043b8:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 80043bc:	60c3      	str	r3, [r0, #12]
}
 80043be:	2000      	movs	r0, #0
 80043c0:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80043c2:	4b23      	ldr	r3, [pc, #140]	; (8004450 <USB_SetTurnaroundTime+0xa8>)
 80043c4:	440b      	add	r3, r1
 80043c6:	4a23      	ldr	r2, [pc, #140]	; (8004454 <USB_SetTurnaroundTime+0xac>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d92f      	bls.n	800442c <USB_SetTurnaroundTime+0x84>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80043cc:	4b22      	ldr	r3, [pc, #136]	; (8004458 <USB_SetTurnaroundTime+0xb0>)
 80043ce:	440b      	add	r3, r1
 80043d0:	4a22      	ldr	r2, [pc, #136]	; (800445c <USB_SetTurnaroundTime+0xb4>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d92c      	bls.n	8004430 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80043d6:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 80043da:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 80043de:	4a20      	ldr	r2, [pc, #128]	; (8004460 <USB_SetTurnaroundTime+0xb8>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d927      	bls.n	8004434 <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80043e4:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 80043e8:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 80043ec:	4a1d      	ldr	r2, [pc, #116]	; (8004464 <USB_SetTurnaroundTime+0xbc>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d322      	bcc.n	8004438 <USB_SetTurnaroundTime+0x90>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80043f2:	4b1d      	ldr	r3, [pc, #116]	; (8004468 <USB_SetTurnaroundTime+0xc0>)
 80043f4:	440b      	add	r3, r1
 80043f6:	4a1d      	ldr	r2, [pc, #116]	; (800446c <USB_SetTurnaroundTime+0xc4>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d91f      	bls.n	800443c <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80043fc:	4b1c      	ldr	r3, [pc, #112]	; (8004470 <USB_SetTurnaroundTime+0xc8>)
 80043fe:	440b      	add	r3, r1
 8004400:	4a1c      	ldr	r2, [pc, #112]	; (8004474 <USB_SetTurnaroundTime+0xcc>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d31c      	bcc.n	8004440 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004406:	4b1c      	ldr	r3, [pc, #112]	; (8004478 <USB_SetTurnaroundTime+0xd0>)
 8004408:	440b      	add	r3, r1
 800440a:	4a1c      	ldr	r2, [pc, #112]	; (800447c <USB_SetTurnaroundTime+0xd4>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d319      	bcc.n	8004444 <USB_SetTurnaroundTime+0x9c>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004410:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 8004414:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 8004418:	4a19      	ldr	r2, [pc, #100]	; (8004480 <USB_SetTurnaroundTime+0xd8>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d314      	bcc.n	8004448 <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800441e:	4b19      	ldr	r3, [pc, #100]	; (8004484 <USB_SetTurnaroundTime+0xdc>)
 8004420:	440b      	add	r3, r1
 8004422:	4a19      	ldr	r2, [pc, #100]	; (8004488 <USB_SetTurnaroundTime+0xe0>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d211      	bcs.n	800444c <USB_SetTurnaroundTime+0xa4>
      UsbTrd = 0x7U;
 8004428:	2107      	movs	r1, #7
 800442a:	e7c0      	b.n	80043ae <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 800442c:	210f      	movs	r1, #15
 800442e:	e7be      	b.n	80043ae <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 8004430:	210e      	movs	r1, #14
 8004432:	e7bc      	b.n	80043ae <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 8004434:	210d      	movs	r1, #13
 8004436:	e7ba      	b.n	80043ae <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 8004438:	210c      	movs	r1, #12
 800443a:	e7b8      	b.n	80043ae <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 800443c:	210b      	movs	r1, #11
 800443e:	e7b6      	b.n	80043ae <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 8004440:	210a      	movs	r1, #10
 8004442:	e7b4      	b.n	80043ae <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 8004444:	2109      	movs	r1, #9
 8004446:	e7b2      	b.n	80043ae <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 8004448:	2108      	movs	r1, #8
 800444a:	e7b0      	b.n	80043ae <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x6U;
 800444c:	2106      	movs	r1, #6
 800444e:	e7ae      	b.n	80043ae <USB_SetTurnaroundTime+0x6>
 8004450:	ff275340 	.word	0xff275340
 8004454:	000c34ff 	.word	0x000c34ff
 8004458:	ff1b1e40 	.word	0xff1b1e40
 800445c:	000f423f 	.word	0x000f423f
 8004460:	00124f7f 	.word	0x00124f7f
 8004464:	0013d620 	.word	0x0013d620
 8004468:	fee5b660 	.word	0xfee5b660
 800446c:	0016e35f 	.word	0x0016e35f
 8004470:	feced300 	.word	0xfeced300
 8004474:	001b7740 	.word	0x001b7740
 8004478:	feb35bc0 	.word	0xfeb35bc0
 800447c:	002191c0 	.word	0x002191c0
 8004480:	00387520 	.word	0x00387520
 8004484:	fe5954e0 	.word	0xfe5954e0
 8004488:	00419ce0 	.word	0x00419ce0

0800448c <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800448c:	6883      	ldr	r3, [r0, #8]
 800448e:	f043 0301 	orr.w	r3, r3, #1
 8004492:	6083      	str	r3, [r0, #8]
}
 8004494:	2000      	movs	r0, #0
 8004496:	4770      	bx	lr

08004498 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004498:	6883      	ldr	r3, [r0, #8]
 800449a:	f023 0301 	bic.w	r3, r3, #1
 800449e:	6083      	str	r3, [r0, #8]
}
 80044a0:	2000      	movs	r0, #0
 80044a2:	4770      	bx	lr

080044a4 <USB_SetCurrentMode>:
{
 80044a4:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80044a6:	68c3      	ldr	r3, [r0, #12]
 80044a8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80044ac:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80044ae:	2901      	cmp	r1, #1
 80044b0:	d009      	beq.n	80044c6 <USB_SetCurrentMode+0x22>
  else if (mode == USB_DEVICE_MODE)
 80044b2:	b969      	cbnz	r1, 80044d0 <USB_SetCurrentMode+0x2c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80044b4:	68c3      	ldr	r3, [r0, #12]
 80044b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044ba:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 80044bc:	2032      	movs	r0, #50	; 0x32
 80044be:	f7fd fa31 	bl	8001924 <HAL_Delay>
  return HAL_OK;
 80044c2:	2000      	movs	r0, #0
}
 80044c4:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80044c6:	68c3      	ldr	r3, [r0, #12]
 80044c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80044cc:	60c3      	str	r3, [r0, #12]
 80044ce:	e7f5      	b.n	80044bc <USB_SetCurrentMode+0x18>
    return HAL_ERROR;
 80044d0:	2001      	movs	r0, #1
 80044d2:	e7f7      	b.n	80044c4 <USB_SetCurrentMode+0x20>

080044d4 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80044d4:	0189      	lsls	r1, r1, #6
 80044d6:	f041 0120 	orr.w	r1, r1, #32
 80044da:	6101      	str	r1, [r0, #16]
  uint32_t count = 0U;
 80044dc:	2300      	movs	r3, #0
    if (++count > 200000U)
 80044de:	3301      	adds	r3, #1
 80044e0:	4a05      	ldr	r2, [pc, #20]	; (80044f8 <USB_FlushTxFifo+0x24>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d805      	bhi.n	80044f2 <USB_FlushTxFifo+0x1e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80044e6:	6902      	ldr	r2, [r0, #16]
 80044e8:	f012 0f20 	tst.w	r2, #32
 80044ec:	d1f7      	bne.n	80044de <USB_FlushTxFifo+0xa>
  return HAL_OK;
 80044ee:	2000      	movs	r0, #0
 80044f0:	4770      	bx	lr
      return HAL_TIMEOUT;
 80044f2:	2003      	movs	r0, #3
}
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	00030d40 	.word	0x00030d40

080044fc <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80044fc:	2310      	movs	r3, #16
 80044fe:	6103      	str	r3, [r0, #16]
  uint32_t count = 0;
 8004500:	2300      	movs	r3, #0
    if (++count > 200000U)
 8004502:	3301      	adds	r3, #1
 8004504:	4a05      	ldr	r2, [pc, #20]	; (800451c <USB_FlushRxFifo+0x20>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d805      	bhi.n	8004516 <USB_FlushRxFifo+0x1a>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800450a:	6902      	ldr	r2, [r0, #16]
 800450c:	f012 0f10 	tst.w	r2, #16
 8004510:	d1f7      	bne.n	8004502 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8004512:	2000      	movs	r0, #0
 8004514:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004516:	2003      	movs	r0, #3
}
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	00030d40 	.word	0x00030d40

08004520 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8004520:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8004524:	4319      	orrs	r1, r3
 8004526:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800452a:	2000      	movs	r0, #0
 800452c:	4770      	bx	lr
	...

08004530 <USB_DevInit>:
{
 8004530:	b084      	sub	sp, #16
 8004532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004536:	4604      	mov	r4, r0
 8004538:	a807      	add	r0, sp, #28
 800453a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 800453e:	2300      	movs	r3, #0
 8004540:	e006      	b.n	8004550 <USB_DevInit+0x20>
    USBx->DIEPTXF[i] = 0U;
 8004542:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8004546:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800454a:	2100      	movs	r1, #0
 800454c:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 800454e:	3301      	adds	r3, #1
 8004550:	2b0e      	cmp	r3, #14
 8004552:	d9f6      	bls.n	8004542 <USB_DevInit+0x12>
  if (cfg.vbus_sensing_enable == 0U)
 8004554:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8004556:	bb27      	cbnz	r7, 80045a2 <USB_DevInit+0x72>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004558:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 800455c:	f043 0302 	orr.w	r3, r3, #2
 8004560:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004564:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004566:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800456a:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800456c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800456e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004572:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004574:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004576:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800457a:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 800457c:	2300      	movs	r3, #0
 800457e:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004582:	f504 6500 	add.w	r5, r4, #2048	; 0x800
 8004586:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 800458a:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800458e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004590:	2b01      	cmp	r3, #1
 8004592:	d114      	bne.n	80045be <USB_DevInit+0x8e>
    if (cfg.speed == USBD_HS_SPEED)
 8004594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004596:	b96b      	cbnz	r3, 80045b4 <USB_DevInit+0x84>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004598:	2100      	movs	r1, #0
 800459a:	4620      	mov	r0, r4
 800459c:	f7ff ffc0 	bl	8004520 <USB_SetDevSpeed>
 80045a0:	e011      	b.n	80045c6 <USB_DevInit+0x96>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80045a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80045a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80045a8:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80045aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80045ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045b0:	63a3      	str	r3, [r4, #56]	; 0x38
 80045b2:	e7e3      	b.n	800457c <USB_DevInit+0x4c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80045b4:	2101      	movs	r1, #1
 80045b6:	4620      	mov	r0, r4
 80045b8:	f7ff ffb2 	bl	8004520 <USB_SetDevSpeed>
 80045bc:	e003      	b.n	80045c6 <USB_DevInit+0x96>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80045be:	2103      	movs	r1, #3
 80045c0:	4620      	mov	r0, r4
 80045c2:	f7ff ffad 	bl	8004520 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80045c6:	2110      	movs	r1, #16
 80045c8:	4620      	mov	r0, r4
 80045ca:	f7ff ff83 	bl	80044d4 <USB_FlushTxFifo>
 80045ce:	4680      	mov	r8, r0
 80045d0:	b108      	cbz	r0, 80045d6 <USB_DevInit+0xa6>
    ret = HAL_ERROR;
 80045d2:	f04f 0801 	mov.w	r8, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80045d6:	4620      	mov	r0, r4
 80045d8:	f7ff ff90 	bl	80044fc <USB_FlushRxFifo>
 80045dc:	b108      	cbz	r0, 80045e2 <USB_DevInit+0xb2>
    ret = HAL_ERROR;
 80045de:	f04f 0801 	mov.w	r8, #1
  USBx_DEVICE->DIEPMSK = 0U;
 80045e2:	2300      	movs	r3, #0
 80045e4:	612b      	str	r3, [r5, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80045e6:	616b      	str	r3, [r5, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80045e8:	61eb      	str	r3, [r5, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045ea:	e00a      	b.n	8004602 <USB_DevInit+0xd2>
      if (i == 0U)
 80045ec:	b9c3      	cbnz	r3, 8004620 <USB_DevInit+0xf0>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80045ee:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80045f2:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80045f6:	2200      	movs	r2, #0
 80045f8:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80045fa:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 80045fe:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004600:	3301      	adds	r3, #1
 8004602:	9907      	ldr	r1, [sp, #28]
 8004604:	4299      	cmp	r1, r3
 8004606:	d910      	bls.n	800462a <USB_DevInit+0xfa>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004608:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 800460c:	f502 6110 	add.w	r1, r2, #2304	; 0x900
 8004610:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 8004614:	2800      	cmp	r0, #0
 8004616:	dbe9      	blt.n	80045ec <USB_DevInit+0xbc>
      USBx_INEP(i)->DIEPCTL = 0U;
 8004618:	2000      	movs	r0, #0
 800461a:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 800461e:	e7ea      	b.n	80045f6 <USB_DevInit+0xc6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004620:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004624:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 8004628:	e7e5      	b.n	80045f6 <USB_DevInit+0xc6>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800462a:	2300      	movs	r3, #0
 800462c:	e00a      	b.n	8004644 <USB_DevInit+0x114>
      if (i == 0U)
 800462e:	b1c3      	cbz	r3, 8004662 <USB_DevInit+0x132>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004630:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
 8004634:	f8c2 cb00 	str.w	ip, [r2, #2816]	; 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004638:	2200      	movs	r2, #0
 800463a:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800463c:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 8004640:	6082      	str	r2, [r0, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004642:	3301      	adds	r3, #1
 8004644:	4299      	cmp	r1, r3
 8004646:	d911      	bls.n	800466c <USB_DevInit+0x13c>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004648:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 800464c:	f502 6030 	add.w	r0, r2, #2816	; 0xb00
 8004650:	f8d2 6b00 	ldr.w	r6, [r2, #2816]	; 0xb00
 8004654:	2e00      	cmp	r6, #0
 8004656:	dbea      	blt.n	800462e <USB_DevInit+0xfe>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004658:	f04f 0c00 	mov.w	ip, #0
 800465c:	f8c2 cb00 	str.w	ip, [r2, #2816]	; 0xb00
 8004660:	e7ea      	b.n	8004638 <USB_DevInit+0x108>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004662:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
 8004666:	f8c2 cb00 	str.w	ip, [r2, #2816]	; 0xb00
 800466a:	e7e5      	b.n	8004638 <USB_DevInit+0x108>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800466c:	692b      	ldr	r3, [r5, #16]
 800466e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004672:	612b      	str	r3, [r5, #16]
  USBx->GINTMSK = 0U;
 8004674:	2300      	movs	r3, #0
 8004676:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004678:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 800467c:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 800467e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004680:	b91b      	cbnz	r3, 800468a <USB_DevInit+0x15a>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004682:	69a3      	ldr	r3, [r4, #24]
 8004684:	f043 0310 	orr.w	r3, r3, #16
 8004688:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800468a:	69a2      	ldr	r2, [r4, #24]
 800468c:	4b0b      	ldr	r3, [pc, #44]	; (80046bc <USB_DevInit+0x18c>)
 800468e:	4313      	orrs	r3, r2
 8004690:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8004692:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004694:	b11b      	cbz	r3, 800469e <USB_DevInit+0x16e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004696:	69a3      	ldr	r3, [r4, #24]
 8004698:	f043 0308 	orr.w	r3, r3, #8
 800469c:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800469e:	2f01      	cmp	r7, #1
 80046a0:	d004      	beq.n	80046ac <USB_DevInit+0x17c>
}
 80046a2:	4640      	mov	r0, r8
 80046a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046a8:	b004      	add	sp, #16
 80046aa:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80046ac:	69a3      	ldr	r3, [r4, #24]
 80046ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046b2:	f043 0304 	orr.w	r3, r3, #4
 80046b6:	61a3      	str	r3, [r4, #24]
 80046b8:	e7f3      	b.n	80046a2 <USB_DevInit+0x172>
 80046ba:	bf00      	nop
 80046bc:	803c3800 	.word	0x803c3800

080046c0 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80046c0:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80046c4:	f013 0306 	ands.w	r3, r3, #6
 80046c8:	d007      	beq.n	80046da <USB_GetDevSpeed+0x1a>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d007      	beq.n	80046de <USB_GetDevSpeed+0x1e>
 80046ce:	2b06      	cmp	r3, #6
 80046d0:	d001      	beq.n	80046d6 <USB_GetDevSpeed+0x16>
    speed = 0xFU;
 80046d2:	200f      	movs	r0, #15
}
 80046d4:	4770      	bx	lr
    speed = USBD_FS_SPEED;
 80046d6:	2002      	movs	r0, #2
 80046d8:	4770      	bx	lr
    speed = USBD_HS_SPEED;
 80046da:	2000      	movs	r0, #0
 80046dc:	4770      	bx	lr
    speed = USBD_FS_SPEED;
 80046de:	2002      	movs	r0, #2
 80046e0:	4770      	bx	lr

080046e2 <USB_ActivateEndpoint>:
{
 80046e2:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 80046e4:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 80046e8:	784b      	ldrb	r3, [r1, #1]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d023      	beq.n	8004736 <USB_ActivateEndpoint+0x54>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80046ee:	f500 6e00 	add.w	lr, r0, #2048	; 0x800
 80046f2:	f8d0 381c 	ldr.w	r3, [r0, #2076]	; 0x81c
 80046f6:	f00c 040f 	and.w	r4, ip, #15
 80046fa:	2201      	movs	r2, #1
 80046fc:	40a2      	lsls	r2, r4
 80046fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004702:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004706:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 800470a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800470e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004712:	d10e      	bne.n	8004732 <USB_ActivateEndpoint+0x50>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004714:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8004718:	688a      	ldr	r2, [r1, #8]
 800471a:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800471e:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004720:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 8004724:	4313      	orrs	r3, r2
 8004726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800472a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800472e:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8004732:	2000      	movs	r0, #0
 8004734:	bd10      	pop	{r4, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004736:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 800473a:	f00c 0e0f 	and.w	lr, ip, #15
 800473e:	fa03 f30e 	lsl.w	r3, r3, lr
 8004742:	b29b      	uxth	r3, r3
 8004744:	4313      	orrs	r3, r2
 8004746:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800474a:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 800474e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8004752:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004756:	d1ec      	bne.n	8004732 <USB_ActivateEndpoint+0x50>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004758:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800475c:	688a      	ldr	r2, [r1, #8]
 800475e:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004762:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004764:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004768:	ea42 5c8c 	orr.w	ip, r2, ip, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800476c:	ea43 030c 	orr.w	r3, r3, ip
 8004770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004774:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004778:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800477c:	e7d9      	b.n	8004732 <USB_ActivateEndpoint+0x50>
	...

08004780 <USB_DeactivateEndpoint>:
{
 8004780:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 8004782:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8004784:	784a      	ldrb	r2, [r1, #1]
 8004786:	2a01      	cmp	r2, #1
 8004788:	d026      	beq.n	80047d8 <USB_DeactivateEndpoint+0x58>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800478a:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800478e:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8004792:	2a00      	cmp	r2, #0
 8004794:	db52      	blt.n	800483c <USB_DeactivateEndpoint+0xbc>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004796:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
 800479a:	780a      	ldrb	r2, [r1, #0]
 800479c:	f002 020f 	and.w	r2, r2, #15
 80047a0:	f04f 0c01 	mov.w	ip, #1
 80047a4:	fa0c f202 	lsl.w	r2, ip, r2
 80047a8:	ea24 4202 	bic.w	r2, r4, r2, lsl #16
 80047ac:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80047b0:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 80047b4:	7809      	ldrb	r1, [r1, #0]
 80047b6:	f001 010f 	and.w	r1, r1, #15
 80047ba:	fa0c fc01 	lsl.w	ip, ip, r1
 80047be:	ea22 420c 	bic.w	r2, r2, ip, lsl #16
 80047c2:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80047c6:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 80047ca:	4a23      	ldr	r2, [pc, #140]	; (8004858 <USB_DeactivateEndpoint+0xd8>)
 80047cc:	400a      	ands	r2, r1
 80047ce:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 80047d2:	2000      	movs	r0, #0
 80047d4:	bc30      	pop	{r4, r5}
 80047d6:	4770      	bx	lr
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80047d8:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80047dc:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80047e0:	2a00      	cmp	r2, #0
 80047e2:	db1e      	blt.n	8004822 <USB_DeactivateEndpoint+0xa2>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80047e4:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 80047e8:	780a      	ldrb	r2, [r1, #0]
 80047ea:	f002 020f 	and.w	r2, r2, #15
 80047ee:	2401      	movs	r4, #1
 80047f0:	fa04 f202 	lsl.w	r2, r4, r2
 80047f4:	b292      	uxth	r2, r2
 80047f6:	ea25 0202 	bic.w	r2, r5, r2
 80047fa:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80047fe:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8004802:	7809      	ldrb	r1, [r1, #0]
 8004804:	f001 010f 	and.w	r1, r1, #15
 8004808:	408c      	lsls	r4, r1
 800480a:	b2a4      	uxth	r4, r4
 800480c:	ea22 0404 	bic.w	r4, r2, r4
 8004810:	f8c0 481c 	str.w	r4, [r0, #2076]	; 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004814:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 8004818:	4a10      	ldr	r2, [pc, #64]	; (800485c <USB_DeactivateEndpoint+0xdc>)
 800481a:	400a      	ands	r2, r1
 800481c:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8004820:	e7d7      	b.n	80047d2 <USB_DeactivateEndpoint+0x52>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004822:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8004826:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800482a:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800482e:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8004832:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004836:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 800483a:	e7d3      	b.n	80047e4 <USB_DeactivateEndpoint+0x64>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800483c:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8004840:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8004844:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004848:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800484c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004850:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8004854:	e79f      	b.n	8004796 <USB_DeactivateEndpoint+0x16>
 8004856:	bf00      	nop
 8004858:	eff37800 	.word	0xeff37800
 800485c:	ec337800 	.word	0xec337800

08004860 <USB_EP0StartXfer>:
{
 8004860:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 8004862:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8004864:	784c      	ldrb	r4, [r1, #1]
 8004866:	2c01      	cmp	r4, #1
 8004868:	d027      	beq.n	80048ba <USB_EP0StartXfer+0x5a>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800486a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800486e:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8004872:	691c      	ldr	r4, [r3, #16]
 8004874:	0ce4      	lsrs	r4, r4, #19
 8004876:	04e4      	lsls	r4, r4, #19
 8004878:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800487a:	691c      	ldr	r4, [r3, #16]
 800487c:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8004880:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8004884:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len > 0U)
 8004886:	694c      	ldr	r4, [r1, #20]
 8004888:	b10c      	cbz	r4, 800488e <USB_EP0StartXfer+0x2e>
      ep->xfer_len = ep->maxpacket;
 800488a:	688c      	ldr	r4, [r1, #8]
 800488c:	614c      	str	r4, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800488e:	691c      	ldr	r4, [r3, #16]
 8004890:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8004894:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004896:	691c      	ldr	r4, [r3, #16]
 8004898:	688d      	ldr	r5, [r1, #8]
 800489a:	f3c5 0c12 	ubfx	ip, r5, #0, #19
 800489e:	ea44 040c 	orr.w	r4, r4, ip
 80048a2:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 80048a4:	2a01      	cmp	r2, #1
 80048a6:	d066      	beq.n	8004976 <USB_EP0StartXfer+0x116>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80048a8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80048ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80048b0:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 80048b4:	2000      	movs	r0, #0
 80048b6:	bc70      	pop	{r4, r5, r6}
 80048b8:	4770      	bx	lr
    if (ep->xfer_len == 0U)
 80048ba:	694c      	ldr	r4, [r1, #20]
 80048bc:	bb6c      	cbnz	r4, 800491a <USB_EP0StartXfer+0xba>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80048be:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 80048c2:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 80048c6:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 80048ca:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 80048ce:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80048d2:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 80048d6:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 80048da:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80048de:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 80048e2:	0ced      	lsrs	r5, r5, #19
 80048e4:	04ed      	lsls	r5, r5, #19
 80048e6:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
    if (dma == 1U)
 80048ea:	2a01      	cmp	r2, #1
 80048ec:	d034      	beq.n	8004958 <USB_EP0StartXfer+0xf8>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80048ee:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80048f2:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80048f6:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80048fa:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 80048fe:	694b      	ldr	r3, [r1, #20]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d0d7      	beq.n	80048b4 <USB_EP0StartXfer+0x54>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004904:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8004908:	780a      	ldrb	r2, [r1, #0]
 800490a:	f002 010f 	and.w	r1, r2, #15
 800490e:	2201      	movs	r2, #1
 8004910:	408a      	lsls	r2, r1
 8004912:	4313      	orrs	r3, r2
 8004914:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 8004918:	e7cc      	b.n	80048b4 <USB_EP0StartXfer+0x54>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800491a:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 800491e:	f504 6410 	add.w	r4, r4, #2304	; 0x900
 8004922:	6925      	ldr	r5, [r4, #16]
 8004924:	0ced      	lsrs	r5, r5, #19
 8004926:	04ed      	lsls	r5, r5, #19
 8004928:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800492a:	6925      	ldr	r5, [r4, #16]
 800492c:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8004930:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8004934:	6125      	str	r5, [r4, #16]
      if (ep->xfer_len > ep->maxpacket)
 8004936:	688d      	ldr	r5, [r1, #8]
 8004938:	694e      	ldr	r6, [r1, #20]
 800493a:	42ae      	cmp	r6, r5
 800493c:	d900      	bls.n	8004940 <USB_EP0StartXfer+0xe0>
        ep->xfer_len = ep->maxpacket;
 800493e:	614d      	str	r5, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004940:	6925      	ldr	r5, [r4, #16]
 8004942:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8004946:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004948:	6925      	ldr	r5, [r4, #16]
 800494a:	694e      	ldr	r6, [r1, #20]
 800494c:	f3c6 0c12 	ubfx	ip, r6, #0, #19
 8004950:	ea45 050c 	orr.w	r5, r5, ip
 8004954:	6125      	str	r5, [r4, #16]
 8004956:	e7c8      	b.n	80048ea <USB_EP0StartXfer+0x8a>
      if ((uint32_t)ep->dma_addr != 0U)
 8004958:	690a      	ldr	r2, [r1, #16]
 800495a:	b11a      	cbz	r2, 8004964 <USB_EP0StartXfer+0x104>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800495c:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 8004960:	f8c1 2914 	str.w	r2, [r1, #2324]	; 0x914
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004964:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8004968:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800496c:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8004970:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
 8004974:	e79e      	b.n	80048b4 <USB_EP0StartXfer+0x54>
      if ((uint32_t)ep->xfer_buff != 0U)
 8004976:	68ca      	ldr	r2, [r1, #12]
 8004978:	2a00      	cmp	r2, #0
 800497a:	d095      	beq.n	80048a8 <USB_EP0StartXfer+0x48>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800497c:	615a      	str	r2, [r3, #20]
 800497e:	e793      	b.n	80048a8 <USB_EP0StartXfer+0x48>

08004980 <USB_WritePacket>:
{
 8004980:	b510      	push	{r4, lr}
 8004982:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 8004986:	b984      	cbnz	r4, 80049aa <USB_WritePacket+0x2a>
    count32b = ((uint32_t)len + 3U) / 4U;
 8004988:	3303      	adds	r3, #3
 800498a:	ea4f 0e93 	mov.w	lr, r3, lsr #2
    for (i = 0U; i < count32b; i++)
 800498e:	f04f 0c00 	mov.w	ip, #0
 8004992:	e008      	b.n	80049a6 <USB_WritePacket+0x26>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004994:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 8004998:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800499c:	f851 4b04 	ldr.w	r4, [r1], #4
 80049a0:	601c      	str	r4, [r3, #0]
    for (i = 0U; i < count32b; i++)
 80049a2:	f10c 0c01 	add.w	ip, ip, #1
 80049a6:	45f4      	cmp	ip, lr
 80049a8:	d3f4      	bcc.n	8004994 <USB_WritePacket+0x14>
}
 80049aa:	2000      	movs	r0, #0
 80049ac:	bd10      	pop	{r4, pc}
	...

080049b0 <USB_EPStartXfer>:
{
 80049b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049b2:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 80049b4:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80049b6:	784c      	ldrb	r4, [r1, #1]
 80049b8:	2c01      	cmp	r4, #1
 80049ba:	d033      	beq.n	8004a24 <USB_EPStartXfer+0x74>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80049bc:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80049c0:	f503 6c30 	add.w	ip, r3, #2816	; 0xb00
 80049c4:	f8dc 4010 	ldr.w	r4, [ip, #16]
 80049c8:	0ce4      	lsrs	r4, r4, #19
 80049ca:	04e4      	lsls	r4, r4, #19
 80049cc:	f8cc 4010 	str.w	r4, [ip, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80049d0:	f8dc 4010 	ldr.w	r4, [ip, #16]
 80049d4:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 80049d8:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 80049dc:	f8cc 4010 	str.w	r4, [ip, #16]
    if (ep->xfer_len == 0U)
 80049e0:	694c      	ldr	r4, [r1, #20]
 80049e2:	2c00      	cmp	r4, #0
 80049e4:	f040 80ca 	bne.w	8004b7c <USB_EPStartXfer+0x1cc>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80049e8:	f8dc 4010 	ldr.w	r4, [ip, #16]
 80049ec:	688d      	ldr	r5, [r1, #8]
 80049ee:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80049f2:	432c      	orrs	r4, r5
 80049f4:	f8cc 4010 	str.w	r4, [ip, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80049f8:	f8dc 4010 	ldr.w	r4, [ip, #16]
 80049fc:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8004a00:	f8cc 4010 	str.w	r4, [ip, #16]
    if (dma == 1U)
 8004a04:	2a01      	cmp	r2, #1
 8004a06:	f000 80d3 	beq.w	8004bb0 <USB_EPStartXfer+0x200>
    if (ep->type == EP_TYPE_ISOC)
 8004a0a:	78ca      	ldrb	r2, [r1, #3]
 8004a0c:	2a01      	cmp	r2, #1
 8004a0e:	f000 80d6 	beq.w	8004bbe <USB_EPStartXfer+0x20e>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004a12:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8004a16:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8004a1a:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 8004a1e:	2000      	movs	r0, #0
 8004a20:	b003      	add	sp, #12
 8004a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 8004a24:	694c      	ldr	r4, [r1, #20]
 8004a26:	bb84      	cbnz	r4, 8004a8a <USB_EPStartXfer+0xda>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a28:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8004a2c:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8004a30:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8004a34:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8004a38:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a3c:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8004a40:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8004a44:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a48:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8004a4c:	0ced      	lsrs	r5, r5, #19
 8004a4e:	04ed      	lsls	r5, r5, #19
 8004a50:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
    if (dma == 1U)
 8004a54:	2a01      	cmp	r2, #1
 8004a56:	d04f      	beq.n	8004af8 <USB_EPStartXfer+0x148>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a58:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8004a5c:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8004a60:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8004a64:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8004a68:	78cc      	ldrb	r4, [r1, #3]
 8004a6a:	2c01      	cmp	r4, #1
 8004a6c:	d06d      	beq.n	8004b4a <USB_EPStartXfer+0x19a>
        if (ep->xfer_len > 0U)
 8004a6e:	694b      	ldr	r3, [r1, #20]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d0d4      	beq.n	8004a1e <USB_EPStartXfer+0x6e>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004a74:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8004a78:	780a      	ldrb	r2, [r1, #0]
 8004a7a:	f002 010f 	and.w	r1, r2, #15
 8004a7e:	2201      	movs	r2, #1
 8004a80:	408a      	lsls	r2, r1
 8004a82:	4313      	orrs	r3, r2
 8004a84:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 8004a88:	e7c9      	b.n	8004a1e <USB_EPStartXfer+0x6e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a8a:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8004a8e:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8004a92:	0ced      	lsrs	r5, r5, #19
 8004a94:	04ed      	lsls	r5, r5, #19
 8004a96:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a9a:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8004a9e:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8004aa2:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8004aa6:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004aaa:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8004aae:	688e      	ldr	r6, [r1, #8]
 8004ab0:	694f      	ldr	r7, [r1, #20]
 8004ab2:	eb07 0c06 	add.w	ip, r7, r6
 8004ab6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004aba:	fbbc fcf6 	udiv	ip, ip, r6
 8004abe:	4e49      	ldr	r6, [pc, #292]	; (8004be4 <USB_EPStartXfer+0x234>)
 8004ac0:	ea06 4ccc 	and.w	ip, r6, ip, lsl #19
 8004ac4:	ea45 050c 	orr.w	r5, r5, ip
 8004ac8:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004acc:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8004ad0:	694e      	ldr	r6, [r1, #20]
 8004ad2:	f3c6 0612 	ubfx	r6, r6, #0, #19
 8004ad6:	4335      	orrs	r5, r6
 8004ad8:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004adc:	f504 6410 	add.w	r4, r4, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 8004ae0:	78cd      	ldrb	r5, [r1, #3]
 8004ae2:	2d01      	cmp	r5, #1
 8004ae4:	d1b6      	bne.n	8004a54 <USB_EPStartXfer+0xa4>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004ae6:	6925      	ldr	r5, [r4, #16]
 8004ae8:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 8004aec:	6125      	str	r5, [r4, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004aee:	6925      	ldr	r5, [r4, #16]
 8004af0:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004af4:	6125      	str	r5, [r4, #16]
 8004af6:	e7ad      	b.n	8004a54 <USB_EPStartXfer+0xa4>
      if ((uint32_t)ep->dma_addr != 0U)
 8004af8:	690a      	ldr	r2, [r1, #16]
 8004afa:	b11a      	cbz	r2, 8004b04 <USB_EPStartXfer+0x154>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004afc:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8004b00:	f8c4 2914 	str.w	r2, [r4, #2324]	; 0x914
      if (ep->type == EP_TYPE_ISOC)
 8004b04:	78ca      	ldrb	r2, [r1, #3]
 8004b06:	2a01      	cmp	r2, #1
 8004b08:	d008      	beq.n	8004b1c <USB_EPStartXfer+0x16c>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b0a:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8004b0e:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8004b12:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8004b16:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8004b1a:	e780      	b.n	8004a1e <USB_EPStartXfer+0x6e>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b1c:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8004b20:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004b24:	d108      	bne.n	8004b38 <USB_EPStartXfer+0x188>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004b26:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 8004b2a:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 8004b2e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004b32:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900
 8004b36:	e7e8      	b.n	8004b0a <USB_EPStartXfer+0x15a>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004b38:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 8004b3c:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 8004b40:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004b44:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900
 8004b48:	e7df      	b.n	8004b0a <USB_EPStartXfer+0x15a>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b4a:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 8004b4e:	f414 7f80 	tst.w	r4, #256	; 0x100
 8004b52:	d10c      	bne.n	8004b6e <USB_EPStartXfer+0x1be>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004b54:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8004b58:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 8004b5c:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004b60:	9200      	str	r2, [sp, #0]
 8004b62:	8a8b      	ldrh	r3, [r1, #20]
 8004b64:	780a      	ldrb	r2, [r1, #0]
 8004b66:	68c9      	ldr	r1, [r1, #12]
 8004b68:	f7ff ff0a 	bl	8004980 <USB_WritePacket>
 8004b6c:	e757      	b.n	8004a1e <USB_EPStartXfer+0x6e>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004b6e:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8004b72:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8004b76:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
 8004b7a:	e7f1      	b.n	8004b60 <USB_EPStartXfer+0x1b0>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004b7c:	688d      	ldr	r5, [r1, #8]
 8004b7e:	442c      	add	r4, r5
 8004b80:	3c01      	subs	r4, #1
 8004b82:	fbb4 f4f5 	udiv	r4, r4, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004b86:	f8dc 5010 	ldr.w	r5, [ip, #16]
 8004b8a:	fa1f fe84 	uxth.w	lr, r4
 8004b8e:	4e15      	ldr	r6, [pc, #84]	; (8004be4 <USB_EPStartXfer+0x234>)
 8004b90:	ea06 44c4 	and.w	r4, r6, r4, lsl #19
 8004b94:	4325      	orrs	r5, r4
 8004b96:	f8cc 5010 	str.w	r5, [ip, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004b9a:	f8dc 5010 	ldr.w	r5, [ip, #16]
 8004b9e:	688c      	ldr	r4, [r1, #8]
 8004ba0:	fb0e f404 	mul.w	r4, lr, r4
 8004ba4:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8004ba8:	432c      	orrs	r4, r5
 8004baa:	f8cc 4010 	str.w	r4, [ip, #16]
 8004bae:	e729      	b.n	8004a04 <USB_EPStartXfer+0x54>
      if ((uint32_t)ep->xfer_buff != 0U)
 8004bb0:	68ca      	ldr	r2, [r1, #12]
 8004bb2:	2a00      	cmp	r2, #0
 8004bb4:	f43f af29 	beq.w	8004a0a <USB_EPStartXfer+0x5a>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004bb8:	f8cc 2014 	str.w	r2, [ip, #20]
 8004bbc:	e725      	b.n	8004a0a <USB_EPStartXfer+0x5a>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004bbe:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8004bc2:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004bc6:	d106      	bne.n	8004bd6 <USB_EPStartXfer+0x226>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004bc8:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8004bcc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004bd0:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8004bd4:	e71d      	b.n	8004a12 <USB_EPStartXfer+0x62>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004bd6:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8004bda:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004bde:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8004be2:	e716      	b.n	8004a12 <USB_EPStartXfer+0x62>
 8004be4:	1ff80000 	.word	0x1ff80000

08004be8 <USB_ReadPacket>:
{
 8004be8:	4684      	mov	ip, r0
 8004bea:	4608      	mov	r0, r1
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004bec:	1cd1      	adds	r1, r2, #3
 8004bee:	0889      	lsrs	r1, r1, #2
  for (i = 0U; i < count32b; i++)
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	e005      	b.n	8004c00 <USB_ReadPacket+0x18>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004bf4:	f50c 5280 	add.w	r2, ip, #4096	; 0x1000
 8004bf8:	6812      	ldr	r2, [r2, #0]
 8004bfa:	f840 2b04 	str.w	r2, [r0], #4
  for (i = 0U; i < count32b; i++)
 8004bfe:	3301      	adds	r3, #1
 8004c00:	428b      	cmp	r3, r1
 8004c02:	d3f7      	bcc.n	8004bf4 <USB_ReadPacket+0xc>
}
 8004c04:	4770      	bx	lr

08004c06 <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8004c06:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8004c08:	784a      	ldrb	r2, [r1, #1]
 8004c0a:	2a01      	cmp	r2, #1
 8004c0c:	d014      	beq.n	8004c38 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004c0e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8004c12:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8004c16:	2a00      	cmp	r2, #0
 8004c18:	db06      	blt.n	8004c28 <USB_EPSetStall+0x22>
 8004c1a:	b12b      	cbz	r3, 8004c28 <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004c1c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8004c20:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004c24:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004c28:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8004c2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c30:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8004c34:	2000      	movs	r0, #0
 8004c36:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004c38:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8004c3c:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8004c40:	2a00      	cmp	r2, #0
 8004c42:	db06      	blt.n	8004c52 <USB_EPSetStall+0x4c>
 8004c44:	b12b      	cbz	r3, 8004c52 <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004c46:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8004c4a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004c4e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004c52:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8004c56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c5a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8004c5e:	e7e9      	b.n	8004c34 <USB_EPSetStall+0x2e>

08004c60 <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8004c60:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8004c62:	784a      	ldrb	r2, [r1, #1]
 8004c64:	2a01      	cmp	r2, #1
 8004c66:	d00e      	beq.n	8004c86 <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004c68:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8004c6c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8004c70:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c74:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004c78:	78cb      	ldrb	r3, [r1, #3]
 8004c7a:	3b02      	subs	r3, #2
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d915      	bls.n	8004cae <USB_EPClearStall+0x4e>
}
 8004c82:	2000      	movs	r0, #0
 8004c84:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004c86:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8004c8a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8004c8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c92:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004c96:	78cb      	ldrb	r3, [r1, #3]
 8004c98:	3b02      	subs	r3, #2
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d8f0      	bhi.n	8004c82 <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004ca0:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8004ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ca8:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8004cac:	e7e9      	b.n	8004c82 <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004cae:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8004cb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cb6:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8004cba:	e7e2      	b.n	8004c82 <USB_EPClearStall+0x22>

08004cbc <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004cbc:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8004cc0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004cc4:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004cc8:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8004ccc:	0109      	lsls	r1, r1, #4
 8004cce:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8004cd2:	4319      	orrs	r1, r3
 8004cd4:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8004cd8:	2000      	movs	r0, #0
 8004cda:	4770      	bx	lr

08004cdc <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004cdc:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8004ce0:	f023 0303 	bic.w	r3, r3, #3
 8004ce4:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004ce8:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8004cec:	f023 0302 	bic.w	r3, r3, #2
 8004cf0:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8004cf4:	2000      	movs	r0, #0
 8004cf6:	4770      	bx	lr

08004cf8 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004cf8:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8004cfc:	f023 0303 	bic.w	r3, r3, #3
 8004d00:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d04:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8004d08:	f043 0302 	orr.w	r3, r3, #2
 8004d0c:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8004d10:	2000      	movs	r0, #0
 8004d12:	4770      	bx	lr

08004d14 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8004d14:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8004d16:	6980      	ldr	r0, [r0, #24]
}
 8004d18:	4010      	ands	r0, r2
 8004d1a:	4770      	bx	lr

08004d1c <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8004d1c:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8004d20:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004d24:	69c0      	ldr	r0, [r0, #28]
 8004d26:	4018      	ands	r0, r3
}
 8004d28:	0c00      	lsrs	r0, r0, #16
 8004d2a:	4770      	bx	lr

08004d2c <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8004d2c:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8004d30:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004d34:	69c0      	ldr	r0, [r0, #28]
 8004d36:	4018      	ands	r0, r3
}
 8004d38:	b280      	uxth	r0, r0
 8004d3a:	4770      	bx	lr

08004d3c <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004d3c:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8004d40:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004d44:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8004d48:	6940      	ldr	r0, [r0, #20]
}
 8004d4a:	4010      	ands	r0, r2
 8004d4c:	4770      	bx	lr

08004d4e <USB_ReadDevInEPInterrupt>:
{
 8004d4e:	b410      	push	{r4}
  msk = USBx_DEVICE->DIEPMSK;
 8004d50:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004d54:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004d58:	f001 020f 	and.w	r2, r1, #15
 8004d5c:	40d3      	lsrs	r3, r2
 8004d5e:	01db      	lsls	r3, r3, #7
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	4323      	orrs	r3, r4
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004d64:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8004d68:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8004d6c:	6880      	ldr	r0, [r0, #8]
}
 8004d6e:	4018      	ands	r0, r3
 8004d70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d74:	4770      	bx	lr

08004d76 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8004d76:	6940      	ldr	r0, [r0, #20]
}
 8004d78:	f000 0001 	and.w	r0, r0, #1
 8004d7c:	4770      	bx	lr

08004d7e <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004d7e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8004d82:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004d86:	f023 0307 	bic.w	r3, r3, #7
 8004d8a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004d8e:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8004d92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d96:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8004d9a:	2000      	movs	r0, #0
 8004d9c:	4770      	bx	lr
	...

08004da0 <USB_EP0_OutStart>:
{
 8004da0:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004da2:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004da4:	4b15      	ldr	r3, [pc, #84]	; (8004dfc <USB_EP0_OutStart+0x5c>)
 8004da6:	429c      	cmp	r4, r3
 8004da8:	d903      	bls.n	8004db2 <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004daa:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	db16      	blt.n	8004de0 <USB_EP0_OutStart+0x40>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004db2:	2400      	movs	r4, #0
 8004db4:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004db8:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8004dbc:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8004dc0:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004dc4:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8004dc8:	f044 0418 	orr.w	r4, r4, #24
 8004dcc:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004dd0:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8004dd4:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 8004dd8:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  if (dma == 1U)
 8004ddc:	2901      	cmp	r1, #1
 8004dde:	d003      	beq.n	8004de8 <USB_EP0_OutStart+0x48>
}
 8004de0:	2000      	movs	r0, #0
 8004de2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004de6:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004de8:	f8c0 2b14 	str.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004dec:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8004df0:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004df4:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8004df8:	e7f2      	b.n	8004de0 <USB_EP0_OutStart+0x40>
 8004dfa:	bf00      	nop
 8004dfc:	4f54300a 	.word	0x4f54300a

08004e00 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004e00:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004e02:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004e06:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8004e0a:	b15b      	cbz	r3, 8004e24 <USBD_CDC_EP0_RxReady+0x24>
 8004e0c:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8004e10:	28ff      	cmp	r0, #255	; 0xff
 8004e12:	d007      	beq.n	8004e24 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8004e1a:	4621      	mov	r1, r4
 8004e1c:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8004e1e:	23ff      	movs	r3, #255	; 0xff
 8004e20:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
}
 8004e24:	2000      	movs	r0, #0
 8004e26:	bd10      	pop	{r4, pc}

08004e28 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8004e28:	2343      	movs	r3, #67	; 0x43
 8004e2a:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 8004e2c:	4800      	ldr	r0, [pc, #0]	; (8004e30 <USBD_CDC_GetFSCfgDesc+0x8>)
 8004e2e:	4770      	bx	lr
 8004e30:	200000b4 	.word	0x200000b4

08004e34 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8004e34:	2343      	movs	r3, #67	; 0x43
 8004e36:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 8004e38:	4800      	ldr	r0, [pc, #0]	; (8004e3c <USBD_CDC_GetHSCfgDesc+0x8>)
 8004e3a:	4770      	bx	lr
 8004e3c:	200000f8 	.word	0x200000f8

08004e40 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004e40:	2343      	movs	r3, #67	; 0x43
 8004e42:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 8004e44:	4800      	ldr	r0, [pc, #0]	; (8004e48 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8004e46:	4770      	bx	lr
 8004e48:	20000148 	.word	0x20000148

08004e4c <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004e4c:	230a      	movs	r3, #10
 8004e4e:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 8004e50:	4800      	ldr	r0, [pc, #0]	; (8004e54 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8004e52:	4770      	bx	lr
 8004e54:	2000013c 	.word	0x2000013c

08004e58 <USBD_CDC_DataOut>:
{
 8004e58:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004e5a:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 8004e5e:	b175      	cbz	r5, 8004e7e <USBD_CDC_DataOut+0x26>
 8004e60:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004e62:	f001 f898 	bl	8005f96 <USBD_LL_GetRxDataSize>
 8004e66:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004e6a:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8004e74:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8004e78:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8004e7a:	2000      	movs	r0, #0
}
 8004e7c:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8004e7e:	2003      	movs	r0, #3
 8004e80:	e7fc      	b.n	8004e7c <USBD_CDC_DataOut+0x24>

08004e82 <USBD_CDC_DataIn>:
{
 8004e82:	b538      	push	{r3, r4, r5, lr}
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004e84:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
  if (pdev->pClassData == NULL)
 8004e88:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8004e8c:	b34b      	cbz	r3, 8004ee2 <USBD_CDC_DataIn+0x60>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004e8e:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8004e92:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004e96:	6992      	ldr	r2, [r2, #24]
 8004e98:	b14a      	cbz	r2, 8004eae <USBD_CDC_DataIn+0x2c>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004e9a:	ebc1 05c1 	rsb	r5, r1, r1, lsl #3
 8004e9e:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8004ea2:	6c64      	ldr	r4, [r4, #68]	; 0x44
 8004ea4:	fbb2 f5f4 	udiv	r5, r2, r4
 8004ea8:	fb04 2215 	mls	r2, r4, r5, r2
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004eac:	b16a      	cbz	r2, 8004eca <USBD_CDC_DataIn+0x48>
    hcdc->TxState = 0U;
 8004eae:	2400      	movs	r4, #0
 8004eb0:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004eb4:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 8004eb8:	6915      	ldr	r5, [r2, #16]
 8004eba:	460a      	mov	r2, r1
 8004ebc:	f503 7104 	add.w	r1, r3, #528	; 0x210
 8004ec0:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 8004ec4:	47a8      	blx	r5
  return (uint8_t)USBD_OK;
 8004ec6:	4620      	mov	r0, r4
}
 8004ec8:	bd38      	pop	{r3, r4, r5, pc}
    pdev->ep_in[epnum].total_length = 0U;
 8004eca:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8004ece:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004ed2:	2400      	movs	r4, #0
 8004ed4:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004ed6:	4623      	mov	r3, r4
 8004ed8:	4622      	mov	r2, r4
 8004eda:	f001 f89f 	bl	800601c <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8004ede:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004ee0:	e7f2      	b.n	8004ec8 <USBD_CDC_DataIn+0x46>
    return (uint8_t)USBD_FAIL;
 8004ee2:	2003      	movs	r0, #3
 8004ee4:	e7f0      	b.n	8004ec8 <USBD_CDC_DataIn+0x46>

08004ee6 <USBD_CDC_Setup>:
{
 8004ee6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ee8:	b083      	sub	sp, #12
 8004eea:	4606      	mov	r6, r0
 8004eec:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004eee:	f8d0 72bc 	ldr.w	r7, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 8004ef8:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004efc:	780b      	ldrb	r3, [r1, #0]
 8004efe:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 8004f02:	d027      	beq.n	8004f54 <USBD_CDC_Setup+0x6e>
 8004f04:	2d20      	cmp	r5, #32
 8004f06:	d158      	bne.n	8004fba <USBD_CDC_Setup+0xd4>
    if (req->wLength != 0U)
 8004f08:	88ca      	ldrh	r2, [r1, #6]
 8004f0a:	b1da      	cbz	r2, 8004f44 <USBD_CDC_Setup+0x5e>
      if ((req->bmRequest & 0x80U) != 0U)
 8004f0c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004f10:	d00c      	beq.n	8004f2c <USBD_CDC_Setup+0x46>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004f12:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	4639      	mov	r1, r7
 8004f1a:	7860      	ldrb	r0, [r4, #1]
 8004f1c:	4798      	blx	r3
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004f1e:	88e2      	ldrh	r2, [r4, #6]
 8004f20:	4639      	mov	r1, r7
 8004f22:	4630      	mov	r0, r6
 8004f24:	f000 fdcb 	bl	8005abe <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8004f28:	2500      	movs	r5, #0
 8004f2a:	e049      	b.n	8004fc0 <USBD_CDC_Setup+0xda>
        hcdc->CmdOpCode = req->bRequest;
 8004f2c:	784b      	ldrb	r3, [r1, #1]
 8004f2e:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8004f32:	798b      	ldrb	r3, [r1, #6]
 8004f34:	f887 3201 	strb.w	r3, [r7, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004f38:	88ca      	ldrh	r2, [r1, #6]
 8004f3a:	4639      	mov	r1, r7
 8004f3c:	f000 fdd4 	bl	8005ae8 <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 8004f40:	2500      	movs	r5, #0
 8004f42:	e03d      	b.n	8004fc0 <USBD_CDC_Setup+0xda>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004f44:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	7848      	ldrb	r0, [r1, #1]
 8004f4e:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 8004f50:	2500      	movs	r5, #0
 8004f52:	e035      	b.n	8004fc0 <USBD_CDC_Setup+0xda>
    switch (req->bRequest)
 8004f54:	784f      	ldrb	r7, [r1, #1]
 8004f56:	2f0b      	cmp	r7, #11
 8004f58:	d82b      	bhi.n	8004fb2 <USBD_CDC_Setup+0xcc>
 8004f5a:	e8df f007 	tbb	[pc, r7]
 8004f5e:	3106      	.short	0x3106
 8004f60:	2a2a2a2a 	.word	0x2a2a2a2a
 8004f64:	2a2a2a2a 	.word	0x2a2a2a2a
 8004f68:	2214      	.short	0x2214
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f6a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004f6e:	2b03      	cmp	r3, #3
 8004f70:	d003      	beq.n	8004f7a <USBD_CDC_Setup+0x94>
        USBD_CtlError(pdev, req);
 8004f72:	f000 fa83 	bl	800547c <USBD_CtlError>
        ret = USBD_FAIL;
 8004f76:	2503      	movs	r5, #3
 8004f78:	e022      	b.n	8004fc0 <USBD_CDC_Setup+0xda>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	a901      	add	r1, sp, #4
 8004f7e:	f000 fd9e 	bl	8005abe <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8004f82:	463d      	mov	r5, r7
 8004f84:	e01c      	b.n	8004fc0 <USBD_CDC_Setup+0xda>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f86:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004f8a:	2b03      	cmp	r3, #3
 8004f8c:	d003      	beq.n	8004f96 <USBD_CDC_Setup+0xb0>
        USBD_CtlError(pdev, req);
 8004f8e:	f000 fa75 	bl	800547c <USBD_CtlError>
        ret = USBD_FAIL;
 8004f92:	2503      	movs	r5, #3
 8004f94:	e014      	b.n	8004fc0 <USBD_CDC_Setup+0xda>
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004f96:	2201      	movs	r2, #1
 8004f98:	f10d 0107 	add.w	r1, sp, #7
 8004f9c:	f000 fd8f 	bl	8005abe <USBD_CtlSendData>
 8004fa0:	e00e      	b.n	8004fc0 <USBD_CDC_Setup+0xda>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004fa2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004fa6:	2b03      	cmp	r3, #3
 8004fa8:	d00a      	beq.n	8004fc0 <USBD_CDC_Setup+0xda>
        USBD_CtlError(pdev, req);
 8004faa:	f000 fa67 	bl	800547c <USBD_CtlError>
        ret = USBD_FAIL;
 8004fae:	2503      	movs	r5, #3
 8004fb0:	e006      	b.n	8004fc0 <USBD_CDC_Setup+0xda>
      USBD_CtlError(pdev, req);
 8004fb2:	f000 fa63 	bl	800547c <USBD_CtlError>
      ret = USBD_FAIL;
 8004fb6:	2503      	movs	r5, #3
      break;
 8004fb8:	e002      	b.n	8004fc0 <USBD_CDC_Setup+0xda>
    USBD_CtlError(pdev, req);
 8004fba:	f000 fa5f 	bl	800547c <USBD_CtlError>
    ret = USBD_FAIL;
 8004fbe:	2503      	movs	r5, #3
}
 8004fc0:	4628      	mov	r0, r5
 8004fc2:	b003      	add	sp, #12
 8004fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004fc6 <USBD_CDC_DeInit>:
{
 8004fc6:	b538      	push	{r3, r4, r5, lr}
 8004fc8:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004fca:	2181      	movs	r1, #129	; 0x81
 8004fcc:	f001 f806 	bl	8005fdc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004fd0:	2500      	movs	r5, #0
 8004fd2:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004fd4:	2101      	movs	r1, #1
 8004fd6:	4620      	mov	r0, r4
 8004fd8:	f001 f800 	bl	8005fdc <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004fdc:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004fe0:	2182      	movs	r1, #130	; 0x82
 8004fe2:	4620      	mov	r0, r4
 8004fe4:	f000 fffa 	bl	8005fdc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004fe8:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004fec:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
  if (pdev->pClassData != NULL)
 8004ff0:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8004ff4:	b14b      	cbz	r3, 800500a <USBD_CDC_DeInit+0x44>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004ff6:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004ffe:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 8005002:	f001 f84d 	bl	80060a0 <free>
    pdev->pClassData = NULL;
 8005006:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 800500a:	2000      	movs	r0, #0
 800500c:	bd38      	pop	{r3, r4, r5, pc}

0800500e <USBD_CDC_Init>:
{
 800500e:	b570      	push	{r4, r5, r6, lr}
 8005010:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005012:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005016:	f001 f83b 	bl	8006090 <malloc>
  if (hcdc == NULL)
 800501a:	b3b8      	cbz	r0, 800508c <USBD_CDC_Init+0x7e>
 800501c:	4606      	mov	r6, r0
  pdev->pClassData = (void *)hcdc;
 800501e:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005022:	7c23      	ldrb	r3, [r4, #16]
 8005024:	bbbb      	cbnz	r3, 8005096 <USBD_CDC_Init+0x88>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005026:	f44f 7300 	mov.w	r3, #512	; 0x200
 800502a:	2202      	movs	r2, #2
 800502c:	2181      	movs	r1, #129	; 0x81
 800502e:	4620      	mov	r0, r4
 8005030:	f000 ffc9 	bl	8005fc6 <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005034:	2501      	movs	r5, #1
 8005036:	8725      	strh	r5, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005038:	f44f 7300 	mov.w	r3, #512	; 0x200
 800503c:	2202      	movs	r2, #2
 800503e:	4629      	mov	r1, r5
 8005040:	4620      	mov	r0, r4
 8005042:	f000 ffc0 	bl	8005fc6 <USBD_LL_OpenEP>
      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005046:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800504a:	2310      	movs	r3, #16
 800504c:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005050:	2308      	movs	r3, #8
 8005052:	2203      	movs	r2, #3
 8005054:	2182      	movs	r1, #130	; 0x82
 8005056:	4620      	mov	r0, r4
 8005058:	f000 ffb5 	bl	8005fc6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800505c:	2301      	movs	r3, #1
 800505e:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005062:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4798      	blx	r3
  hcdc->TxState = 0U;
 800506a:	2300      	movs	r3, #0
 800506c:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
  hcdc->RxState = 0U;
 8005070:	f8c6 3218 	str.w	r3, [r6, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005074:	7c25      	ldrb	r5, [r4, #16]
 8005076:	bb15      	cbnz	r5, 80050be <USBD_CDC_Init+0xb0>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005078:	f44f 7300 	mov.w	r3, #512	; 0x200
 800507c:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8005080:	2101      	movs	r1, #1
 8005082:	4620      	mov	r0, r4
 8005084:	f000 ffd2 	bl	800602c <USBD_LL_PrepareReceive>
}
 8005088:	4628      	mov	r0, r5
 800508a:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassData = NULL;
 800508c:	2300      	movs	r3, #0
 800508e:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005092:	2502      	movs	r5, #2
 8005094:	e7f8      	b.n	8005088 <USBD_CDC_Init+0x7a>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005096:	2340      	movs	r3, #64	; 0x40
 8005098:	2202      	movs	r2, #2
 800509a:	2181      	movs	r1, #129	; 0x81
 800509c:	4620      	mov	r0, r4
 800509e:	f000 ff92 	bl	8005fc6 <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80050a2:	2501      	movs	r5, #1
 80050a4:	8725      	strh	r5, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80050a6:	2340      	movs	r3, #64	; 0x40
 80050a8:	2202      	movs	r2, #2
 80050aa:	4629      	mov	r1, r5
 80050ac:	4620      	mov	r0, r4
 80050ae:	f000 ff8a 	bl	8005fc6 <USBD_LL_OpenEP>
      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80050b2:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80050b6:	2310      	movs	r3, #16
 80050b8:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 80050bc:	e7c8      	b.n	8005050 <USBD_CDC_Init+0x42>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80050be:	2340      	movs	r3, #64	; 0x40
 80050c0:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80050c4:	2101      	movs	r1, #1
 80050c6:	4620      	mov	r0, r4
 80050c8:	f000 ffb0 	bl	800602c <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 80050cc:	2500      	movs	r5, #0
 80050ce:	e7db      	b.n	8005088 <USBD_CDC_Init+0x7a>

080050d0 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 80050d0:	b119      	cbz	r1, 80050da <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 80050d2:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80050d6:	2000      	movs	r0, #0
 80050d8:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 80050da:	2003      	movs	r0, #3
}
 80050dc:	4770      	bx	lr

080050de <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80050de:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  hcdc->TxBuffer = pbuff;
 80050e2:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80050e6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
}
 80050ea:	2000      	movs	r0, #0
 80050ec:	4770      	bx	lr

080050ee <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80050ee:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  hcdc->RxBuffer = pbuff;
 80050f2:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
}
 80050f6:	2000      	movs	r0, #0
 80050f8:	4770      	bx	lr

080050fa <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80050fa:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 80050fe:	b1a2      	cbz	r2, 800512a <USBD_CDC_TransmitPacket+0x30>
{
 8005100:	b508      	push	{r3, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 8005102:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8005106:	b10b      	cbz	r3, 800510c <USBD_CDC_TransmitPacket+0x12>
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005108:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 800510a:	bd08      	pop	{r3, pc}
    hcdc->TxState = 1U;
 800510c:	2301      	movs	r3, #1
 800510e:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005112:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8005116:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005118:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 800511c:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8005120:	2181      	movs	r1, #129	; 0x81
 8005122:	f000 ff7b 	bl	800601c <USBD_LL_Transmit>
    ret = USBD_OK;
 8005126:	2000      	movs	r0, #0
 8005128:	e7ef      	b.n	800510a <USBD_CDC_TransmitPacket+0x10>
    return (uint8_t)USBD_FAIL;
 800512a:	2003      	movs	r0, #3
}
 800512c:	4770      	bx	lr

0800512e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800512e:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005130:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 8005134:	b192      	cbz	r2, 800515c <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005136:	7c04      	ldrb	r4, [r0, #16]
 8005138:	b944      	cbnz	r4, 800514c <USBD_CDC_ReceivePacket+0x1e>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800513a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800513e:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8005142:	2101      	movs	r1, #1
 8005144:	f000 ff72 	bl	800602c <USBD_LL_PrepareReceive>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
}
 8005148:	4620      	mov	r0, r4
 800514a:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800514c:	2340      	movs	r3, #64	; 0x40
 800514e:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8005152:	2101      	movs	r1, #1
 8005154:	f000 ff6a 	bl	800602c <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8005158:	2400      	movs	r4, #0
 800515a:	e7f5      	b.n	8005148 <USBD_CDC_ReceivePacket+0x1a>
    return (uint8_t)USBD_FAIL;
 800515c:	2403      	movs	r4, #3
 800515e:	e7f3      	b.n	8005148 <USBD_CDC_ReceivePacket+0x1a>

08005160 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005160:	b1c0      	cbz	r0, 8005194 <USBD_Init+0x34>
{
 8005162:	b508      	push	{r3, lr}
 8005164:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8005166:	f8d0 02b8 	ldr.w	r0, [r0, #696]	; 0x2b8
 800516a:	b110      	cbz	r0, 8005172 <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 800516c:	2000      	movs	r0, #0
 800516e:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8005172:	f8d3 02cc 	ldr.w	r0, [r3, #716]	; 0x2cc
 8005176:	b110      	cbz	r0, 800517e <USBD_Init+0x1e>
  {
    pdev->pConfDesc = NULL;
 8005178:	2000      	movs	r0, #0
 800517a:	f8c3 02cc 	str.w	r0, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800517e:	b109      	cbz	r1, 8005184 <USBD_Init+0x24>
  {
    pdev->pDesc = pdesc;
 8005180:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005184:	2101      	movs	r1, #1
 8005186:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 800518a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800518c:	4618      	mov	r0, r3
 800518e:	f000 feb7 	bl	8005f00 <USBD_LL_Init>

  return ret;
}
 8005192:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8005194:	2003      	movs	r0, #3
}
 8005196:	4770      	bx	lr

08005198 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005198:	b510      	push	{r4, lr}
 800519a:	b082      	sub	sp, #8
  uint16_t len = 0U;
 800519c:	2300      	movs	r3, #0
 800519e:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 80051a2:	b159      	cbz	r1, 80051bc <USBD_RegisterClass+0x24>
 80051a4:	4604      	mov	r4, r0
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80051a6:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80051aa:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80051ac:	f10d 0006 	add.w	r0, sp, #6
 80051b0:	4798      	blx	r3
 80051b2:	f8c4 02cc 	str.w	r0, [r4, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80051b6:	2000      	movs	r0, #0
}
 80051b8:	b002      	add	sp, #8
 80051ba:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 80051bc:	2003      	movs	r0, #3
 80051be:	e7fb      	b.n	80051b8 <USBD_RegisterClass+0x20>

080051c0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80051c0:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80051c2:	f000 fef8 	bl	8005fb6 <USBD_LL_Start>
}
 80051c6:	bd08      	pop	{r3, pc}

080051c8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80051c8:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 80051ca:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80051ce:	b113      	cbz	r3, 80051d6 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4798      	blx	r3
  }

  return ret;
}
 80051d4:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 80051d6:	2003      	movs	r0, #3
 80051d8:	e7fc      	b.n	80051d4 <USBD_SetClassConfig+0xc>

080051da <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80051da:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80051dc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80051e0:	b10b      	cbz	r3, 80051e6 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	4798      	blx	r3
  }

  return USBD_OK;
}
 80051e6:	2000      	movs	r0, #0
 80051e8:	bd08      	pop	{r3, pc}

080051ea <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80051ea:	b538      	push	{r3, r4, r5, lr}
 80051ec:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80051ee:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 80051f2:	4628      	mov	r0, r5
 80051f4:	f000 f92e 	bl	8005454 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80051f8:	2301      	movs	r3, #1
 80051fa:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80051fe:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 8005202:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005206:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
 800520a:	f001 031f 	and.w	r3, r1, #31
 800520e:	2b01      	cmp	r3, #1
 8005210:	d00d      	beq.n	800522e <USBD_LL_SetupStage+0x44>
 8005212:	2b02      	cmp	r3, #2
 8005214:	d010      	beq.n	8005238 <USBD_LL_SetupStage+0x4e>
 8005216:	b12b      	cbz	r3, 8005224 <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005218:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800521c:	4620      	mov	r0, r4
 800521e:	f000 fee5 	bl	8005fec <USBD_LL_StallEP>
      break;
 8005222:	e003      	b.n	800522c <USBD_LL_SetupStage+0x42>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005224:	4629      	mov	r1, r5
 8005226:	4620      	mov	r0, r4
 8005228:	f000 face 	bl	80057c8 <USBD_StdDevReq>
  }

  return ret;
}
 800522c:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800522e:	4629      	mov	r1, r5
 8005230:	4620      	mov	r0, r4
 8005232:	f000 fb01 	bl	8005838 <USBD_StdItfReq>
      break;
 8005236:	e7f9      	b.n	800522c <USBD_LL_SetupStage+0x42>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005238:	4629      	mov	r1, r5
 800523a:	4620      	mov	r0, r4
 800523c:	f000 fb30 	bl	80058a0 <USBD_StdEPReq>
      break;
 8005240:	e7f4      	b.n	800522c <USBD_LL_SetupStage+0x42>

08005242 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005242:	b538      	push	{r3, r4, r5, lr}
 8005244:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005246:	460d      	mov	r5, r1
 8005248:	bb31      	cbnz	r1, 8005298 <USBD_LL_DataOutStage+0x56>
 800524a:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800524c:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8005250:	2a03      	cmp	r2, #3
 8005252:	d001      	beq.n	8005258 <USBD_LL_DataOutStage+0x16>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8005254:	4608      	mov	r0, r1
}
 8005256:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8005258:	f8d0 115c 	ldr.w	r1, [r0, #348]	; 0x15c
 800525c:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 8005260:	4291      	cmp	r1, r2
 8005262:	d80c      	bhi.n	800527e <USBD_LL_DataOutStage+0x3c>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005264:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	b11b      	cbz	r3, 8005274 <USBD_LL_DataOutStage+0x32>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800526c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005270:	2a03      	cmp	r2, #3
 8005272:	d00f      	beq.n	8005294 <USBD_LL_DataOutStage+0x52>
        (void)USBD_CtlSendStatus(pdev);
 8005274:	4620      	mov	r0, r4
 8005276:	f000 fc4e 	bl	8005b16 <USBD_CtlSendStatus>
  return USBD_OK;
 800527a:	4628      	mov	r0, r5
 800527c:	e7eb      	b.n	8005256 <USBD_LL_DataOutStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800527e:	1a89      	subs	r1, r1, r2
 8005280:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005284:	428a      	cmp	r2, r1
 8005286:	bf28      	it	cs
 8005288:	460a      	movcs	r2, r1
 800528a:	4619      	mov	r1, r3
 800528c:	f000 fc3b 	bl	8005b06 <USBD_CtlContinueRx>
  return USBD_OK;
 8005290:	4628      	mov	r0, r5
 8005292:	e7e0      	b.n	8005256 <USBD_LL_DataOutStage+0x14>
          pdev->pClass->EP0_RxReady(pdev);
 8005294:	4798      	blx	r3
 8005296:	e7ed      	b.n	8005274 <USBD_LL_DataOutStage+0x32>
  else if ((pdev->pClass->DataOut != NULL) &&
 8005298:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	b12b      	cbz	r3, 80052ac <USBD_LL_DataOutStage+0x6a>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80052a0:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80052a4:	2a03      	cmp	r2, #3
 80052a6:	d103      	bne.n	80052b0 <USBD_LL_DataOutStage+0x6e>
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80052a8:	4798      	blx	r3
    if (ret != USBD_OK)
 80052aa:	e7d4      	b.n	8005256 <USBD_LL_DataOutStage+0x14>
    return USBD_FAIL;
 80052ac:	2003      	movs	r0, #3
 80052ae:	e7d2      	b.n	8005256 <USBD_LL_DataOutStage+0x14>
 80052b0:	2003      	movs	r0, #3
 80052b2:	e7d0      	b.n	8005256 <USBD_LL_DataOutStage+0x14>

080052b4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80052b4:	b538      	push	{r3, r4, r5, lr}
 80052b6:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80052b8:	460d      	mov	r5, r1
 80052ba:	2900      	cmp	r1, #0
 80052bc:	d148      	bne.n	8005350 <USBD_LL_DataInStage+0x9c>
 80052be:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80052c0:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 80052c4:	2a02      	cmp	r2, #2
 80052c6:	d005      	beq.n	80052d4 <USBD_LL_DataInStage+0x20>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80052c8:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d03a      	beq.n	8005346 <USBD_LL_DataInStage+0x92>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80052d0:	4628      	mov	r0, r5
}
 80052d2:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 80052d4:	69c2      	ldr	r2, [r0, #28]
 80052d6:	6a01      	ldr	r1, [r0, #32]
 80052d8:	428a      	cmp	r2, r1
 80052da:	d811      	bhi.n	8005300 <USBD_LL_DataInStage+0x4c>
        if ((pep->maxpacket == pep->rem_length) &&
 80052dc:	428a      	cmp	r2, r1
 80052de:	d01b      	beq.n	8005318 <USBD_LL_DataInStage+0x64>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80052e0:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	b11b      	cbz	r3, 80052f0 <USBD_LL_DataInStage+0x3c>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80052e8:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80052ec:	2a03      	cmp	r2, #3
 80052ee:	d027      	beq.n	8005340 <USBD_LL_DataInStage+0x8c>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80052f0:	2180      	movs	r1, #128	; 0x80
 80052f2:	4620      	mov	r0, r4
 80052f4:	f000 fe7a 	bl	8005fec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80052f8:	4620      	mov	r0, r4
 80052fa:	f000 fc17 	bl	8005b2c <USBD_CtlReceiveStatus>
 80052fe:	e7e3      	b.n	80052c8 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8005300:	1a52      	subs	r2, r2, r1
 8005302:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005304:	4619      	mov	r1, r3
 8005306:	f000 fbe7 	bl	8005ad8 <USBD_CtlContinueSendData>
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800530a:	2300      	movs	r3, #0
 800530c:	461a      	mov	r2, r3
 800530e:	4619      	mov	r1, r3
 8005310:	4620      	mov	r0, r4
 8005312:	f000 fe8b 	bl	800602c <USBD_LL_PrepareReceive>
 8005316:	e7d7      	b.n	80052c8 <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 8005318:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800531a:	4299      	cmp	r1, r3
 800531c:	d8e0      	bhi.n	80052e0 <USBD_LL_DataInStage+0x2c>
            (pep->total_length < pdev->ep0_data_len))
 800531e:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005322:	4293      	cmp	r3, r2
 8005324:	d2dc      	bcs.n	80052e0 <USBD_LL_DataInStage+0x2c>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005326:	2200      	movs	r2, #0
 8005328:	4611      	mov	r1, r2
 800532a:	f000 fbd5 	bl	8005ad8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800532e:	2100      	movs	r1, #0
 8005330:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005334:	460b      	mov	r3, r1
 8005336:	460a      	mov	r2, r1
 8005338:	4620      	mov	r0, r4
 800533a:	f000 fe77 	bl	800602c <USBD_LL_PrepareReceive>
 800533e:	e7c3      	b.n	80052c8 <USBD_LL_DataInStage+0x14>
            pdev->pClass->EP0_TxSent(pdev);
 8005340:	4620      	mov	r0, r4
 8005342:	4798      	blx	r3
 8005344:	e7d4      	b.n	80052f0 <USBD_LL_DataInStage+0x3c>
      pdev->dev_test_mode = 0U;
 8005346:	2300      	movs	r3, #0
 8005348:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 800534c:	4628      	mov	r0, r5
 800534e:	e7c0      	b.n	80052d2 <USBD_LL_DataInStage+0x1e>
  else if ((pdev->pClass->DataIn != NULL) &&
 8005350:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	b12b      	cbz	r3, 8005364 <USBD_LL_DataInStage+0xb0>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005358:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800535c:	2a03      	cmp	r2, #3
 800535e:	d103      	bne.n	8005368 <USBD_LL_DataInStage+0xb4>
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005360:	4798      	blx	r3
    if (ret != USBD_OK)
 8005362:	e7b6      	b.n	80052d2 <USBD_LL_DataInStage+0x1e>
    return USBD_FAIL;
 8005364:	2003      	movs	r0, #3
 8005366:	e7b4      	b.n	80052d2 <USBD_LL_DataInStage+0x1e>
 8005368:	2003      	movs	r0, #3
 800536a:	e7b2      	b.n	80052d2 <USBD_LL_DataInStage+0x1e>

0800536c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800536c:	b570      	push	{r4, r5, r6, lr}
 800536e:	4604      	mov	r4, r0
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005370:	2301      	movs	r3, #1
 8005372:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005376:	2300      	movs	r3, #0
 8005378:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 800537c:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 800537e:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8005382:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8005386:	b123      	cbz	r3, 8005392 <USBD_LL_Reset+0x26>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005388:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	2100      	movs	r1, #0
 8005390:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005392:	2340      	movs	r3, #64	; 0x40
 8005394:	2200      	movs	r2, #0
 8005396:	4611      	mov	r1, r2
 8005398:	4620      	mov	r0, r4
 800539a:	f000 fe14 	bl	8005fc6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800539e:	2601      	movs	r6, #1
 80053a0:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80053a4:	2540      	movs	r5, #64	; 0x40
 80053a6:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80053aa:	462b      	mov	r3, r5
 80053ac:	2200      	movs	r2, #0
 80053ae:	2180      	movs	r1, #128	; 0x80
 80053b0:	4620      	mov	r0, r4
 80053b2:	f000 fe08 	bl	8005fc6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80053b6:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80053b8:	6225      	str	r5, [r4, #32]

  return USBD_OK;
}
 80053ba:	2000      	movs	r0, #0
 80053bc:	bd70      	pop	{r4, r5, r6, pc}

080053be <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80053be:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80053c0:	2000      	movs	r0, #0
 80053c2:	4770      	bx	lr

080053c4 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 80053c4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80053c8:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80053cc:	2304      	movs	r3, #4
 80053ce:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 80053d2:	2000      	movs	r0, #0
 80053d4:	4770      	bx	lr

080053d6 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80053d6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80053da:	2b04      	cmp	r3, #4
 80053dc:	d001      	beq.n	80053e2 <USBD_LL_Resume+0xc>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 80053de:	2000      	movs	r0, #0
 80053e0:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 80053e2:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 80053e6:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 80053ea:	e7f8      	b.n	80053de <USBD_LL_Resume+0x8>

080053ec <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80053ec:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053ee:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80053f2:	2b03      	cmp	r3, #3
 80053f4:	d001      	beq.n	80053fa <USBD_LL_SOF+0xe>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 80053f6:	2000      	movs	r0, #0
 80053f8:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 80053fa:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80053fe:	69db      	ldr	r3, [r3, #28]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d0f8      	beq.n	80053f6 <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 8005404:	4798      	blx	r3
 8005406:	e7f6      	b.n	80053f6 <USBD_LL_SOF+0xa>

08005408 <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8005408:	2000      	movs	r0, #0
 800540a:	4770      	bx	lr

0800540c <USBD_LL_IsoOUTIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 800540c:	2000      	movs	r0, #0
 800540e:	4770      	bx	lr

08005410 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 8005410:	2000      	movs	r0, #0
 8005412:	4770      	bx	lr

08005414 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005414:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005416:	2301      	movs	r3, #1
 8005418:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800541c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005420:	b113      	cbz	r3, 8005428 <USBD_LL_DevDisconnected+0x14>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	7901      	ldrb	r1, [r0, #4]
 8005426:	4798      	blx	r3
  }

  return USBD_OK;
}
 8005428:	2000      	movs	r0, #0
 800542a:	bd08      	pop	{r3, pc}

0800542c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800542c:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 800542e:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8005430:	e002      	b.n	8005438 <USBD_GetLen+0xc>
  {
    len++;
 8005432:	3001      	adds	r0, #1
 8005434:	b2c0      	uxtb	r0, r0
    pbuff++;
 8005436:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 8005438:	781a      	ldrb	r2, [r3, #0]
 800543a:	2a00      	cmp	r2, #0
 800543c:	d1f9      	bne.n	8005432 <USBD_GetLen+0x6>
  }

  return len;
}
 800543e:	4770      	bx	lr

08005440 <USBD_SetFeature>:
{
 8005440:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005442:	884b      	ldrh	r3, [r1, #2]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d000      	beq.n	800544a <USBD_SetFeature+0xa>
}
 8005448:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 800544a:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800544e:	f000 fb62 	bl	8005b16 <USBD_CtlSendStatus>
}
 8005452:	e7f9      	b.n	8005448 <USBD_SetFeature+0x8>

08005454 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8005454:	780b      	ldrb	r3, [r1, #0]
 8005456:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8005458:	784b      	ldrb	r3, [r1, #1]
 800545a:	7043      	strb	r3, [r0, #1]
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 800545c:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 800545e:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005460:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 8005464:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 8005466:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 8005468:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800546a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 800546e:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 8005470:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 8005472:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005474:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 8005478:	80c3      	strh	r3, [r0, #6]
}
 800547a:	4770      	bx	lr

0800547c <USBD_CtlError>:
{
 800547c:	b510      	push	{r4, lr}
 800547e:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005480:	2180      	movs	r1, #128	; 0x80
 8005482:	f000 fdb3 	bl	8005fec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005486:	2100      	movs	r1, #0
 8005488:	4620      	mov	r0, r4
 800548a:	f000 fdaf 	bl	8005fec <USBD_LL_StallEP>
}
 800548e:	bd10      	pop	{r4, pc}

08005490 <USBD_GetDescriptor>:
{
 8005490:	b530      	push	{r4, r5, lr}
 8005492:	b083      	sub	sp, #12
 8005494:	4604      	mov	r4, r0
 8005496:	460d      	mov	r5, r1
  uint16_t len = 0U;
 8005498:	2300      	movs	r3, #0
 800549a:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800549e:	884a      	ldrh	r2, [r1, #2]
 80054a0:	0a13      	lsrs	r3, r2, #8
 80054a2:	3b01      	subs	r3, #1
 80054a4:	2b06      	cmp	r3, #6
 80054a6:	f200 80ab 	bhi.w	8005600 <USBD_GetDescriptor+0x170>
 80054aa:	e8df f003 	tbb	[pc, r3]
 80054ae:	1f04      	.short	0x1f04
 80054b0:	8da9a933 	.word	0x8da9a933
 80054b4:	9a          	.byte	0x9a
 80054b5:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80054b6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f10d 0106 	add.w	r1, sp, #6
 80054c0:	7c00      	ldrb	r0, [r0, #16]
 80054c2:	4798      	blx	r3
    if (req->wLength != 0U)
 80054c4:	88ea      	ldrh	r2, [r5, #6]
 80054c6:	2a00      	cmp	r2, #0
 80054c8:	f000 80a3 	beq.w	8005612 <USBD_GetDescriptor+0x182>
      if (len != 0U)
 80054cc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f000 8099 	beq.w	8005608 <USBD_GetDescriptor+0x178>
        len = MIN(len, req->wLength);
 80054d6:	429a      	cmp	r2, r3
 80054d8:	bf28      	it	cs
 80054da:	461a      	movcs	r2, r3
 80054dc:	f8ad 2006 	strh.w	r2, [sp, #6]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80054e0:	4601      	mov	r1, r0
 80054e2:	4620      	mov	r0, r4
 80054e4:	f000 faeb 	bl	8005abe <USBD_CtlSendData>
}
 80054e8:	b003      	add	sp, #12
 80054ea:	bd30      	pop	{r4, r5, pc}
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80054ec:	7c03      	ldrb	r3, [r0, #16]
 80054ee:	b943      	cbnz	r3, 8005502 <USBD_GetDescriptor+0x72>
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80054f0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80054f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f6:	f10d 0006 	add.w	r0, sp, #6
 80054fa:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80054fc:	2302      	movs	r3, #2
 80054fe:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8005500:	e7e0      	b.n	80054c4 <USBD_GetDescriptor+0x34>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005502:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005508:	f10d 0006 	add.w	r0, sp, #6
 800550c:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800550e:	2302      	movs	r3, #2
 8005510:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8005512:	e7d7      	b.n	80054c4 <USBD_GetDescriptor+0x34>
    switch ((uint8_t)(req->wValue))
 8005514:	b2d2      	uxtb	r2, r2
 8005516:	2a05      	cmp	r2, #5
 8005518:	d852      	bhi.n	80055c0 <USBD_GetDescriptor+0x130>
 800551a:	e8df f002 	tbb	[pc, r2]
 800551e:	1003      	.short	0x1003
 8005520:	44372a1d 	.word	0x44372a1d
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005524:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	b123      	cbz	r3, 8005536 <USBD_GetDescriptor+0xa6>
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800552c:	f10d 0106 	add.w	r1, sp, #6
 8005530:	7c00      	ldrb	r0, [r0, #16]
 8005532:	4798      	blx	r3
  if (err != 0U)
 8005534:	e7c6      	b.n	80054c4 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8005536:	4629      	mov	r1, r5
 8005538:	f7ff ffa0 	bl	800547c <USBD_CtlError>
  if (err != 0U)
 800553c:	e7d4      	b.n	80054e8 <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800553e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	b123      	cbz	r3, 8005550 <USBD_GetDescriptor+0xc0>
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005546:	f10d 0106 	add.w	r1, sp, #6
 800554a:	7c00      	ldrb	r0, [r0, #16]
 800554c:	4798      	blx	r3
  if (err != 0U)
 800554e:	e7b9      	b.n	80054c4 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8005550:	4629      	mov	r1, r5
 8005552:	f7ff ff93 	bl	800547c <USBD_CtlError>
  if (err != 0U)
 8005556:	e7c7      	b.n	80054e8 <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005558:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	b123      	cbz	r3, 800556a <USBD_GetDescriptor+0xda>
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005560:	f10d 0106 	add.w	r1, sp, #6
 8005564:	7c00      	ldrb	r0, [r0, #16]
 8005566:	4798      	blx	r3
  if (err != 0U)
 8005568:	e7ac      	b.n	80054c4 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 800556a:	4629      	mov	r1, r5
 800556c:	f7ff ff86 	bl	800547c <USBD_CtlError>
  if (err != 0U)
 8005570:	e7ba      	b.n	80054e8 <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005572:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	b123      	cbz	r3, 8005584 <USBD_GetDescriptor+0xf4>
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800557a:	f10d 0106 	add.w	r1, sp, #6
 800557e:	7c00      	ldrb	r0, [r0, #16]
 8005580:	4798      	blx	r3
  if (err != 0U)
 8005582:	e79f      	b.n	80054c4 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8005584:	4629      	mov	r1, r5
 8005586:	f7ff ff79 	bl	800547c <USBD_CtlError>
  if (err != 0U)
 800558a:	e7ad      	b.n	80054e8 <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800558c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	b123      	cbz	r3, 800559e <USBD_GetDescriptor+0x10e>
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005594:	f10d 0106 	add.w	r1, sp, #6
 8005598:	7c00      	ldrb	r0, [r0, #16]
 800559a:	4798      	blx	r3
  if (err != 0U)
 800559c:	e792      	b.n	80054c4 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 800559e:	4629      	mov	r1, r5
 80055a0:	f7ff ff6c 	bl	800547c <USBD_CtlError>
  if (err != 0U)
 80055a4:	e7a0      	b.n	80054e8 <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80055a6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	b123      	cbz	r3, 80055b8 <USBD_GetDescriptor+0x128>
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80055ae:	f10d 0106 	add.w	r1, sp, #6
 80055b2:	7c00      	ldrb	r0, [r0, #16]
 80055b4:	4798      	blx	r3
  if (err != 0U)
 80055b6:	e785      	b.n	80054c4 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 80055b8:	4629      	mov	r1, r5
 80055ba:	f7ff ff5f 	bl	800547c <USBD_CtlError>
  if (err != 0U)
 80055be:	e793      	b.n	80054e8 <USBD_GetDescriptor+0x58>
      USBD_CtlError(pdev, req);
 80055c0:	4629      	mov	r1, r5
 80055c2:	f7ff ff5b 	bl	800547c <USBD_CtlError>
  if (err != 0U)
 80055c6:	e78f      	b.n	80054e8 <USBD_GetDescriptor+0x58>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80055c8:	7c03      	ldrb	r3, [r0, #16]
 80055ca:	b933      	cbnz	r3, 80055da <USBD_GetDescriptor+0x14a>
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80055cc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80055d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d2:	f10d 0006 	add.w	r0, sp, #6
 80055d6:	4798      	blx	r3
  if (err != 0U)
 80055d8:	e774      	b.n	80054c4 <USBD_GetDescriptor+0x34>
      USBD_CtlError(pdev, req);
 80055da:	4629      	mov	r1, r5
 80055dc:	f7ff ff4e 	bl	800547c <USBD_CtlError>
  if (err != 0U)
 80055e0:	e782      	b.n	80054e8 <USBD_GetDescriptor+0x58>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80055e2:	7c03      	ldrb	r3, [r0, #16]
 80055e4:	b943      	cbnz	r3, 80055f8 <USBD_GetDescriptor+0x168>
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80055e6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80055ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ec:	f10d 0006 	add.w	r0, sp, #6
 80055f0:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80055f2:	2307      	movs	r3, #7
 80055f4:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80055f6:	e765      	b.n	80054c4 <USBD_GetDescriptor+0x34>
      USBD_CtlError(pdev, req);
 80055f8:	4629      	mov	r1, r5
 80055fa:	f7ff ff3f 	bl	800547c <USBD_CtlError>
  if (err != 0U)
 80055fe:	e773      	b.n	80054e8 <USBD_GetDescriptor+0x58>
    USBD_CtlError(pdev, req);
 8005600:	4629      	mov	r1, r5
 8005602:	f7ff ff3b 	bl	800547c <USBD_CtlError>
    return;
 8005606:	e76f      	b.n	80054e8 <USBD_GetDescriptor+0x58>
        USBD_CtlError(pdev, req);
 8005608:	4629      	mov	r1, r5
 800560a:	4620      	mov	r0, r4
 800560c:	f7ff ff36 	bl	800547c <USBD_CtlError>
 8005610:	e76a      	b.n	80054e8 <USBD_GetDescriptor+0x58>
      (void)USBD_CtlSendStatus(pdev);
 8005612:	4620      	mov	r0, r4
 8005614:	f000 fa7f 	bl	8005b16 <USBD_CtlSendStatus>
 8005618:	e766      	b.n	80054e8 <USBD_GetDescriptor+0x58>

0800561a <USBD_SetAddress>:
{
 800561a:	b538      	push	{r3, r4, r5, lr}
 800561c:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800561e:	888b      	ldrh	r3, [r1, #4]
 8005620:	b9f3      	cbnz	r3, 8005660 <USBD_SetAddress+0x46>
 8005622:	88cb      	ldrh	r3, [r1, #6]
 8005624:	b9e3      	cbnz	r3, 8005660 <USBD_SetAddress+0x46>
 8005626:	884b      	ldrh	r3, [r1, #2]
 8005628:	2b7f      	cmp	r3, #127	; 0x7f
 800562a:	d819      	bhi.n	8005660 <USBD_SetAddress+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800562c:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005630:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005634:	2b03      	cmp	r3, #3
 8005636:	d00c      	beq.n	8005652 <USBD_SetAddress+0x38>
      pdev->dev_address = dev_addr;
 8005638:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800563c:	4629      	mov	r1, r5
 800563e:	f000 fce5 	bl	800600c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005642:	4620      	mov	r0, r4
 8005644:	f000 fa67 	bl	8005b16 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8005648:	b135      	cbz	r5, 8005658 <USBD_SetAddress+0x3e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800564a:	2302      	movs	r3, #2
 800564c:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8005650:	e009      	b.n	8005666 <USBD_SetAddress+0x4c>
      USBD_CtlError(pdev, req);
 8005652:	f7ff ff13 	bl	800547c <USBD_CtlError>
 8005656:	e006      	b.n	8005666 <USBD_SetAddress+0x4c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005658:	2301      	movs	r3, #1
 800565a:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800565e:	e002      	b.n	8005666 <USBD_SetAddress+0x4c>
    USBD_CtlError(pdev, req);
 8005660:	4620      	mov	r0, r4
 8005662:	f7ff ff0b 	bl	800547c <USBD_CtlError>
}
 8005666:	bd38      	pop	{r3, r4, r5, pc}

08005668 <USBD_SetConfig>:
{
 8005668:	b570      	push	{r4, r5, r6, lr}
 800566a:	4604      	mov	r4, r0
 800566c:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 800566e:	788d      	ldrb	r5, [r1, #2]
 8005670:	4b2d      	ldr	r3, [pc, #180]	; (8005728 <USBD_SetConfig+0xc0>)
 8005672:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005674:	2d01      	cmp	r5, #1
 8005676:	d80f      	bhi.n	8005698 <USBD_SetConfig+0x30>
  switch (pdev->dev_state)
 8005678:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800567c:	2b02      	cmp	r3, #2
 800567e:	d00f      	beq.n	80056a0 <USBD_SetConfig+0x38>
 8005680:	2b03      	cmp	r3, #3
 8005682:	d023      	beq.n	80056cc <USBD_SetConfig+0x64>
    USBD_CtlError(pdev, req);
 8005684:	f7ff fefa 	bl	800547c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005688:	4b27      	ldr	r3, [pc, #156]	; (8005728 <USBD_SetConfig+0xc0>)
 800568a:	7819      	ldrb	r1, [r3, #0]
 800568c:	4620      	mov	r0, r4
 800568e:	f7ff fda4 	bl	80051da <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8005692:	2503      	movs	r5, #3
}
 8005694:	4628      	mov	r0, r5
 8005696:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 8005698:	f7ff fef0 	bl	800547c <USBD_CtlError>
    return USBD_FAIL;
 800569c:	2503      	movs	r5, #3
 800569e:	e7f9      	b.n	8005694 <USBD_SetConfig+0x2c>
    if (cfgidx != 0U)
 80056a0:	b18d      	cbz	r5, 80056c6 <USBD_SetConfig+0x5e>
      pdev->dev_config = cfgidx;
 80056a2:	6045      	str	r5, [r0, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80056a4:	4629      	mov	r1, r5
 80056a6:	f7ff fd8f 	bl	80051c8 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 80056aa:	4605      	mov	r5, r0
 80056ac:	b120      	cbz	r0, 80056b8 <USBD_SetConfig+0x50>
        USBD_CtlError(pdev, req);
 80056ae:	4631      	mov	r1, r6
 80056b0:	4620      	mov	r0, r4
 80056b2:	f7ff fee3 	bl	800547c <USBD_CtlError>
 80056b6:	e7ed      	b.n	8005694 <USBD_SetConfig+0x2c>
        (void)USBD_CtlSendStatus(pdev);
 80056b8:	4620      	mov	r0, r4
 80056ba:	f000 fa2c 	bl	8005b16 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80056be:	2303      	movs	r3, #3
 80056c0:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80056c4:	e7e6      	b.n	8005694 <USBD_SetConfig+0x2c>
      (void)USBD_CtlSendStatus(pdev);
 80056c6:	f000 fa26 	bl	8005b16 <USBD_CtlSendStatus>
 80056ca:	e7e3      	b.n	8005694 <USBD_SetConfig+0x2c>
    if (cfgidx == 0U)
 80056cc:	b1cd      	cbz	r5, 8005702 <USBD_SetConfig+0x9a>
    else if (cfgidx != pdev->dev_config)
 80056ce:	6841      	ldr	r1, [r0, #4]
 80056d0:	428d      	cmp	r5, r1
 80056d2:	d025      	beq.n	8005720 <USBD_SetConfig+0xb8>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80056d4:	b2c9      	uxtb	r1, r1
 80056d6:	f7ff fd80 	bl	80051da <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80056da:	4b13      	ldr	r3, [pc, #76]	; (8005728 <USBD_SetConfig+0xc0>)
 80056dc:	7819      	ldrb	r1, [r3, #0]
 80056de:	6061      	str	r1, [r4, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80056e0:	4620      	mov	r0, r4
 80056e2:	f7ff fd71 	bl	80051c8 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 80056e6:	4605      	mov	r5, r0
 80056e8:	b1b0      	cbz	r0, 8005718 <USBD_SetConfig+0xb0>
        USBD_CtlError(pdev, req);
 80056ea:	4631      	mov	r1, r6
 80056ec:	4620      	mov	r0, r4
 80056ee:	f7ff fec5 	bl	800547c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80056f2:	7921      	ldrb	r1, [r4, #4]
 80056f4:	4620      	mov	r0, r4
 80056f6:	f7ff fd70 	bl	80051da <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80056fa:	2302      	movs	r3, #2
 80056fc:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8005700:	e7c8      	b.n	8005694 <USBD_SetConfig+0x2c>
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8005702:	2302      	movs	r3, #2
 8005704:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8005708:	6045      	str	r5, [r0, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800570a:	4629      	mov	r1, r5
 800570c:	f7ff fd65 	bl	80051da <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8005710:	4620      	mov	r0, r4
 8005712:	f000 fa00 	bl	8005b16 <USBD_CtlSendStatus>
 8005716:	e7bd      	b.n	8005694 <USBD_SetConfig+0x2c>
        (void)USBD_CtlSendStatus(pdev);
 8005718:	4620      	mov	r0, r4
 800571a:	f000 f9fc 	bl	8005b16 <USBD_CtlSendStatus>
 800571e:	e7b9      	b.n	8005694 <USBD_SetConfig+0x2c>
      (void)USBD_CtlSendStatus(pdev);
 8005720:	f000 f9f9 	bl	8005b16 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8005724:	2500      	movs	r5, #0
 8005726:	e7b5      	b.n	8005694 <USBD_SetConfig+0x2c>
 8005728:	200004c0 	.word	0x200004c0

0800572c <USBD_GetConfig>:
{
 800572c:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 800572e:	88cb      	ldrh	r3, [r1, #6]
 8005730:	2b01      	cmp	r3, #1
 8005732:	d10a      	bne.n	800574a <USBD_GetConfig+0x1e>
    switch (pdev->dev_state)
 8005734:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005738:	2b02      	cmp	r3, #2
 800573a:	d909      	bls.n	8005750 <USBD_GetConfig+0x24>
 800573c:	2b03      	cmp	r3, #3
 800573e:	d109      	bne.n	8005754 <USBD_GetConfig+0x28>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005740:	2201      	movs	r2, #1
 8005742:	1d01      	adds	r1, r0, #4
 8005744:	f000 f9bb 	bl	8005abe <USBD_CtlSendData>
      break;
 8005748:	e001      	b.n	800574e <USBD_GetConfig+0x22>
    USBD_CtlError(pdev, req);
 800574a:	f7ff fe97 	bl	800547c <USBD_CtlError>
}
 800574e:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 8005750:	b25b      	sxtb	r3, r3
 8005752:	b913      	cbnz	r3, 800575a <USBD_GetConfig+0x2e>
      USBD_CtlError(pdev, req);
 8005754:	f7ff fe92 	bl	800547c <USBD_CtlError>
}
 8005758:	e7f9      	b.n	800574e <USBD_GetConfig+0x22>
      pdev->dev_default_config = 0U;
 800575a:	4601      	mov	r1, r0
 800575c:	2300      	movs	r3, #0
 800575e:	f841 3f08 	str.w	r3, [r1, #8]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005762:	2201      	movs	r2, #1
 8005764:	f000 f9ab 	bl	8005abe <USBD_CtlSendData>
      break;
 8005768:	e7f1      	b.n	800574e <USBD_GetConfig+0x22>

0800576a <USBD_GetStatus>:
{
 800576a:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800576c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005770:	3b01      	subs	r3, #1
 8005772:	2b02      	cmp	r3, #2
 8005774:	d812      	bhi.n	800579c <USBD_GetStatus+0x32>
    if (req->wLength != 0x2U)
 8005776:	88cb      	ldrh	r3, [r1, #6]
 8005778:	2b02      	cmp	r3, #2
 800577a:	d10c      	bne.n	8005796 <USBD_GetStatus+0x2c>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800577c:	2301      	movs	r3, #1
 800577e:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup != 0U)
 8005780:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8005784:	b10b      	cbz	r3, 800578a <USBD_GetStatus+0x20>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005786:	2303      	movs	r3, #3
 8005788:	60c3      	str	r3, [r0, #12]
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800578a:	2202      	movs	r2, #2
 800578c:	f100 010c 	add.w	r1, r0, #12
 8005790:	f000 f995 	bl	8005abe <USBD_CtlSendData>
}
 8005794:	bd08      	pop	{r3, pc}
      USBD_CtlError(pdev, req);
 8005796:	f7ff fe71 	bl	800547c <USBD_CtlError>
      break;
 800579a:	e7fb      	b.n	8005794 <USBD_GetStatus+0x2a>
    USBD_CtlError(pdev, req);
 800579c:	f7ff fe6e 	bl	800547c <USBD_CtlError>
}
 80057a0:	e7f8      	b.n	8005794 <USBD_GetStatus+0x2a>

080057a2 <USBD_ClrFeature>:
{
 80057a2:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 80057a4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80057a8:	3b01      	subs	r3, #1
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d809      	bhi.n	80057c2 <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80057ae:	884b      	ldrh	r3, [r1, #2]
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d000      	beq.n	80057b6 <USBD_ClrFeature+0x14>
}
 80057b4:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 80057b6:	2300      	movs	r3, #0
 80057b8:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80057bc:	f000 f9ab 	bl	8005b16 <USBD_CtlSendStatus>
 80057c0:	e7f8      	b.n	80057b4 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 80057c2:	f7ff fe5b 	bl	800547c <USBD_CtlError>
}
 80057c6:	e7f5      	b.n	80057b4 <USBD_ClrFeature+0x12>

080057c8 <USBD_StdDevReq>:
{
 80057c8:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057ca:	780c      	ldrb	r4, [r1, #0]
 80057cc:	f004 0460 	and.w	r4, r4, #96	; 0x60
 80057d0:	2c20      	cmp	r4, #32
 80057d2:	d006      	beq.n	80057e2 <USBD_StdDevReq+0x1a>
 80057d4:	2c40      	cmp	r4, #64	; 0x40
 80057d6:	d004      	beq.n	80057e2 <USBD_StdDevReq+0x1a>
 80057d8:	b154      	cbz	r4, 80057f0 <USBD_StdDevReq+0x28>
    USBD_CtlError(pdev, req);
 80057da:	f7ff fe4f 	bl	800547c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80057de:	2400      	movs	r4, #0
    break;
 80057e0:	e004      	b.n	80057ec <USBD_StdDevReq+0x24>
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80057e2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	4798      	blx	r3
 80057ea:	4604      	mov	r4, r0
}
 80057ec:	4620      	mov	r0, r4
 80057ee:	bd38      	pop	{r3, r4, r5, pc}
    switch (req->bRequest)
 80057f0:	784d      	ldrb	r5, [r1, #1]
 80057f2:	2d09      	cmp	r5, #9
 80057f4:	d81d      	bhi.n	8005832 <USBD_StdDevReq+0x6a>
 80057f6:	e8df f005 	tbb	[pc, r5]
 80057fa:	1912      	.short	0x1912
 80057fc:	081c161c 	.word	0x081c161c
 8005800:	0b0f1c05 	.word	0x0b0f1c05
      USBD_GetDescriptor(pdev, req);
 8005804:	f7ff fe44 	bl	8005490 <USBD_GetDescriptor>
      break;
 8005808:	e7f0      	b.n	80057ec <USBD_StdDevReq+0x24>
      USBD_SetAddress(pdev, req);
 800580a:	f7ff ff06 	bl	800561a <USBD_SetAddress>
      break;
 800580e:	e7ed      	b.n	80057ec <USBD_StdDevReq+0x24>
      ret = USBD_SetConfig(pdev, req);
 8005810:	f7ff ff2a 	bl	8005668 <USBD_SetConfig>
 8005814:	4604      	mov	r4, r0
      break;
 8005816:	e7e9      	b.n	80057ec <USBD_StdDevReq+0x24>
      USBD_GetConfig(pdev, req);
 8005818:	f7ff ff88 	bl	800572c <USBD_GetConfig>
      break;
 800581c:	e7e6      	b.n	80057ec <USBD_StdDevReq+0x24>
      USBD_GetStatus(pdev, req);
 800581e:	f7ff ffa4 	bl	800576a <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8005822:	462c      	mov	r4, r5
      break;
 8005824:	e7e2      	b.n	80057ec <USBD_StdDevReq+0x24>
      USBD_SetFeature(pdev, req);
 8005826:	f7ff fe0b 	bl	8005440 <USBD_SetFeature>
      break;
 800582a:	e7df      	b.n	80057ec <USBD_StdDevReq+0x24>
      USBD_ClrFeature(pdev, req);
 800582c:	f7ff ffb9 	bl	80057a2 <USBD_ClrFeature>
      break;
 8005830:	e7dc      	b.n	80057ec <USBD_StdDevReq+0x24>
      USBD_CtlError(pdev, req);
 8005832:	f7ff fe23 	bl	800547c <USBD_CtlError>
      break;
 8005836:	e7d9      	b.n	80057ec <USBD_StdDevReq+0x24>

08005838 <USBD_StdItfReq>:
{
 8005838:	b570      	push	{r4, r5, r6, lr}
 800583a:	4605      	mov	r5, r0
 800583c:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800583e:	780b      	ldrb	r3, [r1, #0]
 8005840:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005844:	2b20      	cmp	r3, #32
 8005846:	d007      	beq.n	8005858 <USBD_StdItfReq+0x20>
 8005848:	2b40      	cmp	r3, #64	; 0x40
 800584a:	d005      	beq.n	8005858 <USBD_StdItfReq+0x20>
 800584c:	b123      	cbz	r3, 8005858 <USBD_StdItfReq+0x20>
    USBD_CtlError(pdev, req);
 800584e:	f7ff fe15 	bl	800547c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8005852:	2600      	movs	r6, #0
}
 8005854:	4630      	mov	r0, r6
 8005856:	bd70      	pop	{r4, r5, r6, pc}
    switch (pdev->dev_state)
 8005858:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 800585c:	3b01      	subs	r3, #1
 800585e:	2b02      	cmp	r3, #2
 8005860:	d818      	bhi.n	8005894 <USBD_StdItfReq+0x5c>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005862:	7923      	ldrb	r3, [r4, #4]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d80f      	bhi.n	8005888 <USBD_StdItfReq+0x50>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005868:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	4621      	mov	r1, r4
 8005870:	4628      	mov	r0, r5
 8005872:	4798      	blx	r3
 8005874:	4606      	mov	r6, r0
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8005876:	88e3      	ldrh	r3, [r4, #6]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1eb      	bne.n	8005854 <USBD_StdItfReq+0x1c>
 800587c:	2800      	cmp	r0, #0
 800587e:	d1e9      	bne.n	8005854 <USBD_StdItfReq+0x1c>
          (void)USBD_CtlSendStatus(pdev);
 8005880:	4628      	mov	r0, r5
 8005882:	f000 f948 	bl	8005b16 <USBD_CtlSendStatus>
 8005886:	e7e5      	b.n	8005854 <USBD_StdItfReq+0x1c>
        USBD_CtlError(pdev, req);
 8005888:	4621      	mov	r1, r4
 800588a:	4628      	mov	r0, r5
 800588c:	f7ff fdf6 	bl	800547c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8005890:	2600      	movs	r6, #0
 8005892:	e7df      	b.n	8005854 <USBD_StdItfReq+0x1c>
      USBD_CtlError(pdev, req);
 8005894:	4621      	mov	r1, r4
 8005896:	4628      	mov	r0, r5
 8005898:	f7ff fdf0 	bl	800547c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800589c:	2600      	movs	r6, #0
      break;
 800589e:	e7d9      	b.n	8005854 <USBD_StdItfReq+0x1c>

080058a0 <USBD_StdEPReq>:
{
 80058a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058a2:	4606      	mov	r6, r0
 80058a4:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 80058a6:	888b      	ldrh	r3, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80058a8:	780c      	ldrb	r4, [r1, #0]
 80058aa:	f004 0460 	and.w	r4, r4, #96	; 0x60
 80058ae:	2c20      	cmp	r4, #32
 80058b0:	d008      	beq.n	80058c4 <USBD_StdEPReq+0x24>
 80058b2:	b2d9      	uxtb	r1, r3
 80058b4:	2c40      	cmp	r4, #64	; 0x40
 80058b6:	d005      	beq.n	80058c4 <USBD_StdEPReq+0x24>
 80058b8:	b16c      	cbz	r4, 80058d6 <USBD_StdEPReq+0x36>
    USBD_CtlError(pdev, req);
 80058ba:	4629      	mov	r1, r5
 80058bc:	f7ff fdde 	bl	800547c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80058c0:	2400      	movs	r4, #0
    break;
 80058c2:	e006      	b.n	80058d2 <USBD_StdEPReq+0x32>
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80058c4:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	4629      	mov	r1, r5
 80058cc:	4630      	mov	r0, r6
 80058ce:	4798      	blx	r3
 80058d0:	4604      	mov	r4, r0
}
 80058d2:	4620      	mov	r0, r4
 80058d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (req->bRequest)
 80058d6:	786f      	ldrb	r7, [r5, #1]
 80058d8:	2f01      	cmp	r7, #1
 80058da:	d02e      	beq.n	800593a <USBD_StdEPReq+0x9a>
 80058dc:	2f03      	cmp	r7, #3
 80058de:	d005      	beq.n	80058ec <USBD_StdEPReq+0x4c>
 80058e0:	2f00      	cmp	r7, #0
 80058e2:	d056      	beq.n	8005992 <USBD_StdEPReq+0xf2>
      USBD_CtlError(pdev, req);
 80058e4:	4629      	mov	r1, r5
 80058e6:	f7ff fdc9 	bl	800547c <USBD_CtlError>
      break;
 80058ea:	e7f2      	b.n	80058d2 <USBD_StdEPReq+0x32>
      switch (pdev->dev_state)
 80058ec:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d005      	beq.n	8005900 <USBD_StdEPReq+0x60>
 80058f4:	2b03      	cmp	r3, #3
 80058f6:	d012      	beq.n	800591e <USBD_StdEPReq+0x7e>
        USBD_CtlError(pdev, req);
 80058f8:	4629      	mov	r1, r5
 80058fa:	f7ff fdbf 	bl	800547c <USBD_CtlError>
        break;
 80058fe:	e7e8      	b.n	80058d2 <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005900:	b109      	cbz	r1, 8005906 <USBD_StdEPReq+0x66>
 8005902:	2980      	cmp	r1, #128	; 0x80
 8005904:	d104      	bne.n	8005910 <USBD_StdEPReq+0x70>
          USBD_CtlError(pdev, req);
 8005906:	4629      	mov	r1, r5
 8005908:	4630      	mov	r0, r6
 800590a:	f7ff fdb7 	bl	800547c <USBD_CtlError>
 800590e:	e7e0      	b.n	80058d2 <USBD_StdEPReq+0x32>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005910:	f000 fb6c 	bl	8005fec <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005914:	2180      	movs	r1, #128	; 0x80
 8005916:	4630      	mov	r0, r6
 8005918:	f000 fb68 	bl	8005fec <USBD_LL_StallEP>
 800591c:	e7d9      	b.n	80058d2 <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 800591e:	886b      	ldrh	r3, [r5, #2]
 8005920:	b923      	cbnz	r3, 800592c <USBD_StdEPReq+0x8c>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005922:	b119      	cbz	r1, 800592c <USBD_StdEPReq+0x8c>
 8005924:	2980      	cmp	r1, #128	; 0x80
 8005926:	d001      	beq.n	800592c <USBD_StdEPReq+0x8c>
 8005928:	88eb      	ldrh	r3, [r5, #6]
 800592a:	b11b      	cbz	r3, 8005934 <USBD_StdEPReq+0x94>
        (void)USBD_CtlSendStatus(pdev);
 800592c:	4630      	mov	r0, r6
 800592e:	f000 f8f2 	bl	8005b16 <USBD_CtlSendStatus>
        break;
 8005932:	e7ce      	b.n	80058d2 <USBD_StdEPReq+0x32>
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8005934:	f000 fb5a 	bl	8005fec <USBD_LL_StallEP>
 8005938:	e7f8      	b.n	800592c <USBD_StdEPReq+0x8c>
      switch (pdev->dev_state)
 800593a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800593e:	2b02      	cmp	r3, #2
 8005940:	d005      	beq.n	800594e <USBD_StdEPReq+0xae>
 8005942:	2b03      	cmp	r3, #3
 8005944:	d012      	beq.n	800596c <USBD_StdEPReq+0xcc>
        USBD_CtlError(pdev, req);
 8005946:	4629      	mov	r1, r5
 8005948:	f7ff fd98 	bl	800547c <USBD_CtlError>
        break;
 800594c:	e7c1      	b.n	80058d2 <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800594e:	b109      	cbz	r1, 8005954 <USBD_StdEPReq+0xb4>
 8005950:	2980      	cmp	r1, #128	; 0x80
 8005952:	d104      	bne.n	800595e <USBD_StdEPReq+0xbe>
          USBD_CtlError(pdev, req);
 8005954:	4629      	mov	r1, r5
 8005956:	4630      	mov	r0, r6
 8005958:	f7ff fd90 	bl	800547c <USBD_CtlError>
 800595c:	e7b9      	b.n	80058d2 <USBD_StdEPReq+0x32>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800595e:	f000 fb45 	bl	8005fec <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005962:	2180      	movs	r1, #128	; 0x80
 8005964:	4630      	mov	r0, r6
 8005966:	f000 fb41 	bl	8005fec <USBD_LL_StallEP>
 800596a:	e7b2      	b.n	80058d2 <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 800596c:	886b      	ldrh	r3, [r5, #2]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1af      	bne.n	80058d2 <USBD_StdEPReq+0x32>
          if ((ep_addr & 0x7FU) != 0x00U)
 8005972:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 8005976:	d109      	bne.n	800598c <USBD_StdEPReq+0xec>
          (void)USBD_CtlSendStatus(pdev);
 8005978:	4630      	mov	r0, r6
 800597a:	f000 f8cc 	bl	8005b16 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800597e:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	4629      	mov	r1, r5
 8005986:	4630      	mov	r0, r6
 8005988:	4798      	blx	r3
 800598a:	e7a2      	b.n	80058d2 <USBD_StdEPReq+0x32>
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800598c:	f000 fb36 	bl	8005ffc <USBD_LL_ClearStallEP>
 8005990:	e7f2      	b.n	8005978 <USBD_StdEPReq+0xd8>
      switch (pdev->dev_state)
 8005992:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8005996:	2a02      	cmp	r2, #2
 8005998:	d006      	beq.n	80059a8 <USBD_StdEPReq+0x108>
 800599a:	2a03      	cmp	r2, #3
 800599c:	d029      	beq.n	80059f2 <USBD_StdEPReq+0x152>
        USBD_CtlError(pdev, req);
 800599e:	4629      	mov	r1, r5
 80059a0:	f7ff fd6c 	bl	800547c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80059a4:	463c      	mov	r4, r7
        break;
 80059a6:	e794      	b.n	80058d2 <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80059a8:	b109      	cbz	r1, 80059ae <USBD_StdEPReq+0x10e>
 80059aa:	2980      	cmp	r1, #128	; 0x80
 80059ac:	d113      	bne.n	80059d6 <USBD_StdEPReq+0x136>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80059ae:	f013 0f80 	tst.w	r3, #128	; 0x80
 80059b2:	d115      	bne.n	80059e0 <USBD_StdEPReq+0x140>
              &pdev->ep_out[ep_addr & 0x7FU];
 80059b4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80059b8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80059bc:	0089      	lsls	r1, r1, #2
 80059be:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 80059c2:	4431      	add	r1, r6
 80059c4:	3104      	adds	r1, #4
        pep->status = 0x0000U;
 80059c6:	2300      	movs	r3, #0
 80059c8:	600b      	str	r3, [r1, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80059ca:	2202      	movs	r2, #2
 80059cc:	4630      	mov	r0, r6
 80059ce:	f000 f876 	bl	8005abe <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80059d2:	463c      	mov	r4, r7
        break;
 80059d4:	e77d      	b.n	80058d2 <USBD_StdEPReq+0x32>
          USBD_CtlError(pdev, req);
 80059d6:	4629      	mov	r1, r5
 80059d8:	f7ff fd50 	bl	800547c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80059dc:	463c      	mov	r4, r7
          break;
 80059de:	e778      	b.n	80058d2 <USBD_StdEPReq+0x32>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80059e0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80059e4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80059e8:	0089      	lsls	r1, r1, #2
 80059ea:	3110      	adds	r1, #16
 80059ec:	4431      	add	r1, r6
 80059ee:	3104      	adds	r1, #4
 80059f0:	e7e9      	b.n	80059c6 <USBD_StdEPReq+0x126>
        if ((ep_addr & 0x80U) == 0x80U)
 80059f2:	b25b      	sxtb	r3, r3
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	db1f      	blt.n	8005a38 <USBD_StdEPReq+0x198>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80059f8:	f001 020f 	and.w	r2, r1, #15
 80059fc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005a00:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005a04:	f8b2 2164 	ldrh.w	r2, [r2, #356]	; 0x164
 8005a08:	b322      	cbz	r2, 8005a54 <USBD_StdEPReq+0x1b4>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	db27      	blt.n	8005a5e <USBD_StdEPReq+0x1be>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005a0e:	f001 037f 	and.w	r3, r1, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a12:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005a16:	009c      	lsls	r4, r3, #2
 8005a18:	f504 74a8 	add.w	r4, r4, #336	; 0x150
 8005a1c:	4434      	add	r4, r6
 8005a1e:	3404      	adds	r4, #4
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005a20:	b109      	cbz	r1, 8005a26 <USBD_StdEPReq+0x186>
 8005a22:	2980      	cmp	r1, #128	; 0x80
 8005a24:	d124      	bne.n	8005a70 <USBD_StdEPReq+0x1d0>
            pep->status = 0x0000U;
 8005a26:	2300      	movs	r3, #0
 8005a28:	6023      	str	r3, [r4, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005a2a:	2202      	movs	r2, #2
 8005a2c:	4621      	mov	r1, r4
 8005a2e:	4630      	mov	r0, r6
 8005a30:	f000 f845 	bl	8005abe <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8005a34:	463c      	mov	r4, r7
          break;
 8005a36:	e74c      	b.n	80058d2 <USBD_StdEPReq+0x32>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005a38:	f001 020f 	and.w	r2, r1, #15
 8005a3c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005a40:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005a44:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8005a46:	2a00      	cmp	r2, #0
 8005a48:	d1df      	bne.n	8005a0a <USBD_StdEPReq+0x16a>
            USBD_CtlError(pdev, req);
 8005a4a:	4629      	mov	r1, r5
 8005a4c:	f7ff fd16 	bl	800547c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8005a50:	463c      	mov	r4, r7
            break;
 8005a52:	e73e      	b.n	80058d2 <USBD_StdEPReq+0x32>
            USBD_CtlError(pdev, req);
 8005a54:	4629      	mov	r1, r5
 8005a56:	f7ff fd11 	bl	800547c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8005a5a:	463c      	mov	r4, r7
            break;
 8005a5c:	e739      	b.n	80058d2 <USBD_StdEPReq+0x32>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a5e:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8005a62:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005a66:	009c      	lsls	r4, r3, #2
 8005a68:	3410      	adds	r4, #16
 8005a6a:	4434      	add	r4, r6
 8005a6c:	3404      	adds	r4, #4
 8005a6e:	e7d7      	b.n	8005a20 <USBD_StdEPReq+0x180>
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005a70:	4630      	mov	r0, r6
 8005a72:	f000 fa79 	bl	8005f68 <USBD_LL_IsStallEP>
 8005a76:	b110      	cbz	r0, 8005a7e <USBD_StdEPReq+0x1de>
            pep->status = 0x0001U;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	6023      	str	r3, [r4, #0]
 8005a7c:	e7d5      	b.n	8005a2a <USBD_StdEPReq+0x18a>
            pep->status = 0x0000U;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	6023      	str	r3, [r4, #0]
 8005a82:	e7d2      	b.n	8005a2a <USBD_StdEPReq+0x18a>

08005a84 <USBD_GetString>:
  if (desc == NULL)
 8005a84:	b1d0      	cbz	r0, 8005abc <USBD_GetString+0x38>
{
 8005a86:	b570      	push	{r4, r5, r6, lr}
 8005a88:	460d      	mov	r5, r1
 8005a8a:	4616      	mov	r6, r2
 8005a8c:	4604      	mov	r4, r0
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005a8e:	f7ff fccd 	bl	800542c <USBD_GetLen>
 8005a92:	1c43      	adds	r3, r0, #1
 8005a94:	005b      	lsls	r3, r3, #1
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	8033      	strh	r3, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 8005a9a:	702b      	strb	r3, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	706b      	strb	r3, [r5, #1]
  idx++;
 8005aa0:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 8005aa2:	e007      	b.n	8005ab4 <USBD_GetString+0x30>
    unicode[idx] = *pdesc;
 8005aa4:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 8005aa6:	3401      	adds	r4, #1
    idx++;
 8005aa8:	1c5a      	adds	r2, r3, #1
 8005aaa:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 8005aac:	2100      	movs	r1, #0
 8005aae:	54a9      	strb	r1, [r5, r2]
    idx++;
 8005ab0:	3302      	adds	r3, #2
 8005ab2:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 8005ab4:	7822      	ldrb	r2, [r4, #0]
 8005ab6:	2a00      	cmp	r2, #0
 8005ab8:	d1f4      	bne.n	8005aa4 <USBD_GetString+0x20>
}
 8005aba:	bd70      	pop	{r4, r5, r6, pc}
 8005abc:	4770      	bx	lr

08005abe <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005abe:	b508      	push	{r3, lr}
 8005ac0:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005ac2:	2202      	movs	r2, #2
 8005ac4:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005ac8:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length = len;
 8005aca:	61c3      	str	r3, [r0, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005acc:	460a      	mov	r2, r1
 8005ace:	2100      	movs	r1, #0
 8005ad0:	f000 faa4 	bl	800601c <USBD_LL_Transmit>

  return USBD_OK;
}
 8005ad4:	2000      	movs	r0, #0
 8005ad6:	bd08      	pop	{r3, pc}

08005ad8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005ad8:	b508      	push	{r3, lr}
 8005ada:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005adc:	460a      	mov	r2, r1
 8005ade:	2100      	movs	r1, #0
 8005ae0:	f000 fa9c 	bl	800601c <USBD_LL_Transmit>

  return USBD_OK;
}
 8005ae4:	2000      	movs	r0, #0
 8005ae6:	bd08      	pop	{r3, pc}

08005ae8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005ae8:	b508      	push	{r3, lr}
 8005aea:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005aec:	2203      	movs	r2, #3
 8005aee:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005af2:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8005af6:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005afa:	460a      	mov	r2, r1
 8005afc:	2100      	movs	r1, #0
 8005afe:	f000 fa95 	bl	800602c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005b02:	2000      	movs	r0, #0
 8005b04:	bd08      	pop	{r3, pc}

08005b06 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005b06:	b508      	push	{r3, lr}
 8005b08:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005b0a:	460a      	mov	r2, r1
 8005b0c:	2100      	movs	r1, #0
 8005b0e:	f000 fa8d 	bl	800602c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005b12:	2000      	movs	r0, #0
 8005b14:	bd08      	pop	{r3, pc}

08005b16 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005b16:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005b18:	2304      	movs	r3, #4
 8005b1a:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005b1e:	2300      	movs	r3, #0
 8005b20:	461a      	mov	r2, r3
 8005b22:	4619      	mov	r1, r3
 8005b24:	f000 fa7a 	bl	800601c <USBD_LL_Transmit>

  return USBD_OK;
}
 8005b28:	2000      	movs	r0, #0
 8005b2a:	bd08      	pop	{r3, pc}

08005b2c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005b2c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005b2e:	2305      	movs	r3, #5
 8005b30:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b34:	2300      	movs	r3, #0
 8005b36:	461a      	mov	r2, r3
 8005b38:	4619      	mov	r1, r3
 8005b3a:	f000 fa77 	bl	800602c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005b3e:	2000      	movs	r0, #0
 8005b40:	bd08      	pop	{r3, pc}
	...

08005b44 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005b44:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005b46:	2200      	movs	r2, #0
 8005b48:	490f      	ldr	r1, [pc, #60]	; (8005b88 <MX_USB_DEVICE_Init+0x44>)
 8005b4a:	4810      	ldr	r0, [pc, #64]	; (8005b8c <MX_USB_DEVICE_Init+0x48>)
 8005b4c:	f7ff fb08 	bl	8005160 <USBD_Init>
 8005b50:	b970      	cbnz	r0, 8005b70 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005b52:	490f      	ldr	r1, [pc, #60]	; (8005b90 <MX_USB_DEVICE_Init+0x4c>)
 8005b54:	480d      	ldr	r0, [pc, #52]	; (8005b8c <MX_USB_DEVICE_Init+0x48>)
 8005b56:	f7ff fb1f 	bl	8005198 <USBD_RegisterClass>
 8005b5a:	b960      	cbnz	r0, 8005b76 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005b5c:	490d      	ldr	r1, [pc, #52]	; (8005b94 <MX_USB_DEVICE_Init+0x50>)
 8005b5e:	480b      	ldr	r0, [pc, #44]	; (8005b8c <MX_USB_DEVICE_Init+0x48>)
 8005b60:	f7ff fab6 	bl	80050d0 <USBD_CDC_RegisterInterface>
 8005b64:	b950      	cbnz	r0, 8005b7c <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005b66:	4809      	ldr	r0, [pc, #36]	; (8005b8c <MX_USB_DEVICE_Init+0x48>)
 8005b68:	f7ff fb2a 	bl	80051c0 <USBD_Start>
 8005b6c:	b948      	cbnz	r0, 8005b82 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005b6e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8005b70:	f7fb f8b4 	bl	8000cdc <Error_Handler>
 8005b74:	e7ed      	b.n	8005b52 <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 8005b76:	f7fb f8b1 	bl	8000cdc <Error_Handler>
 8005b7a:	e7ef      	b.n	8005b5c <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8005b7c:	f7fb f8ae 	bl	8000cdc <Error_Handler>
 8005b80:	e7f1      	b.n	8005b66 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8005b82:	f7fb f8ab 	bl	8000cdc <Error_Handler>
}
 8005b86:	e7f2      	b.n	8005b6e <MX_USB_DEVICE_Init+0x2a>
 8005b88:	200001a0 	.word	0x200001a0
 8005b8c:	200004c4 	.word	0x200004c4
 8005b90:	2000007c 	.word	0x2000007c
 8005b94:	2000018c 	.word	0x2000018c

08005b98 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8005b98:	2000      	movs	r0, #0
 8005b9a:	4770      	bx	lr

08005b9c <CDC_Control_FS>:
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
  /* USER CODE BEGIN 5 */
//	USBD_CDC_LineCodingTypeDef *comPortConfig = (USBD_CDC_LineCodingTypeDef *)pbuf;

  switch(cmd)
 8005b9c:	2820      	cmp	r0, #32
 8005b9e:	d00a      	beq.n	8005bb6 <CDC_Control_FS+0x1a>
 8005ba0:	2821      	cmp	r0, #33	; 0x21
 8005ba2:	d011      	beq.n	8005bc8 <CDC_Control_FS+0x2c>
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8005ba4:	2000      	movs	r0, #0
 8005ba6:	4770      	bx	lr
    		lineCoding[i] = pbuf[i]; //save line coding
 8005ba8:	5cc8      	ldrb	r0, [r1, r3]
 8005baa:	4a08      	ldr	r2, [pc, #32]	; (8005bcc <CDC_Control_FS+0x30>)
 8005bac:	54d0      	strb	r0, [r2, r3]
    	for(int i=0; i<7;i++)
 8005bae:	3301      	adds	r3, #1
 8005bb0:	2b06      	cmp	r3, #6
 8005bb2:	ddf9      	ble.n	8005ba8 <CDC_Control_FS+0xc>
 8005bb4:	e7f6      	b.n	8005ba4 <CDC_Control_FS+0x8>
  switch(cmd)
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	e7fa      	b.n	8005bb0 <CDC_Control_FS+0x14>
    		pbuf[i] = lineCoding[i]; //retrieve saved line coding
 8005bba:	4a04      	ldr	r2, [pc, #16]	; (8005bcc <CDC_Control_FS+0x30>)
 8005bbc:	5cd2      	ldrb	r2, [r2, r3]
 8005bbe:	54ca      	strb	r2, [r1, r3]
    	for(int i=0; i<7;i++)
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	2b06      	cmp	r3, #6
 8005bc4:	ddf9      	ble.n	8005bba <CDC_Control_FS+0x1e>
 8005bc6:	e7ed      	b.n	8005ba4 <CDC_Control_FS+0x8>
  switch(cmd)
 8005bc8:	2300      	movs	r3, #0
 8005bca:	e7fa      	b.n	8005bc2 <CDC_Control_FS+0x26>
 8005bcc:	20001794 	.word	0x20001794

08005bd0 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8005bd0:	2000      	movs	r0, #0
 8005bd2:	4770      	bx	lr

08005bd4 <CDC_Receive_FS>:
{
 8005bd4:	b538      	push	{r3, r4, r5, lr}
 8005bd6:	4604      	mov	r4, r0
  strncpy(rxBuf, Buf, *Len);	//copy incoming USB to rxBuf for use in main
 8005bd8:	680a      	ldr	r2, [r1, #0]
 8005bda:	4601      	mov	r1, r0
 8005bdc:	4806      	ldr	r0, [pc, #24]	; (8005bf8 <CDC_Receive_FS+0x24>)
 8005bde:	f000 fb7f 	bl	80062e0 <strncpy>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005be2:	4d06      	ldr	r5, [pc, #24]	; (8005bfc <CDC_Receive_FS+0x28>)
 8005be4:	4621      	mov	r1, r4
 8005be6:	4628      	mov	r0, r5
 8005be8:	f7ff fa81 	bl	80050ee <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005bec:	4628      	mov	r0, r5
 8005bee:	f7ff fa9e 	bl	800512e <USBD_CDC_ReceivePacket>
}
 8005bf2:	2000      	movs	r0, #0
 8005bf4:	bd38      	pop	{r3, r4, r5, pc}
 8005bf6:	bf00      	nop
 8005bf8:	20000448 	.word	0x20000448
 8005bfc:	200004c4 	.word	0x200004c4

08005c00 <CDC_Init_FS>:
{
 8005c00:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005c02:	4c06      	ldr	r4, [pc, #24]	; (8005c1c <CDC_Init_FS+0x1c>)
 8005c04:	2200      	movs	r2, #0
 8005c06:	4906      	ldr	r1, [pc, #24]	; (8005c20 <CDC_Init_FS+0x20>)
 8005c08:	4620      	mov	r0, r4
 8005c0a:	f7ff fa68 	bl	80050de <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005c0e:	4905      	ldr	r1, [pc, #20]	; (8005c24 <CDC_Init_FS+0x24>)
 8005c10:	4620      	mov	r0, r4
 8005c12:	f7ff fa6c 	bl	80050ee <USBD_CDC_SetRxBuffer>
}
 8005c16:	2000      	movs	r0, #0
 8005c18:	bd10      	pop	{r4, pc}
 8005c1a:	bf00      	nop
 8005c1c:	200004c4 	.word	0x200004c4
 8005c20:	20000f94 	.word	0x20000f94
 8005c24:	20000794 	.word	0x20000794

08005c28 <CDC_Transmit_FS>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005c28:	4b09      	ldr	r3, [pc, #36]	; (8005c50 <CDC_Transmit_FS+0x28>)
 8005c2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
  if (hcdc->TxState != 0){
 8005c2e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005c32:	b10b      	cbz	r3, 8005c38 <CDC_Transmit_FS+0x10>
    return USBD_BUSY;
 8005c34:	2001      	movs	r0, #1
}
 8005c36:	4770      	bx	lr
{
 8005c38:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005c3a:	4c05      	ldr	r4, [pc, #20]	; (8005c50 <CDC_Transmit_FS+0x28>)
 8005c3c:	460a      	mov	r2, r1
 8005c3e:	4601      	mov	r1, r0
 8005c40:	4620      	mov	r0, r4
 8005c42:	f7ff fa4c 	bl	80050de <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005c46:	4620      	mov	r0, r4
 8005c48:	f7ff fa57 	bl	80050fa <USBD_CDC_TransmitPacket>
}
 8005c4c:	bd10      	pop	{r4, pc}
 8005c4e:	bf00      	nop
 8005c50:	200004c4 	.word	0x200004c4

08005c54 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005c54:	2312      	movs	r3, #18
 8005c56:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8005c58:	4800      	ldr	r0, [pc, #0]	; (8005c5c <USBD_FS_DeviceDescriptor+0x8>)
 8005c5a:	4770      	bx	lr
 8005c5c:	200001bc 	.word	0x200001bc

08005c60 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005c60:	2304      	movs	r3, #4
 8005c62:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8005c64:	4800      	ldr	r0, [pc, #0]	; (8005c68 <USBD_FS_LangIDStrDescriptor+0x8>)
 8005c66:	4770      	bx	lr
 8005c68:	200001d0 	.word	0x200001d0

08005c6c <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d21e      	bcs.n	8005cb0 <IntToUnicode+0x44>
{
 8005c72:	b500      	push	{lr}
 8005c74:	e010      	b.n	8005c98 <IntToUnicode+0x2c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005c76:	f10c 0c37 	add.w	ip, ip, #55	; 0x37
 8005c7a:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }

    value = value << 4;
 8005c7e:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 8005c80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005c84:	f10c 0c01 	add.w	ip, ip, #1
 8005c88:	f04f 0e00 	mov.w	lr, #0
 8005c8c:	f801 e00c 	strb.w	lr, [r1, ip]
  for (idx = 0; idx < len; idx++)
 8005c90:	3301      	adds	r3, #1
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d209      	bcs.n	8005cac <IntToUnicode+0x40>
    if (((value >> 28)) < 0xA)
 8005c98:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 8005c9c:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
 8005ca0:	d2e9      	bcs.n	8005c76 <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 8005ca2:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8005ca6:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 8005caa:	e7e8      	b.n	8005c7e <IntToUnicode+0x12>
  }
}
 8005cac:	f85d fb04 	ldr.w	pc, [sp], #4
 8005cb0:	4770      	bx	lr
	...

08005cb4 <Get_SerialNum>:
{
 8005cb4:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005cb6:	4b0b      	ldr	r3, [pc, #44]	; (8005ce4 <Get_SerialNum+0x30>)
 8005cb8:	f8d3 0a10 	ldr.w	r0, [r3, #2576]	; 0xa10
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005cbc:	f8d3 4a14 	ldr.w	r4, [r3, #2580]	; 0xa14
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005cc0:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	; 0xa18
  if (deviceserial0 != 0)
 8005cc4:	18c0      	adds	r0, r0, r3
 8005cc6:	d100      	bne.n	8005cca <Get_SerialNum+0x16>
}
 8005cc8:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005cca:	4d07      	ldr	r5, [pc, #28]	; (8005ce8 <Get_SerialNum+0x34>)
 8005ccc:	2208      	movs	r2, #8
 8005cce:	1ca9      	adds	r1, r5, #2
 8005cd0:	f7ff ffcc 	bl	8005c6c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005cd4:	2204      	movs	r2, #4
 8005cd6:	f105 0112 	add.w	r1, r5, #18
 8005cda:	4620      	mov	r0, r4
 8005cdc:	f7ff ffc6 	bl	8005c6c <IntToUnicode>
}
 8005ce0:	e7f2      	b.n	8005cc8 <Get_SerialNum+0x14>
 8005ce2:	bf00      	nop
 8005ce4:	1fff7000 	.word	0x1fff7000
 8005ce8:	200001d4 	.word	0x200001d4

08005cec <USBD_FS_SerialStrDescriptor>:
{
 8005cec:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8005cee:	231a      	movs	r3, #26
 8005cf0:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 8005cf2:	f7ff ffdf 	bl	8005cb4 <Get_SerialNum>
}
 8005cf6:	4801      	ldr	r0, [pc, #4]	; (8005cfc <USBD_FS_SerialStrDescriptor+0x10>)
 8005cf8:	bd08      	pop	{r3, pc}
 8005cfa:	bf00      	nop
 8005cfc:	200001d4 	.word	0x200001d4

08005d00 <USBD_FS_ProductStrDescriptor>:
{
 8005d00:	b508      	push	{r3, lr}
 8005d02:	460a      	mov	r2, r1
  if(speed == 0)
 8005d04:	b928      	cbnz	r0, 8005d12 <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005d06:	4905      	ldr	r1, [pc, #20]	; (8005d1c <USBD_FS_ProductStrDescriptor+0x1c>)
 8005d08:	4805      	ldr	r0, [pc, #20]	; (8005d20 <USBD_FS_ProductStrDescriptor+0x20>)
 8005d0a:	f7ff febb 	bl	8005a84 <USBD_GetString>
}
 8005d0e:	4803      	ldr	r0, [pc, #12]	; (8005d1c <USBD_FS_ProductStrDescriptor+0x1c>)
 8005d10:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005d12:	4902      	ldr	r1, [pc, #8]	; (8005d1c <USBD_FS_ProductStrDescriptor+0x1c>)
 8005d14:	4802      	ldr	r0, [pc, #8]	; (8005d20 <USBD_FS_ProductStrDescriptor+0x20>)
 8005d16:	f7ff feb5 	bl	8005a84 <USBD_GetString>
 8005d1a:	e7f8      	b.n	8005d0e <USBD_FS_ProductStrDescriptor+0xe>
 8005d1c:	2000179c 	.word	0x2000179c
 8005d20:	08006a2c 	.word	0x08006a2c

08005d24 <USBD_FS_ManufacturerStrDescriptor>:
{
 8005d24:	b510      	push	{r4, lr}
 8005d26:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005d28:	4c03      	ldr	r4, [pc, #12]	; (8005d38 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8005d2a:	4621      	mov	r1, r4
 8005d2c:	4803      	ldr	r0, [pc, #12]	; (8005d3c <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8005d2e:	f7ff fea9 	bl	8005a84 <USBD_GetString>
}
 8005d32:	4620      	mov	r0, r4
 8005d34:	bd10      	pop	{r4, pc}
 8005d36:	bf00      	nop
 8005d38:	2000179c 	.word	0x2000179c
 8005d3c:	08006a44 	.word	0x08006a44

08005d40 <USBD_FS_ConfigStrDescriptor>:
{
 8005d40:	b508      	push	{r3, lr}
 8005d42:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8005d44:	b928      	cbnz	r0, 8005d52 <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005d46:	4905      	ldr	r1, [pc, #20]	; (8005d5c <USBD_FS_ConfigStrDescriptor+0x1c>)
 8005d48:	4805      	ldr	r0, [pc, #20]	; (8005d60 <USBD_FS_ConfigStrDescriptor+0x20>)
 8005d4a:	f7ff fe9b 	bl	8005a84 <USBD_GetString>
}
 8005d4e:	4803      	ldr	r0, [pc, #12]	; (8005d5c <USBD_FS_ConfigStrDescriptor+0x1c>)
 8005d50:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005d52:	4902      	ldr	r1, [pc, #8]	; (8005d5c <USBD_FS_ConfigStrDescriptor+0x1c>)
 8005d54:	4802      	ldr	r0, [pc, #8]	; (8005d60 <USBD_FS_ConfigStrDescriptor+0x20>)
 8005d56:	f7ff fe95 	bl	8005a84 <USBD_GetString>
 8005d5a:	e7f8      	b.n	8005d4e <USBD_FS_ConfigStrDescriptor+0xe>
 8005d5c:	2000179c 	.word	0x2000179c
 8005d60:	08006a58 	.word	0x08006a58

08005d64 <USBD_FS_InterfaceStrDescriptor>:
{
 8005d64:	b508      	push	{r3, lr}
 8005d66:	460a      	mov	r2, r1
  if(speed == 0)
 8005d68:	b928      	cbnz	r0, 8005d76 <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005d6a:	4905      	ldr	r1, [pc, #20]	; (8005d80 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8005d6c:	4805      	ldr	r0, [pc, #20]	; (8005d84 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8005d6e:	f7ff fe89 	bl	8005a84 <USBD_GetString>
}
 8005d72:	4803      	ldr	r0, [pc, #12]	; (8005d80 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8005d74:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005d76:	4902      	ldr	r1, [pc, #8]	; (8005d80 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8005d78:	4802      	ldr	r0, [pc, #8]	; (8005d84 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8005d7a:	f7ff fe83 	bl	8005a84 <USBD_GetString>
 8005d7e:	e7f8      	b.n	8005d72 <USBD_FS_InterfaceStrDescriptor+0xe>
 8005d80:	2000179c 	.word	0x2000179c
 8005d84:	08006a64 	.word	0x08006a64

08005d88 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005d88:	b570      	push	{r4, r5, r6, lr}
 8005d8a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	9303      	str	r3, [sp, #12]
 8005d90:	9304      	str	r3, [sp, #16]
 8005d92:	9305      	str	r3, [sp, #20]
 8005d94:	9306      	str	r3, [sp, #24]
 8005d96:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 8005d98:	6803      	ldr	r3, [r0, #0]
 8005d9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d9e:	d001      	beq.n	8005da4 <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005da0:	b008      	add	sp, #32
 8005da2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005da4:	2500      	movs	r5, #0
 8005da6:	9501      	str	r5, [sp, #4]
 8005da8:	4c1a      	ldr	r4, [pc, #104]	; (8005e14 <HAL_PCD_MspInit+0x8c>)
 8005daa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005dac:	f043 0301 	orr.w	r3, r3, #1
 8005db0:	6323      	str	r3, [r4, #48]	; 0x30
 8005db2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005db4:	f003 0301 	and.w	r3, r3, #1
 8005db8:	9301      	str	r3, [sp, #4]
 8005dba:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8005dbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005dc0:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8005dc2:	4e15      	ldr	r6, [pc, #84]	; (8005e18 <HAL_PCD_MspInit+0x90>)
 8005dc4:	a903      	add	r1, sp, #12
 8005dc6:	4630      	mov	r0, r6
 8005dc8:	f7fc f97c 	bl	80020c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8005dcc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005dd0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dd2:	2302      	movs	r3, #2
 8005dd4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dd6:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005dd8:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005dda:	230a      	movs	r3, #10
 8005ddc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dde:	a903      	add	r1, sp, #12
 8005de0:	4630      	mov	r0, r6
 8005de2:	f7fc f96f 	bl	80020c4 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005de6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dec:	6363      	str	r3, [r4, #52]	; 0x34
 8005dee:	9502      	str	r5, [sp, #8]
 8005df0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005df2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005df6:	6463      	str	r3, [r4, #68]	; 0x44
 8005df8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dfe:	9302      	str	r3, [sp, #8]
 8005e00:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8005e02:	462a      	mov	r2, r5
 8005e04:	4629      	mov	r1, r5
 8005e06:	2043      	movs	r0, #67	; 0x43
 8005e08:	f7fb ff44 	bl	8001c94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005e0c:	2043      	movs	r0, #67	; 0x43
 8005e0e:	f7fb ff79 	bl	8001d04 <HAL_NVIC_EnableIRQ>
}
 8005e12:	e7c5      	b.n	8005da0 <HAL_PCD_MspInit+0x18>
 8005e14:	40023800 	.word	0x40023800
 8005e18:	40020000 	.word	0x40020000

08005e1c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005e1c:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005e1e:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8005e22:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8005e26:	f7ff f9e0 	bl	80051ea <USBD_LL_SetupStage>
}
 8005e2a:	bd08      	pop	{r3, pc}

08005e2c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005e2c:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005e2e:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8005e32:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005e36:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005e3a:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8005e3e:	f7ff fa00 	bl	8005242 <USBD_LL_DataOutStage>
}
 8005e42:	bd08      	pop	{r3, pc}

08005e44 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005e44:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005e46:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8005e4a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005e4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e50:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8005e54:	f7ff fa2e 	bl	80052b4 <USBD_LL_DataInStage>
}
 8005e58:	bd08      	pop	{r3, pc}

08005e5a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005e5a:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005e5c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8005e60:	f7ff fac4 	bl	80053ec <USBD_LL_SOF>
}
 8005e64:	bd08      	pop	{r3, pc}

08005e66 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005e66:	b510      	push	{r4, lr}
 8005e68:	4604      	mov	r4, r0
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8005e6a:	68c3      	ldr	r3, [r0, #12]
 8005e6c:	b13b      	cbz	r3, 8005e7e <HAL_PCD_ResetCallback+0x18>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d101      	bne.n	8005e76 <HAL_PCD_ResetCallback+0x10>
  {
    speed = USBD_SPEED_FULL;
 8005e72:	2101      	movs	r1, #1
 8005e74:	e004      	b.n	8005e80 <HAL_PCD_ResetCallback+0x1a>
  }
  else
  {
    Error_Handler();
 8005e76:	f7fa ff31 	bl	8000cdc <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005e7a:	2101      	movs	r1, #1
 8005e7c:	e000      	b.n	8005e80 <HAL_PCD_ResetCallback+0x1a>
    speed = USBD_SPEED_HIGH;
 8005e7e:	2100      	movs	r1, #0
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005e80:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8005e84:	f7ff fa9b 	bl	80053be <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005e88:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8005e8c:	f7ff fa6e 	bl	800536c <USBD_LL_Reset>
}
 8005e90:	bd10      	pop	{r4, pc}
	...

08005e94 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005e94:	b510      	push	{r4, lr}
 8005e96:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005e98:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8005e9c:	f7ff fa92 	bl	80053c4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8005ea0:	6822      	ldr	r2, [r4, #0]
 8005ea2:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8005ea6:	f043 0301 	orr.w	r3, r3, #1
 8005eaa:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005eae:	6a23      	ldr	r3, [r4, #32]
 8005eb0:	b123      	cbz	r3, 8005ebc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005eb2:	4a03      	ldr	r2, [pc, #12]	; (8005ec0 <HAL_PCD_SuspendCallback+0x2c>)
 8005eb4:	6913      	ldr	r3, [r2, #16]
 8005eb6:	f043 0306 	orr.w	r3, r3, #6
 8005eba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005ebc:	bd10      	pop	{r4, pc}
 8005ebe:	bf00      	nop
 8005ec0:	e000ed00 	.word	0xe000ed00

08005ec4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005ec4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005ec6:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8005eca:	f7ff fa84 	bl	80053d6 <USBD_LL_Resume>
}
 8005ece:	bd08      	pop	{r3, pc}

08005ed0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005ed0:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005ed2:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8005ed6:	f7ff fa99 	bl	800540c <USBD_LL_IsoOUTIncomplete>
}
 8005eda:	bd08      	pop	{r3, pc}

08005edc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005edc:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005ede:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8005ee2:	f7ff fa91 	bl	8005408 <USBD_LL_IsoINIncomplete>
}
 8005ee6:	bd08      	pop	{r3, pc}

08005ee8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005ee8:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8005eea:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8005eee:	f7ff fa8f 	bl	8005410 <USBD_LL_DevConnected>
}
 8005ef2:	bd08      	pop	{r3, pc}

08005ef4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005ef4:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8005ef6:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8005efa:	f7ff fa8b 	bl	8005414 <USBD_LL_DevDisconnected>
}
 8005efe:	bd08      	pop	{r3, pc}

08005f00 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8005f00:	7802      	ldrb	r2, [r0, #0]
 8005f02:	b10a      	cbz	r2, 8005f08 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 8005f04:	2000      	movs	r0, #0
 8005f06:	4770      	bx	lr
{
 8005f08:	b510      	push	{r4, lr}
 8005f0a:	4603      	mov	r3, r0
  hpcd_USB_OTG_FS.pData = pdev;
 8005f0c:	4815      	ldr	r0, [pc, #84]	; (8005f64 <USBD_LL_Init+0x64>)
 8005f0e:	f8c0 3404 	str.w	r3, [r0, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8005f12:	f8c3 02c4 	str.w	r0, [r3, #708]	; 0x2c4
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005f16:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005f1a:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8005f1c:	2304      	movs	r3, #4
 8005f1e:	6043      	str	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8005f20:	2202      	movs	r2, #2
 8005f22:	60c2      	str	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005f24:	2300      	movs	r3, #0
 8005f26:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005f28:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8005f2a:	61c3      	str	r3, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8005f2c:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8005f2e:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8005f30:	2201      	movs	r2, #1
 8005f32:	62c2      	str	r2, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8005f34:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8005f36:	f7fc fe9b 	bl	8002c70 <HAL_PCD_Init>
 8005f3a:	b980      	cbnz	r0, 8005f5e <USBD_LL_Init+0x5e>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8005f3c:	4c09      	ldr	r4, [pc, #36]	; (8005f64 <USBD_LL_Init+0x64>)
 8005f3e:	2180      	movs	r1, #128	; 0x80
 8005f40:	4620      	mov	r0, r4
 8005f42:	f7fd fbc8 	bl	80036d6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8005f46:	2240      	movs	r2, #64	; 0x40
 8005f48:	2100      	movs	r1, #0
 8005f4a:	4620      	mov	r0, r4
 8005f4c:	f7fd fb9d 	bl	800368a <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8005f50:	2280      	movs	r2, #128	; 0x80
 8005f52:	2101      	movs	r1, #1
 8005f54:	4620      	mov	r0, r4
 8005f56:	f7fd fb98 	bl	800368a <HAL_PCDEx_SetTxFiFo>
}
 8005f5a:	2000      	movs	r0, #0
 8005f5c:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8005f5e:	f7fa febd 	bl	8000cdc <Error_Handler>
 8005f62:	e7eb      	b.n	8005f3c <USBD_LL_Init+0x3c>
 8005f64:	2000199c 	.word	0x2000199c

08005f68 <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005f68:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4

  if((ep_addr & 0x80) == 0x80)
 8005f6c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005f70:	d108      	bne.n	8005f84 <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8005f72:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8005f76:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8005f7a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8005f7e:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
  }
}
 8005f82:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8005f84:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8005f88:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8005f8c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8005f90:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 8005f94:	4770      	bx	lr

08005f96 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005f96:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8005f98:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8005f9c:	f7fd fabe 	bl	800351c <HAL_PCD_EP_GetRxCount>
}
 8005fa0:	bd08      	pop	{r3, pc}

08005fa2 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8005fa2:	2803      	cmp	r0, #3
 8005fa4:	d805      	bhi.n	8005fb2 <USBD_Get_USB_Status+0x10>
 8005fa6:	e8df f000 	tbb	[pc, r0]
 8005faa:	0405      	.short	0x0405
 8005fac:	0502      	.short	0x0502
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005fae:	2001      	movs	r0, #1
    break;
 8005fb0:	4770      	bx	lr
      usb_status = USBD_FAIL;
 8005fb2:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8005fb4:	4770      	bx	lr

08005fb6 <USBD_LL_Start>:
{
 8005fb6:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8005fb8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8005fbc:	f7fc feef 	bl	8002d9e <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005fc0:	f7ff ffef 	bl	8005fa2 <USBD_Get_USB_Status>
}
 8005fc4:	bd08      	pop	{r3, pc}

08005fc6 <USBD_LL_OpenEP>:
{
 8005fc6:	b508      	push	{r3, lr}
 8005fc8:	4694      	mov	ip, r2
 8005fca:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005fcc:	4663      	mov	r3, ip
 8005fce:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8005fd2:	f7fd f9f6 	bl	80033c2 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005fd6:	f7ff ffe4 	bl	8005fa2 <USBD_Get_USB_Status>
}
 8005fda:	bd08      	pop	{r3, pc}

08005fdc <USBD_LL_CloseEP>:
{
 8005fdc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005fde:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8005fe2:	f7fd fa33 	bl	800344c <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005fe6:	f7ff ffdc 	bl	8005fa2 <USBD_Get_USB_Status>
}
 8005fea:	bd08      	pop	{r3, pc}

08005fec <USBD_LL_StallEP>:
{
 8005fec:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005fee:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8005ff2:	f7fd facb 	bl	800358c <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005ff6:	f7ff ffd4 	bl	8005fa2 <USBD_Get_USB_Status>
}
 8005ffa:	bd08      	pop	{r3, pc}

08005ffc <USBD_LL_ClearStallEP>:
{
 8005ffc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8005ffe:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006002:	f7fd fb07 	bl	8003614 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006006:	f7ff ffcc 	bl	8005fa2 <USBD_Get_USB_Status>
}
 800600a:	bd08      	pop	{r3, pc}

0800600c <USBD_LL_SetUSBAddress>:
{
 800600c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800600e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006012:	f7fd f9c2 	bl	800339a <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006016:	f7ff ffc4 	bl	8005fa2 <USBD_Get_USB_Status>
}
 800601a:	bd08      	pop	{r3, pc}

0800601c <USBD_LL_Transmit>:
{
 800601c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800601e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006022:	f7fd fa84 	bl	800352e <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006026:	f7ff ffbc 	bl	8005fa2 <USBD_Get_USB_Status>
}
 800602a:	bd08      	pop	{r3, pc}

0800602c <USBD_LL_PrepareReceive>:
{
 800602c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800602e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006032:	f7fd fa44 	bl	80034be <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006036:	f7ff ffb4 	bl	8005fa2 <USBD_Get_USB_Status>
}
 800603a:	bd08      	pop	{r3, pc}

0800603c <__errno>:
 800603c:	4b01      	ldr	r3, [pc, #4]	; (8006044 <__errno+0x8>)
 800603e:	6818      	ldr	r0, [r3, #0]
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop
 8006044:	200001f0 	.word	0x200001f0

08006048 <__libc_init_array>:
 8006048:	b570      	push	{r4, r5, r6, lr}
 800604a:	4d0d      	ldr	r5, [pc, #52]	; (8006080 <__libc_init_array+0x38>)
 800604c:	4c0d      	ldr	r4, [pc, #52]	; (8006084 <__libc_init_array+0x3c>)
 800604e:	1b64      	subs	r4, r4, r5
 8006050:	10a4      	asrs	r4, r4, #2
 8006052:	2600      	movs	r6, #0
 8006054:	42a6      	cmp	r6, r4
 8006056:	d109      	bne.n	800606c <__libc_init_array+0x24>
 8006058:	4d0b      	ldr	r5, [pc, #44]	; (8006088 <__libc_init_array+0x40>)
 800605a:	4c0c      	ldr	r4, [pc, #48]	; (800608c <__libc_init_array+0x44>)
 800605c:	f000 fcb2 	bl	80069c4 <_init>
 8006060:	1b64      	subs	r4, r4, r5
 8006062:	10a4      	asrs	r4, r4, #2
 8006064:	2600      	movs	r6, #0
 8006066:	42a6      	cmp	r6, r4
 8006068:	d105      	bne.n	8006076 <__libc_init_array+0x2e>
 800606a:	bd70      	pop	{r4, r5, r6, pc}
 800606c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006070:	4798      	blx	r3
 8006072:	3601      	adds	r6, #1
 8006074:	e7ee      	b.n	8006054 <__libc_init_array+0xc>
 8006076:	f855 3b04 	ldr.w	r3, [r5], #4
 800607a:	4798      	blx	r3
 800607c:	3601      	adds	r6, #1
 800607e:	e7f2      	b.n	8006066 <__libc_init_array+0x1e>
 8006080:	08006ab0 	.word	0x08006ab0
 8006084:	08006ab0 	.word	0x08006ab0
 8006088:	08006ab0 	.word	0x08006ab0
 800608c:	08006ab4 	.word	0x08006ab4

08006090 <malloc>:
 8006090:	4b02      	ldr	r3, [pc, #8]	; (800609c <malloc+0xc>)
 8006092:	4601      	mov	r1, r0
 8006094:	6818      	ldr	r0, [r3, #0]
 8006096:	f000 b87f 	b.w	8006198 <_malloc_r>
 800609a:	bf00      	nop
 800609c:	200001f0 	.word	0x200001f0

080060a0 <free>:
 80060a0:	4b02      	ldr	r3, [pc, #8]	; (80060ac <free+0xc>)
 80060a2:	4601      	mov	r1, r0
 80060a4:	6818      	ldr	r0, [r3, #0]
 80060a6:	f000 b80b 	b.w	80060c0 <_free_r>
 80060aa:	bf00      	nop
 80060ac:	200001f0 	.word	0x200001f0

080060b0 <memset>:
 80060b0:	4402      	add	r2, r0
 80060b2:	4603      	mov	r3, r0
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d100      	bne.n	80060ba <memset+0xa>
 80060b8:	4770      	bx	lr
 80060ba:	f803 1b01 	strb.w	r1, [r3], #1
 80060be:	e7f9      	b.n	80060b4 <memset+0x4>

080060c0 <_free_r>:
 80060c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060c2:	2900      	cmp	r1, #0
 80060c4:	d044      	beq.n	8006150 <_free_r+0x90>
 80060c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060ca:	9001      	str	r0, [sp, #4]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	f1a1 0404 	sub.w	r4, r1, #4
 80060d2:	bfb8      	it	lt
 80060d4:	18e4      	addlt	r4, r4, r3
 80060d6:	f000 f917 	bl	8006308 <__malloc_lock>
 80060da:	4a1e      	ldr	r2, [pc, #120]	; (8006154 <_free_r+0x94>)
 80060dc:	9801      	ldr	r0, [sp, #4]
 80060de:	6813      	ldr	r3, [r2, #0]
 80060e0:	b933      	cbnz	r3, 80060f0 <_free_r+0x30>
 80060e2:	6063      	str	r3, [r4, #4]
 80060e4:	6014      	str	r4, [r2, #0]
 80060e6:	b003      	add	sp, #12
 80060e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80060ec:	f000 b912 	b.w	8006314 <__malloc_unlock>
 80060f0:	42a3      	cmp	r3, r4
 80060f2:	d908      	bls.n	8006106 <_free_r+0x46>
 80060f4:	6825      	ldr	r5, [r4, #0]
 80060f6:	1961      	adds	r1, r4, r5
 80060f8:	428b      	cmp	r3, r1
 80060fa:	bf01      	itttt	eq
 80060fc:	6819      	ldreq	r1, [r3, #0]
 80060fe:	685b      	ldreq	r3, [r3, #4]
 8006100:	1949      	addeq	r1, r1, r5
 8006102:	6021      	streq	r1, [r4, #0]
 8006104:	e7ed      	b.n	80060e2 <_free_r+0x22>
 8006106:	461a      	mov	r2, r3
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	b10b      	cbz	r3, 8006110 <_free_r+0x50>
 800610c:	42a3      	cmp	r3, r4
 800610e:	d9fa      	bls.n	8006106 <_free_r+0x46>
 8006110:	6811      	ldr	r1, [r2, #0]
 8006112:	1855      	adds	r5, r2, r1
 8006114:	42a5      	cmp	r5, r4
 8006116:	d10b      	bne.n	8006130 <_free_r+0x70>
 8006118:	6824      	ldr	r4, [r4, #0]
 800611a:	4421      	add	r1, r4
 800611c:	1854      	adds	r4, r2, r1
 800611e:	42a3      	cmp	r3, r4
 8006120:	6011      	str	r1, [r2, #0]
 8006122:	d1e0      	bne.n	80060e6 <_free_r+0x26>
 8006124:	681c      	ldr	r4, [r3, #0]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	6053      	str	r3, [r2, #4]
 800612a:	4421      	add	r1, r4
 800612c:	6011      	str	r1, [r2, #0]
 800612e:	e7da      	b.n	80060e6 <_free_r+0x26>
 8006130:	d902      	bls.n	8006138 <_free_r+0x78>
 8006132:	230c      	movs	r3, #12
 8006134:	6003      	str	r3, [r0, #0]
 8006136:	e7d6      	b.n	80060e6 <_free_r+0x26>
 8006138:	6825      	ldr	r5, [r4, #0]
 800613a:	1961      	adds	r1, r4, r5
 800613c:	428b      	cmp	r3, r1
 800613e:	bf04      	itt	eq
 8006140:	6819      	ldreq	r1, [r3, #0]
 8006142:	685b      	ldreq	r3, [r3, #4]
 8006144:	6063      	str	r3, [r4, #4]
 8006146:	bf04      	itt	eq
 8006148:	1949      	addeq	r1, r1, r5
 800614a:	6021      	streq	r1, [r4, #0]
 800614c:	6054      	str	r4, [r2, #4]
 800614e:	e7ca      	b.n	80060e6 <_free_r+0x26>
 8006150:	b003      	add	sp, #12
 8006152:	bd30      	pop	{r4, r5, pc}
 8006154:	20001da4 	.word	0x20001da4

08006158 <sbrk_aligned>:
 8006158:	b570      	push	{r4, r5, r6, lr}
 800615a:	4e0e      	ldr	r6, [pc, #56]	; (8006194 <sbrk_aligned+0x3c>)
 800615c:	460c      	mov	r4, r1
 800615e:	6831      	ldr	r1, [r6, #0]
 8006160:	4605      	mov	r5, r0
 8006162:	b911      	cbnz	r1, 800616a <sbrk_aligned+0x12>
 8006164:	f000 f88c 	bl	8006280 <_sbrk_r>
 8006168:	6030      	str	r0, [r6, #0]
 800616a:	4621      	mov	r1, r4
 800616c:	4628      	mov	r0, r5
 800616e:	f000 f887 	bl	8006280 <_sbrk_r>
 8006172:	1c43      	adds	r3, r0, #1
 8006174:	d00a      	beq.n	800618c <sbrk_aligned+0x34>
 8006176:	1cc4      	adds	r4, r0, #3
 8006178:	f024 0403 	bic.w	r4, r4, #3
 800617c:	42a0      	cmp	r0, r4
 800617e:	d007      	beq.n	8006190 <sbrk_aligned+0x38>
 8006180:	1a21      	subs	r1, r4, r0
 8006182:	4628      	mov	r0, r5
 8006184:	f000 f87c 	bl	8006280 <_sbrk_r>
 8006188:	3001      	adds	r0, #1
 800618a:	d101      	bne.n	8006190 <sbrk_aligned+0x38>
 800618c:	f04f 34ff 	mov.w	r4, #4294967295
 8006190:	4620      	mov	r0, r4
 8006192:	bd70      	pop	{r4, r5, r6, pc}
 8006194:	20001da8 	.word	0x20001da8

08006198 <_malloc_r>:
 8006198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800619c:	1ccd      	adds	r5, r1, #3
 800619e:	f025 0503 	bic.w	r5, r5, #3
 80061a2:	3508      	adds	r5, #8
 80061a4:	2d0c      	cmp	r5, #12
 80061a6:	bf38      	it	cc
 80061a8:	250c      	movcc	r5, #12
 80061aa:	2d00      	cmp	r5, #0
 80061ac:	4607      	mov	r7, r0
 80061ae:	db01      	blt.n	80061b4 <_malloc_r+0x1c>
 80061b0:	42a9      	cmp	r1, r5
 80061b2:	d905      	bls.n	80061c0 <_malloc_r+0x28>
 80061b4:	230c      	movs	r3, #12
 80061b6:	603b      	str	r3, [r7, #0]
 80061b8:	2600      	movs	r6, #0
 80061ba:	4630      	mov	r0, r6
 80061bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061c0:	4e2e      	ldr	r6, [pc, #184]	; (800627c <_malloc_r+0xe4>)
 80061c2:	f000 f8a1 	bl	8006308 <__malloc_lock>
 80061c6:	6833      	ldr	r3, [r6, #0]
 80061c8:	461c      	mov	r4, r3
 80061ca:	bb34      	cbnz	r4, 800621a <_malloc_r+0x82>
 80061cc:	4629      	mov	r1, r5
 80061ce:	4638      	mov	r0, r7
 80061d0:	f7ff ffc2 	bl	8006158 <sbrk_aligned>
 80061d4:	1c43      	adds	r3, r0, #1
 80061d6:	4604      	mov	r4, r0
 80061d8:	d14d      	bne.n	8006276 <_malloc_r+0xde>
 80061da:	6834      	ldr	r4, [r6, #0]
 80061dc:	4626      	mov	r6, r4
 80061de:	2e00      	cmp	r6, #0
 80061e0:	d140      	bne.n	8006264 <_malloc_r+0xcc>
 80061e2:	6823      	ldr	r3, [r4, #0]
 80061e4:	4631      	mov	r1, r6
 80061e6:	4638      	mov	r0, r7
 80061e8:	eb04 0803 	add.w	r8, r4, r3
 80061ec:	f000 f848 	bl	8006280 <_sbrk_r>
 80061f0:	4580      	cmp	r8, r0
 80061f2:	d13a      	bne.n	800626a <_malloc_r+0xd2>
 80061f4:	6821      	ldr	r1, [r4, #0]
 80061f6:	3503      	adds	r5, #3
 80061f8:	1a6d      	subs	r5, r5, r1
 80061fa:	f025 0503 	bic.w	r5, r5, #3
 80061fe:	3508      	adds	r5, #8
 8006200:	2d0c      	cmp	r5, #12
 8006202:	bf38      	it	cc
 8006204:	250c      	movcc	r5, #12
 8006206:	4629      	mov	r1, r5
 8006208:	4638      	mov	r0, r7
 800620a:	f7ff ffa5 	bl	8006158 <sbrk_aligned>
 800620e:	3001      	adds	r0, #1
 8006210:	d02b      	beq.n	800626a <_malloc_r+0xd2>
 8006212:	6823      	ldr	r3, [r4, #0]
 8006214:	442b      	add	r3, r5
 8006216:	6023      	str	r3, [r4, #0]
 8006218:	e00e      	b.n	8006238 <_malloc_r+0xa0>
 800621a:	6822      	ldr	r2, [r4, #0]
 800621c:	1b52      	subs	r2, r2, r5
 800621e:	d41e      	bmi.n	800625e <_malloc_r+0xc6>
 8006220:	2a0b      	cmp	r2, #11
 8006222:	d916      	bls.n	8006252 <_malloc_r+0xba>
 8006224:	1961      	adds	r1, r4, r5
 8006226:	42a3      	cmp	r3, r4
 8006228:	6025      	str	r5, [r4, #0]
 800622a:	bf18      	it	ne
 800622c:	6059      	strne	r1, [r3, #4]
 800622e:	6863      	ldr	r3, [r4, #4]
 8006230:	bf08      	it	eq
 8006232:	6031      	streq	r1, [r6, #0]
 8006234:	5162      	str	r2, [r4, r5]
 8006236:	604b      	str	r3, [r1, #4]
 8006238:	4638      	mov	r0, r7
 800623a:	f104 060b 	add.w	r6, r4, #11
 800623e:	f000 f869 	bl	8006314 <__malloc_unlock>
 8006242:	f026 0607 	bic.w	r6, r6, #7
 8006246:	1d23      	adds	r3, r4, #4
 8006248:	1af2      	subs	r2, r6, r3
 800624a:	d0b6      	beq.n	80061ba <_malloc_r+0x22>
 800624c:	1b9b      	subs	r3, r3, r6
 800624e:	50a3      	str	r3, [r4, r2]
 8006250:	e7b3      	b.n	80061ba <_malloc_r+0x22>
 8006252:	6862      	ldr	r2, [r4, #4]
 8006254:	42a3      	cmp	r3, r4
 8006256:	bf0c      	ite	eq
 8006258:	6032      	streq	r2, [r6, #0]
 800625a:	605a      	strne	r2, [r3, #4]
 800625c:	e7ec      	b.n	8006238 <_malloc_r+0xa0>
 800625e:	4623      	mov	r3, r4
 8006260:	6864      	ldr	r4, [r4, #4]
 8006262:	e7b2      	b.n	80061ca <_malloc_r+0x32>
 8006264:	4634      	mov	r4, r6
 8006266:	6876      	ldr	r6, [r6, #4]
 8006268:	e7b9      	b.n	80061de <_malloc_r+0x46>
 800626a:	230c      	movs	r3, #12
 800626c:	603b      	str	r3, [r7, #0]
 800626e:	4638      	mov	r0, r7
 8006270:	f000 f850 	bl	8006314 <__malloc_unlock>
 8006274:	e7a1      	b.n	80061ba <_malloc_r+0x22>
 8006276:	6025      	str	r5, [r4, #0]
 8006278:	e7de      	b.n	8006238 <_malloc_r+0xa0>
 800627a:	bf00      	nop
 800627c:	20001da4 	.word	0x20001da4

08006280 <_sbrk_r>:
 8006280:	b538      	push	{r3, r4, r5, lr}
 8006282:	4d06      	ldr	r5, [pc, #24]	; (800629c <_sbrk_r+0x1c>)
 8006284:	2300      	movs	r3, #0
 8006286:	4604      	mov	r4, r0
 8006288:	4608      	mov	r0, r1
 800628a:	602b      	str	r3, [r5, #0]
 800628c:	f7fa fea2 	bl	8000fd4 <_sbrk>
 8006290:	1c43      	adds	r3, r0, #1
 8006292:	d102      	bne.n	800629a <_sbrk_r+0x1a>
 8006294:	682b      	ldr	r3, [r5, #0]
 8006296:	b103      	cbz	r3, 800629a <_sbrk_r+0x1a>
 8006298:	6023      	str	r3, [r4, #0]
 800629a:	bd38      	pop	{r3, r4, r5, pc}
 800629c:	20001dac 	.word	0x20001dac

080062a0 <siprintf>:
 80062a0:	b40e      	push	{r1, r2, r3}
 80062a2:	b500      	push	{lr}
 80062a4:	b09c      	sub	sp, #112	; 0x70
 80062a6:	ab1d      	add	r3, sp, #116	; 0x74
 80062a8:	9002      	str	r0, [sp, #8]
 80062aa:	9006      	str	r0, [sp, #24]
 80062ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80062b0:	4809      	ldr	r0, [pc, #36]	; (80062d8 <siprintf+0x38>)
 80062b2:	9107      	str	r1, [sp, #28]
 80062b4:	9104      	str	r1, [sp, #16]
 80062b6:	4909      	ldr	r1, [pc, #36]	; (80062dc <siprintf+0x3c>)
 80062b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80062bc:	9105      	str	r1, [sp, #20]
 80062be:	6800      	ldr	r0, [r0, #0]
 80062c0:	9301      	str	r3, [sp, #4]
 80062c2:	a902      	add	r1, sp, #8
 80062c4:	f000 f888 	bl	80063d8 <_svfiprintf_r>
 80062c8:	9b02      	ldr	r3, [sp, #8]
 80062ca:	2200      	movs	r2, #0
 80062cc:	701a      	strb	r2, [r3, #0]
 80062ce:	b01c      	add	sp, #112	; 0x70
 80062d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80062d4:	b003      	add	sp, #12
 80062d6:	4770      	bx	lr
 80062d8:	200001f0 	.word	0x200001f0
 80062dc:	ffff0208 	.word	0xffff0208

080062e0 <strncpy>:
 80062e0:	b510      	push	{r4, lr}
 80062e2:	3901      	subs	r1, #1
 80062e4:	4603      	mov	r3, r0
 80062e6:	b132      	cbz	r2, 80062f6 <strncpy+0x16>
 80062e8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80062ec:	f803 4b01 	strb.w	r4, [r3], #1
 80062f0:	3a01      	subs	r2, #1
 80062f2:	2c00      	cmp	r4, #0
 80062f4:	d1f7      	bne.n	80062e6 <strncpy+0x6>
 80062f6:	441a      	add	r2, r3
 80062f8:	2100      	movs	r1, #0
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d100      	bne.n	8006300 <strncpy+0x20>
 80062fe:	bd10      	pop	{r4, pc}
 8006300:	f803 1b01 	strb.w	r1, [r3], #1
 8006304:	e7f9      	b.n	80062fa <strncpy+0x1a>
	...

08006308 <__malloc_lock>:
 8006308:	4801      	ldr	r0, [pc, #4]	; (8006310 <__malloc_lock+0x8>)
 800630a:	f000 baf9 	b.w	8006900 <__retarget_lock_acquire_recursive>
 800630e:	bf00      	nop
 8006310:	20001db0 	.word	0x20001db0

08006314 <__malloc_unlock>:
 8006314:	4801      	ldr	r0, [pc, #4]	; (800631c <__malloc_unlock+0x8>)
 8006316:	f000 baf4 	b.w	8006902 <__retarget_lock_release_recursive>
 800631a:	bf00      	nop
 800631c:	20001db0 	.word	0x20001db0

08006320 <__ssputs_r>:
 8006320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006324:	688e      	ldr	r6, [r1, #8]
 8006326:	429e      	cmp	r6, r3
 8006328:	4682      	mov	sl, r0
 800632a:	460c      	mov	r4, r1
 800632c:	4690      	mov	r8, r2
 800632e:	461f      	mov	r7, r3
 8006330:	d838      	bhi.n	80063a4 <__ssputs_r+0x84>
 8006332:	898a      	ldrh	r2, [r1, #12]
 8006334:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006338:	d032      	beq.n	80063a0 <__ssputs_r+0x80>
 800633a:	6825      	ldr	r5, [r4, #0]
 800633c:	6909      	ldr	r1, [r1, #16]
 800633e:	eba5 0901 	sub.w	r9, r5, r1
 8006342:	6965      	ldr	r5, [r4, #20]
 8006344:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006348:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800634c:	3301      	adds	r3, #1
 800634e:	444b      	add	r3, r9
 8006350:	106d      	asrs	r5, r5, #1
 8006352:	429d      	cmp	r5, r3
 8006354:	bf38      	it	cc
 8006356:	461d      	movcc	r5, r3
 8006358:	0553      	lsls	r3, r2, #21
 800635a:	d531      	bpl.n	80063c0 <__ssputs_r+0xa0>
 800635c:	4629      	mov	r1, r5
 800635e:	f7ff ff1b 	bl	8006198 <_malloc_r>
 8006362:	4606      	mov	r6, r0
 8006364:	b950      	cbnz	r0, 800637c <__ssputs_r+0x5c>
 8006366:	230c      	movs	r3, #12
 8006368:	f8ca 3000 	str.w	r3, [sl]
 800636c:	89a3      	ldrh	r3, [r4, #12]
 800636e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006372:	81a3      	strh	r3, [r4, #12]
 8006374:	f04f 30ff 	mov.w	r0, #4294967295
 8006378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800637c:	6921      	ldr	r1, [r4, #16]
 800637e:	464a      	mov	r2, r9
 8006380:	f000 fac0 	bl	8006904 <memcpy>
 8006384:	89a3      	ldrh	r3, [r4, #12]
 8006386:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800638a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800638e:	81a3      	strh	r3, [r4, #12]
 8006390:	6126      	str	r6, [r4, #16]
 8006392:	6165      	str	r5, [r4, #20]
 8006394:	444e      	add	r6, r9
 8006396:	eba5 0509 	sub.w	r5, r5, r9
 800639a:	6026      	str	r6, [r4, #0]
 800639c:	60a5      	str	r5, [r4, #8]
 800639e:	463e      	mov	r6, r7
 80063a0:	42be      	cmp	r6, r7
 80063a2:	d900      	bls.n	80063a6 <__ssputs_r+0x86>
 80063a4:	463e      	mov	r6, r7
 80063a6:	6820      	ldr	r0, [r4, #0]
 80063a8:	4632      	mov	r2, r6
 80063aa:	4641      	mov	r1, r8
 80063ac:	f000 fab8 	bl	8006920 <memmove>
 80063b0:	68a3      	ldr	r3, [r4, #8]
 80063b2:	1b9b      	subs	r3, r3, r6
 80063b4:	60a3      	str	r3, [r4, #8]
 80063b6:	6823      	ldr	r3, [r4, #0]
 80063b8:	4433      	add	r3, r6
 80063ba:	6023      	str	r3, [r4, #0]
 80063bc:	2000      	movs	r0, #0
 80063be:	e7db      	b.n	8006378 <__ssputs_r+0x58>
 80063c0:	462a      	mov	r2, r5
 80063c2:	f000 fac7 	bl	8006954 <_realloc_r>
 80063c6:	4606      	mov	r6, r0
 80063c8:	2800      	cmp	r0, #0
 80063ca:	d1e1      	bne.n	8006390 <__ssputs_r+0x70>
 80063cc:	6921      	ldr	r1, [r4, #16]
 80063ce:	4650      	mov	r0, sl
 80063d0:	f7ff fe76 	bl	80060c0 <_free_r>
 80063d4:	e7c7      	b.n	8006366 <__ssputs_r+0x46>
	...

080063d8 <_svfiprintf_r>:
 80063d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063dc:	4698      	mov	r8, r3
 80063de:	898b      	ldrh	r3, [r1, #12]
 80063e0:	061b      	lsls	r3, r3, #24
 80063e2:	b09d      	sub	sp, #116	; 0x74
 80063e4:	4607      	mov	r7, r0
 80063e6:	460d      	mov	r5, r1
 80063e8:	4614      	mov	r4, r2
 80063ea:	d50e      	bpl.n	800640a <_svfiprintf_r+0x32>
 80063ec:	690b      	ldr	r3, [r1, #16]
 80063ee:	b963      	cbnz	r3, 800640a <_svfiprintf_r+0x32>
 80063f0:	2140      	movs	r1, #64	; 0x40
 80063f2:	f7ff fed1 	bl	8006198 <_malloc_r>
 80063f6:	6028      	str	r0, [r5, #0]
 80063f8:	6128      	str	r0, [r5, #16]
 80063fa:	b920      	cbnz	r0, 8006406 <_svfiprintf_r+0x2e>
 80063fc:	230c      	movs	r3, #12
 80063fe:	603b      	str	r3, [r7, #0]
 8006400:	f04f 30ff 	mov.w	r0, #4294967295
 8006404:	e0d1      	b.n	80065aa <_svfiprintf_r+0x1d2>
 8006406:	2340      	movs	r3, #64	; 0x40
 8006408:	616b      	str	r3, [r5, #20]
 800640a:	2300      	movs	r3, #0
 800640c:	9309      	str	r3, [sp, #36]	; 0x24
 800640e:	2320      	movs	r3, #32
 8006410:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006414:	f8cd 800c 	str.w	r8, [sp, #12]
 8006418:	2330      	movs	r3, #48	; 0x30
 800641a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80065c4 <_svfiprintf_r+0x1ec>
 800641e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006422:	f04f 0901 	mov.w	r9, #1
 8006426:	4623      	mov	r3, r4
 8006428:	469a      	mov	sl, r3
 800642a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800642e:	b10a      	cbz	r2, 8006434 <_svfiprintf_r+0x5c>
 8006430:	2a25      	cmp	r2, #37	; 0x25
 8006432:	d1f9      	bne.n	8006428 <_svfiprintf_r+0x50>
 8006434:	ebba 0b04 	subs.w	fp, sl, r4
 8006438:	d00b      	beq.n	8006452 <_svfiprintf_r+0x7a>
 800643a:	465b      	mov	r3, fp
 800643c:	4622      	mov	r2, r4
 800643e:	4629      	mov	r1, r5
 8006440:	4638      	mov	r0, r7
 8006442:	f7ff ff6d 	bl	8006320 <__ssputs_r>
 8006446:	3001      	adds	r0, #1
 8006448:	f000 80aa 	beq.w	80065a0 <_svfiprintf_r+0x1c8>
 800644c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800644e:	445a      	add	r2, fp
 8006450:	9209      	str	r2, [sp, #36]	; 0x24
 8006452:	f89a 3000 	ldrb.w	r3, [sl]
 8006456:	2b00      	cmp	r3, #0
 8006458:	f000 80a2 	beq.w	80065a0 <_svfiprintf_r+0x1c8>
 800645c:	2300      	movs	r3, #0
 800645e:	f04f 32ff 	mov.w	r2, #4294967295
 8006462:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006466:	f10a 0a01 	add.w	sl, sl, #1
 800646a:	9304      	str	r3, [sp, #16]
 800646c:	9307      	str	r3, [sp, #28]
 800646e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006472:	931a      	str	r3, [sp, #104]	; 0x68
 8006474:	4654      	mov	r4, sl
 8006476:	2205      	movs	r2, #5
 8006478:	f814 1b01 	ldrb.w	r1, [r4], #1
 800647c:	4851      	ldr	r0, [pc, #324]	; (80065c4 <_svfiprintf_r+0x1ec>)
 800647e:	f7f9 feaf 	bl	80001e0 <memchr>
 8006482:	9a04      	ldr	r2, [sp, #16]
 8006484:	b9d8      	cbnz	r0, 80064be <_svfiprintf_r+0xe6>
 8006486:	06d0      	lsls	r0, r2, #27
 8006488:	bf44      	itt	mi
 800648a:	2320      	movmi	r3, #32
 800648c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006490:	0711      	lsls	r1, r2, #28
 8006492:	bf44      	itt	mi
 8006494:	232b      	movmi	r3, #43	; 0x2b
 8006496:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800649a:	f89a 3000 	ldrb.w	r3, [sl]
 800649e:	2b2a      	cmp	r3, #42	; 0x2a
 80064a0:	d015      	beq.n	80064ce <_svfiprintf_r+0xf6>
 80064a2:	9a07      	ldr	r2, [sp, #28]
 80064a4:	4654      	mov	r4, sl
 80064a6:	2000      	movs	r0, #0
 80064a8:	f04f 0c0a 	mov.w	ip, #10
 80064ac:	4621      	mov	r1, r4
 80064ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064b2:	3b30      	subs	r3, #48	; 0x30
 80064b4:	2b09      	cmp	r3, #9
 80064b6:	d94e      	bls.n	8006556 <_svfiprintf_r+0x17e>
 80064b8:	b1b0      	cbz	r0, 80064e8 <_svfiprintf_r+0x110>
 80064ba:	9207      	str	r2, [sp, #28]
 80064bc:	e014      	b.n	80064e8 <_svfiprintf_r+0x110>
 80064be:	eba0 0308 	sub.w	r3, r0, r8
 80064c2:	fa09 f303 	lsl.w	r3, r9, r3
 80064c6:	4313      	orrs	r3, r2
 80064c8:	9304      	str	r3, [sp, #16]
 80064ca:	46a2      	mov	sl, r4
 80064cc:	e7d2      	b.n	8006474 <_svfiprintf_r+0x9c>
 80064ce:	9b03      	ldr	r3, [sp, #12]
 80064d0:	1d19      	adds	r1, r3, #4
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	9103      	str	r1, [sp, #12]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	bfbb      	ittet	lt
 80064da:	425b      	neglt	r3, r3
 80064dc:	f042 0202 	orrlt.w	r2, r2, #2
 80064e0:	9307      	strge	r3, [sp, #28]
 80064e2:	9307      	strlt	r3, [sp, #28]
 80064e4:	bfb8      	it	lt
 80064e6:	9204      	strlt	r2, [sp, #16]
 80064e8:	7823      	ldrb	r3, [r4, #0]
 80064ea:	2b2e      	cmp	r3, #46	; 0x2e
 80064ec:	d10c      	bne.n	8006508 <_svfiprintf_r+0x130>
 80064ee:	7863      	ldrb	r3, [r4, #1]
 80064f0:	2b2a      	cmp	r3, #42	; 0x2a
 80064f2:	d135      	bne.n	8006560 <_svfiprintf_r+0x188>
 80064f4:	9b03      	ldr	r3, [sp, #12]
 80064f6:	1d1a      	adds	r2, r3, #4
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	9203      	str	r2, [sp, #12]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	bfb8      	it	lt
 8006500:	f04f 33ff 	movlt.w	r3, #4294967295
 8006504:	3402      	adds	r4, #2
 8006506:	9305      	str	r3, [sp, #20]
 8006508:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80065d4 <_svfiprintf_r+0x1fc>
 800650c:	7821      	ldrb	r1, [r4, #0]
 800650e:	2203      	movs	r2, #3
 8006510:	4650      	mov	r0, sl
 8006512:	f7f9 fe65 	bl	80001e0 <memchr>
 8006516:	b140      	cbz	r0, 800652a <_svfiprintf_r+0x152>
 8006518:	2340      	movs	r3, #64	; 0x40
 800651a:	eba0 000a 	sub.w	r0, r0, sl
 800651e:	fa03 f000 	lsl.w	r0, r3, r0
 8006522:	9b04      	ldr	r3, [sp, #16]
 8006524:	4303      	orrs	r3, r0
 8006526:	3401      	adds	r4, #1
 8006528:	9304      	str	r3, [sp, #16]
 800652a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800652e:	4826      	ldr	r0, [pc, #152]	; (80065c8 <_svfiprintf_r+0x1f0>)
 8006530:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006534:	2206      	movs	r2, #6
 8006536:	f7f9 fe53 	bl	80001e0 <memchr>
 800653a:	2800      	cmp	r0, #0
 800653c:	d038      	beq.n	80065b0 <_svfiprintf_r+0x1d8>
 800653e:	4b23      	ldr	r3, [pc, #140]	; (80065cc <_svfiprintf_r+0x1f4>)
 8006540:	bb1b      	cbnz	r3, 800658a <_svfiprintf_r+0x1b2>
 8006542:	9b03      	ldr	r3, [sp, #12]
 8006544:	3307      	adds	r3, #7
 8006546:	f023 0307 	bic.w	r3, r3, #7
 800654a:	3308      	adds	r3, #8
 800654c:	9303      	str	r3, [sp, #12]
 800654e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006550:	4433      	add	r3, r6
 8006552:	9309      	str	r3, [sp, #36]	; 0x24
 8006554:	e767      	b.n	8006426 <_svfiprintf_r+0x4e>
 8006556:	fb0c 3202 	mla	r2, ip, r2, r3
 800655a:	460c      	mov	r4, r1
 800655c:	2001      	movs	r0, #1
 800655e:	e7a5      	b.n	80064ac <_svfiprintf_r+0xd4>
 8006560:	2300      	movs	r3, #0
 8006562:	3401      	adds	r4, #1
 8006564:	9305      	str	r3, [sp, #20]
 8006566:	4619      	mov	r1, r3
 8006568:	f04f 0c0a 	mov.w	ip, #10
 800656c:	4620      	mov	r0, r4
 800656e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006572:	3a30      	subs	r2, #48	; 0x30
 8006574:	2a09      	cmp	r2, #9
 8006576:	d903      	bls.n	8006580 <_svfiprintf_r+0x1a8>
 8006578:	2b00      	cmp	r3, #0
 800657a:	d0c5      	beq.n	8006508 <_svfiprintf_r+0x130>
 800657c:	9105      	str	r1, [sp, #20]
 800657e:	e7c3      	b.n	8006508 <_svfiprintf_r+0x130>
 8006580:	fb0c 2101 	mla	r1, ip, r1, r2
 8006584:	4604      	mov	r4, r0
 8006586:	2301      	movs	r3, #1
 8006588:	e7f0      	b.n	800656c <_svfiprintf_r+0x194>
 800658a:	ab03      	add	r3, sp, #12
 800658c:	9300      	str	r3, [sp, #0]
 800658e:	462a      	mov	r2, r5
 8006590:	4b0f      	ldr	r3, [pc, #60]	; (80065d0 <_svfiprintf_r+0x1f8>)
 8006592:	a904      	add	r1, sp, #16
 8006594:	4638      	mov	r0, r7
 8006596:	f3af 8000 	nop.w
 800659a:	1c42      	adds	r2, r0, #1
 800659c:	4606      	mov	r6, r0
 800659e:	d1d6      	bne.n	800654e <_svfiprintf_r+0x176>
 80065a0:	89ab      	ldrh	r3, [r5, #12]
 80065a2:	065b      	lsls	r3, r3, #25
 80065a4:	f53f af2c 	bmi.w	8006400 <_svfiprintf_r+0x28>
 80065a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065aa:	b01d      	add	sp, #116	; 0x74
 80065ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065b0:	ab03      	add	r3, sp, #12
 80065b2:	9300      	str	r3, [sp, #0]
 80065b4:	462a      	mov	r2, r5
 80065b6:	4b06      	ldr	r3, [pc, #24]	; (80065d0 <_svfiprintf_r+0x1f8>)
 80065b8:	a904      	add	r1, sp, #16
 80065ba:	4638      	mov	r0, r7
 80065bc:	f000 f87a 	bl	80066b4 <_printf_i>
 80065c0:	e7eb      	b.n	800659a <_svfiprintf_r+0x1c2>
 80065c2:	bf00      	nop
 80065c4:	08006a72 	.word	0x08006a72
 80065c8:	08006a7c 	.word	0x08006a7c
 80065cc:	00000000 	.word	0x00000000
 80065d0:	08006321 	.word	0x08006321
 80065d4:	08006a78 	.word	0x08006a78

080065d8 <_printf_common>:
 80065d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065dc:	4616      	mov	r6, r2
 80065de:	4699      	mov	r9, r3
 80065e0:	688a      	ldr	r2, [r1, #8]
 80065e2:	690b      	ldr	r3, [r1, #16]
 80065e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80065e8:	4293      	cmp	r3, r2
 80065ea:	bfb8      	it	lt
 80065ec:	4613      	movlt	r3, r2
 80065ee:	6033      	str	r3, [r6, #0]
 80065f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80065f4:	4607      	mov	r7, r0
 80065f6:	460c      	mov	r4, r1
 80065f8:	b10a      	cbz	r2, 80065fe <_printf_common+0x26>
 80065fa:	3301      	adds	r3, #1
 80065fc:	6033      	str	r3, [r6, #0]
 80065fe:	6823      	ldr	r3, [r4, #0]
 8006600:	0699      	lsls	r1, r3, #26
 8006602:	bf42      	ittt	mi
 8006604:	6833      	ldrmi	r3, [r6, #0]
 8006606:	3302      	addmi	r3, #2
 8006608:	6033      	strmi	r3, [r6, #0]
 800660a:	6825      	ldr	r5, [r4, #0]
 800660c:	f015 0506 	ands.w	r5, r5, #6
 8006610:	d106      	bne.n	8006620 <_printf_common+0x48>
 8006612:	f104 0a19 	add.w	sl, r4, #25
 8006616:	68e3      	ldr	r3, [r4, #12]
 8006618:	6832      	ldr	r2, [r6, #0]
 800661a:	1a9b      	subs	r3, r3, r2
 800661c:	42ab      	cmp	r3, r5
 800661e:	dc26      	bgt.n	800666e <_printf_common+0x96>
 8006620:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006624:	1e13      	subs	r3, r2, #0
 8006626:	6822      	ldr	r2, [r4, #0]
 8006628:	bf18      	it	ne
 800662a:	2301      	movne	r3, #1
 800662c:	0692      	lsls	r2, r2, #26
 800662e:	d42b      	bmi.n	8006688 <_printf_common+0xb0>
 8006630:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006634:	4649      	mov	r1, r9
 8006636:	4638      	mov	r0, r7
 8006638:	47c0      	blx	r8
 800663a:	3001      	adds	r0, #1
 800663c:	d01e      	beq.n	800667c <_printf_common+0xa4>
 800663e:	6823      	ldr	r3, [r4, #0]
 8006640:	68e5      	ldr	r5, [r4, #12]
 8006642:	6832      	ldr	r2, [r6, #0]
 8006644:	f003 0306 	and.w	r3, r3, #6
 8006648:	2b04      	cmp	r3, #4
 800664a:	bf08      	it	eq
 800664c:	1aad      	subeq	r5, r5, r2
 800664e:	68a3      	ldr	r3, [r4, #8]
 8006650:	6922      	ldr	r2, [r4, #16]
 8006652:	bf0c      	ite	eq
 8006654:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006658:	2500      	movne	r5, #0
 800665a:	4293      	cmp	r3, r2
 800665c:	bfc4      	itt	gt
 800665e:	1a9b      	subgt	r3, r3, r2
 8006660:	18ed      	addgt	r5, r5, r3
 8006662:	2600      	movs	r6, #0
 8006664:	341a      	adds	r4, #26
 8006666:	42b5      	cmp	r5, r6
 8006668:	d11a      	bne.n	80066a0 <_printf_common+0xc8>
 800666a:	2000      	movs	r0, #0
 800666c:	e008      	b.n	8006680 <_printf_common+0xa8>
 800666e:	2301      	movs	r3, #1
 8006670:	4652      	mov	r2, sl
 8006672:	4649      	mov	r1, r9
 8006674:	4638      	mov	r0, r7
 8006676:	47c0      	blx	r8
 8006678:	3001      	adds	r0, #1
 800667a:	d103      	bne.n	8006684 <_printf_common+0xac>
 800667c:	f04f 30ff 	mov.w	r0, #4294967295
 8006680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006684:	3501      	adds	r5, #1
 8006686:	e7c6      	b.n	8006616 <_printf_common+0x3e>
 8006688:	18e1      	adds	r1, r4, r3
 800668a:	1c5a      	adds	r2, r3, #1
 800668c:	2030      	movs	r0, #48	; 0x30
 800668e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006692:	4422      	add	r2, r4
 8006694:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006698:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800669c:	3302      	adds	r3, #2
 800669e:	e7c7      	b.n	8006630 <_printf_common+0x58>
 80066a0:	2301      	movs	r3, #1
 80066a2:	4622      	mov	r2, r4
 80066a4:	4649      	mov	r1, r9
 80066a6:	4638      	mov	r0, r7
 80066a8:	47c0      	blx	r8
 80066aa:	3001      	adds	r0, #1
 80066ac:	d0e6      	beq.n	800667c <_printf_common+0xa4>
 80066ae:	3601      	adds	r6, #1
 80066b0:	e7d9      	b.n	8006666 <_printf_common+0x8e>
	...

080066b4 <_printf_i>:
 80066b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066b8:	7e0f      	ldrb	r7, [r1, #24]
 80066ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80066bc:	2f78      	cmp	r7, #120	; 0x78
 80066be:	4691      	mov	r9, r2
 80066c0:	4680      	mov	r8, r0
 80066c2:	460c      	mov	r4, r1
 80066c4:	469a      	mov	sl, r3
 80066c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80066ca:	d807      	bhi.n	80066dc <_printf_i+0x28>
 80066cc:	2f62      	cmp	r7, #98	; 0x62
 80066ce:	d80a      	bhi.n	80066e6 <_printf_i+0x32>
 80066d0:	2f00      	cmp	r7, #0
 80066d2:	f000 80d8 	beq.w	8006886 <_printf_i+0x1d2>
 80066d6:	2f58      	cmp	r7, #88	; 0x58
 80066d8:	f000 80a3 	beq.w	8006822 <_printf_i+0x16e>
 80066dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80066e4:	e03a      	b.n	800675c <_printf_i+0xa8>
 80066e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80066ea:	2b15      	cmp	r3, #21
 80066ec:	d8f6      	bhi.n	80066dc <_printf_i+0x28>
 80066ee:	a101      	add	r1, pc, #4	; (adr r1, 80066f4 <_printf_i+0x40>)
 80066f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066f4:	0800674d 	.word	0x0800674d
 80066f8:	08006761 	.word	0x08006761
 80066fc:	080066dd 	.word	0x080066dd
 8006700:	080066dd 	.word	0x080066dd
 8006704:	080066dd 	.word	0x080066dd
 8006708:	080066dd 	.word	0x080066dd
 800670c:	08006761 	.word	0x08006761
 8006710:	080066dd 	.word	0x080066dd
 8006714:	080066dd 	.word	0x080066dd
 8006718:	080066dd 	.word	0x080066dd
 800671c:	080066dd 	.word	0x080066dd
 8006720:	0800686d 	.word	0x0800686d
 8006724:	08006791 	.word	0x08006791
 8006728:	0800684f 	.word	0x0800684f
 800672c:	080066dd 	.word	0x080066dd
 8006730:	080066dd 	.word	0x080066dd
 8006734:	0800688f 	.word	0x0800688f
 8006738:	080066dd 	.word	0x080066dd
 800673c:	08006791 	.word	0x08006791
 8006740:	080066dd 	.word	0x080066dd
 8006744:	080066dd 	.word	0x080066dd
 8006748:	08006857 	.word	0x08006857
 800674c:	682b      	ldr	r3, [r5, #0]
 800674e:	1d1a      	adds	r2, r3, #4
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	602a      	str	r2, [r5, #0]
 8006754:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006758:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800675c:	2301      	movs	r3, #1
 800675e:	e0a3      	b.n	80068a8 <_printf_i+0x1f4>
 8006760:	6820      	ldr	r0, [r4, #0]
 8006762:	6829      	ldr	r1, [r5, #0]
 8006764:	0606      	lsls	r6, r0, #24
 8006766:	f101 0304 	add.w	r3, r1, #4
 800676a:	d50a      	bpl.n	8006782 <_printf_i+0xce>
 800676c:	680e      	ldr	r6, [r1, #0]
 800676e:	602b      	str	r3, [r5, #0]
 8006770:	2e00      	cmp	r6, #0
 8006772:	da03      	bge.n	800677c <_printf_i+0xc8>
 8006774:	232d      	movs	r3, #45	; 0x2d
 8006776:	4276      	negs	r6, r6
 8006778:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800677c:	485e      	ldr	r0, [pc, #376]	; (80068f8 <_printf_i+0x244>)
 800677e:	230a      	movs	r3, #10
 8006780:	e019      	b.n	80067b6 <_printf_i+0x102>
 8006782:	680e      	ldr	r6, [r1, #0]
 8006784:	602b      	str	r3, [r5, #0]
 8006786:	f010 0f40 	tst.w	r0, #64	; 0x40
 800678a:	bf18      	it	ne
 800678c:	b236      	sxthne	r6, r6
 800678e:	e7ef      	b.n	8006770 <_printf_i+0xbc>
 8006790:	682b      	ldr	r3, [r5, #0]
 8006792:	6820      	ldr	r0, [r4, #0]
 8006794:	1d19      	adds	r1, r3, #4
 8006796:	6029      	str	r1, [r5, #0]
 8006798:	0601      	lsls	r1, r0, #24
 800679a:	d501      	bpl.n	80067a0 <_printf_i+0xec>
 800679c:	681e      	ldr	r6, [r3, #0]
 800679e:	e002      	b.n	80067a6 <_printf_i+0xf2>
 80067a0:	0646      	lsls	r6, r0, #25
 80067a2:	d5fb      	bpl.n	800679c <_printf_i+0xe8>
 80067a4:	881e      	ldrh	r6, [r3, #0]
 80067a6:	4854      	ldr	r0, [pc, #336]	; (80068f8 <_printf_i+0x244>)
 80067a8:	2f6f      	cmp	r7, #111	; 0x6f
 80067aa:	bf0c      	ite	eq
 80067ac:	2308      	moveq	r3, #8
 80067ae:	230a      	movne	r3, #10
 80067b0:	2100      	movs	r1, #0
 80067b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80067b6:	6865      	ldr	r5, [r4, #4]
 80067b8:	60a5      	str	r5, [r4, #8]
 80067ba:	2d00      	cmp	r5, #0
 80067bc:	bfa2      	ittt	ge
 80067be:	6821      	ldrge	r1, [r4, #0]
 80067c0:	f021 0104 	bicge.w	r1, r1, #4
 80067c4:	6021      	strge	r1, [r4, #0]
 80067c6:	b90e      	cbnz	r6, 80067cc <_printf_i+0x118>
 80067c8:	2d00      	cmp	r5, #0
 80067ca:	d04d      	beq.n	8006868 <_printf_i+0x1b4>
 80067cc:	4615      	mov	r5, r2
 80067ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80067d2:	fb03 6711 	mls	r7, r3, r1, r6
 80067d6:	5dc7      	ldrb	r7, [r0, r7]
 80067d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80067dc:	4637      	mov	r7, r6
 80067de:	42bb      	cmp	r3, r7
 80067e0:	460e      	mov	r6, r1
 80067e2:	d9f4      	bls.n	80067ce <_printf_i+0x11a>
 80067e4:	2b08      	cmp	r3, #8
 80067e6:	d10b      	bne.n	8006800 <_printf_i+0x14c>
 80067e8:	6823      	ldr	r3, [r4, #0]
 80067ea:	07de      	lsls	r6, r3, #31
 80067ec:	d508      	bpl.n	8006800 <_printf_i+0x14c>
 80067ee:	6923      	ldr	r3, [r4, #16]
 80067f0:	6861      	ldr	r1, [r4, #4]
 80067f2:	4299      	cmp	r1, r3
 80067f4:	bfde      	ittt	le
 80067f6:	2330      	movle	r3, #48	; 0x30
 80067f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80067fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006800:	1b52      	subs	r2, r2, r5
 8006802:	6122      	str	r2, [r4, #16]
 8006804:	f8cd a000 	str.w	sl, [sp]
 8006808:	464b      	mov	r3, r9
 800680a:	aa03      	add	r2, sp, #12
 800680c:	4621      	mov	r1, r4
 800680e:	4640      	mov	r0, r8
 8006810:	f7ff fee2 	bl	80065d8 <_printf_common>
 8006814:	3001      	adds	r0, #1
 8006816:	d14c      	bne.n	80068b2 <_printf_i+0x1fe>
 8006818:	f04f 30ff 	mov.w	r0, #4294967295
 800681c:	b004      	add	sp, #16
 800681e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006822:	4835      	ldr	r0, [pc, #212]	; (80068f8 <_printf_i+0x244>)
 8006824:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006828:	6829      	ldr	r1, [r5, #0]
 800682a:	6823      	ldr	r3, [r4, #0]
 800682c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006830:	6029      	str	r1, [r5, #0]
 8006832:	061d      	lsls	r5, r3, #24
 8006834:	d514      	bpl.n	8006860 <_printf_i+0x1ac>
 8006836:	07df      	lsls	r7, r3, #31
 8006838:	bf44      	itt	mi
 800683a:	f043 0320 	orrmi.w	r3, r3, #32
 800683e:	6023      	strmi	r3, [r4, #0]
 8006840:	b91e      	cbnz	r6, 800684a <_printf_i+0x196>
 8006842:	6823      	ldr	r3, [r4, #0]
 8006844:	f023 0320 	bic.w	r3, r3, #32
 8006848:	6023      	str	r3, [r4, #0]
 800684a:	2310      	movs	r3, #16
 800684c:	e7b0      	b.n	80067b0 <_printf_i+0xfc>
 800684e:	6823      	ldr	r3, [r4, #0]
 8006850:	f043 0320 	orr.w	r3, r3, #32
 8006854:	6023      	str	r3, [r4, #0]
 8006856:	2378      	movs	r3, #120	; 0x78
 8006858:	4828      	ldr	r0, [pc, #160]	; (80068fc <_printf_i+0x248>)
 800685a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800685e:	e7e3      	b.n	8006828 <_printf_i+0x174>
 8006860:	0659      	lsls	r1, r3, #25
 8006862:	bf48      	it	mi
 8006864:	b2b6      	uxthmi	r6, r6
 8006866:	e7e6      	b.n	8006836 <_printf_i+0x182>
 8006868:	4615      	mov	r5, r2
 800686a:	e7bb      	b.n	80067e4 <_printf_i+0x130>
 800686c:	682b      	ldr	r3, [r5, #0]
 800686e:	6826      	ldr	r6, [r4, #0]
 8006870:	6961      	ldr	r1, [r4, #20]
 8006872:	1d18      	adds	r0, r3, #4
 8006874:	6028      	str	r0, [r5, #0]
 8006876:	0635      	lsls	r5, r6, #24
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	d501      	bpl.n	8006880 <_printf_i+0x1cc>
 800687c:	6019      	str	r1, [r3, #0]
 800687e:	e002      	b.n	8006886 <_printf_i+0x1d2>
 8006880:	0670      	lsls	r0, r6, #25
 8006882:	d5fb      	bpl.n	800687c <_printf_i+0x1c8>
 8006884:	8019      	strh	r1, [r3, #0]
 8006886:	2300      	movs	r3, #0
 8006888:	6123      	str	r3, [r4, #16]
 800688a:	4615      	mov	r5, r2
 800688c:	e7ba      	b.n	8006804 <_printf_i+0x150>
 800688e:	682b      	ldr	r3, [r5, #0]
 8006890:	1d1a      	adds	r2, r3, #4
 8006892:	602a      	str	r2, [r5, #0]
 8006894:	681d      	ldr	r5, [r3, #0]
 8006896:	6862      	ldr	r2, [r4, #4]
 8006898:	2100      	movs	r1, #0
 800689a:	4628      	mov	r0, r5
 800689c:	f7f9 fca0 	bl	80001e0 <memchr>
 80068a0:	b108      	cbz	r0, 80068a6 <_printf_i+0x1f2>
 80068a2:	1b40      	subs	r0, r0, r5
 80068a4:	6060      	str	r0, [r4, #4]
 80068a6:	6863      	ldr	r3, [r4, #4]
 80068a8:	6123      	str	r3, [r4, #16]
 80068aa:	2300      	movs	r3, #0
 80068ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068b0:	e7a8      	b.n	8006804 <_printf_i+0x150>
 80068b2:	6923      	ldr	r3, [r4, #16]
 80068b4:	462a      	mov	r2, r5
 80068b6:	4649      	mov	r1, r9
 80068b8:	4640      	mov	r0, r8
 80068ba:	47d0      	blx	sl
 80068bc:	3001      	adds	r0, #1
 80068be:	d0ab      	beq.n	8006818 <_printf_i+0x164>
 80068c0:	6823      	ldr	r3, [r4, #0]
 80068c2:	079b      	lsls	r3, r3, #30
 80068c4:	d413      	bmi.n	80068ee <_printf_i+0x23a>
 80068c6:	68e0      	ldr	r0, [r4, #12]
 80068c8:	9b03      	ldr	r3, [sp, #12]
 80068ca:	4298      	cmp	r0, r3
 80068cc:	bfb8      	it	lt
 80068ce:	4618      	movlt	r0, r3
 80068d0:	e7a4      	b.n	800681c <_printf_i+0x168>
 80068d2:	2301      	movs	r3, #1
 80068d4:	4632      	mov	r2, r6
 80068d6:	4649      	mov	r1, r9
 80068d8:	4640      	mov	r0, r8
 80068da:	47d0      	blx	sl
 80068dc:	3001      	adds	r0, #1
 80068de:	d09b      	beq.n	8006818 <_printf_i+0x164>
 80068e0:	3501      	adds	r5, #1
 80068e2:	68e3      	ldr	r3, [r4, #12]
 80068e4:	9903      	ldr	r1, [sp, #12]
 80068e6:	1a5b      	subs	r3, r3, r1
 80068e8:	42ab      	cmp	r3, r5
 80068ea:	dcf2      	bgt.n	80068d2 <_printf_i+0x21e>
 80068ec:	e7eb      	b.n	80068c6 <_printf_i+0x212>
 80068ee:	2500      	movs	r5, #0
 80068f0:	f104 0619 	add.w	r6, r4, #25
 80068f4:	e7f5      	b.n	80068e2 <_printf_i+0x22e>
 80068f6:	bf00      	nop
 80068f8:	08006a83 	.word	0x08006a83
 80068fc:	08006a94 	.word	0x08006a94

08006900 <__retarget_lock_acquire_recursive>:
 8006900:	4770      	bx	lr

08006902 <__retarget_lock_release_recursive>:
 8006902:	4770      	bx	lr

08006904 <memcpy>:
 8006904:	440a      	add	r2, r1
 8006906:	4291      	cmp	r1, r2
 8006908:	f100 33ff 	add.w	r3, r0, #4294967295
 800690c:	d100      	bne.n	8006910 <memcpy+0xc>
 800690e:	4770      	bx	lr
 8006910:	b510      	push	{r4, lr}
 8006912:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006916:	f803 4f01 	strb.w	r4, [r3, #1]!
 800691a:	4291      	cmp	r1, r2
 800691c:	d1f9      	bne.n	8006912 <memcpy+0xe>
 800691e:	bd10      	pop	{r4, pc}

08006920 <memmove>:
 8006920:	4288      	cmp	r0, r1
 8006922:	b510      	push	{r4, lr}
 8006924:	eb01 0402 	add.w	r4, r1, r2
 8006928:	d902      	bls.n	8006930 <memmove+0x10>
 800692a:	4284      	cmp	r4, r0
 800692c:	4623      	mov	r3, r4
 800692e:	d807      	bhi.n	8006940 <memmove+0x20>
 8006930:	1e43      	subs	r3, r0, #1
 8006932:	42a1      	cmp	r1, r4
 8006934:	d008      	beq.n	8006948 <memmove+0x28>
 8006936:	f811 2b01 	ldrb.w	r2, [r1], #1
 800693a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800693e:	e7f8      	b.n	8006932 <memmove+0x12>
 8006940:	4402      	add	r2, r0
 8006942:	4601      	mov	r1, r0
 8006944:	428a      	cmp	r2, r1
 8006946:	d100      	bne.n	800694a <memmove+0x2a>
 8006948:	bd10      	pop	{r4, pc}
 800694a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800694e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006952:	e7f7      	b.n	8006944 <memmove+0x24>

08006954 <_realloc_r>:
 8006954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006958:	4680      	mov	r8, r0
 800695a:	4614      	mov	r4, r2
 800695c:	460e      	mov	r6, r1
 800695e:	b921      	cbnz	r1, 800696a <_realloc_r+0x16>
 8006960:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006964:	4611      	mov	r1, r2
 8006966:	f7ff bc17 	b.w	8006198 <_malloc_r>
 800696a:	b92a      	cbnz	r2, 8006978 <_realloc_r+0x24>
 800696c:	f7ff fba8 	bl	80060c0 <_free_r>
 8006970:	4625      	mov	r5, r4
 8006972:	4628      	mov	r0, r5
 8006974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006978:	f000 f81b 	bl	80069b2 <_malloc_usable_size_r>
 800697c:	4284      	cmp	r4, r0
 800697e:	4607      	mov	r7, r0
 8006980:	d802      	bhi.n	8006988 <_realloc_r+0x34>
 8006982:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006986:	d812      	bhi.n	80069ae <_realloc_r+0x5a>
 8006988:	4621      	mov	r1, r4
 800698a:	4640      	mov	r0, r8
 800698c:	f7ff fc04 	bl	8006198 <_malloc_r>
 8006990:	4605      	mov	r5, r0
 8006992:	2800      	cmp	r0, #0
 8006994:	d0ed      	beq.n	8006972 <_realloc_r+0x1e>
 8006996:	42bc      	cmp	r4, r7
 8006998:	4622      	mov	r2, r4
 800699a:	4631      	mov	r1, r6
 800699c:	bf28      	it	cs
 800699e:	463a      	movcs	r2, r7
 80069a0:	f7ff ffb0 	bl	8006904 <memcpy>
 80069a4:	4631      	mov	r1, r6
 80069a6:	4640      	mov	r0, r8
 80069a8:	f7ff fb8a 	bl	80060c0 <_free_r>
 80069ac:	e7e1      	b.n	8006972 <_realloc_r+0x1e>
 80069ae:	4635      	mov	r5, r6
 80069b0:	e7df      	b.n	8006972 <_realloc_r+0x1e>

080069b2 <_malloc_usable_size_r>:
 80069b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069b6:	1f18      	subs	r0, r3, #4
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	bfbc      	itt	lt
 80069bc:	580b      	ldrlt	r3, [r1, r0]
 80069be:	18c0      	addlt	r0, r0, r3
 80069c0:	4770      	bx	lr
	...

080069c4 <_init>:
 80069c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069c6:	bf00      	nop
 80069c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069ca:	bc08      	pop	{r3}
 80069cc:	469e      	mov	lr, r3
 80069ce:	4770      	bx	lr

080069d0 <_fini>:
 80069d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069d2:	bf00      	nop
 80069d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069d6:	bc08      	pop	{r3}
 80069d8:	469e      	mov	lr, r3
 80069da:	4770      	bx	lr
